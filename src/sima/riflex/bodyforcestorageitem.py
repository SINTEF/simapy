# This an autogenerated file
# 
# Generated with BodyForceStorageItem
from __future__ import annotations
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.bodyforcestorageitem import BodyForceStorageItemBlueprint
from typing import Dict
from sima.riflex.bodyforcereferencesystem import BodyForceReferenceSystem
from sima.sima.moao import MOAO
from sima.sima.scriptablevalue import ScriptableValue
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from sima.simo.simobody import SIMOBody

class BodyForceStorageItem(MOAO):
    """
    Keyword arguments
    -----------------
    description : str
         (default "")
    scriptableValues : List[ScriptableValue]
    body : SIMOBody
    referenceSystem : BodyForceReferenceSystem
    """

    def __init__(self , description="", referenceSystem=BodyForceReferenceSystem.BODY_LOCAL, **kwargs):
        super().__init__(**kwargs)
        self.description = description
        self.scriptableValues = list()
        self.body = None
        self.referenceSystem = referenceSystem
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return BodyForceStorageItemBlueprint()


    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = value

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def body(self) -> SIMOBody:
        """"""
        return self.__body

    @body.setter
    def body(self, value: SIMOBody):
        """Set body"""
        self.__body = value

    @property
    def referenceSystem(self) -> BodyForceReferenceSystem:
        """"""
        return self.__referenceSystem

    @referenceSystem.setter
    def referenceSystem(self, value: BodyForceReferenceSystem):
        """Set referenceSystem"""
        self.__referenceSystem = value
