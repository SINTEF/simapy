# This an autogenerated file
# 
# Generated with TorsionStiffnessItem
from typing import Dict,Sequence,List
from dmt.entity import Entity
from dmt.blueprint import Blueprint
from .blueprints.torsionstiffnessitem import TorsionStiffnessItemBlueprint
from typing import Dict
from sima.sima.moao import MOAO
from sima.sima.scriptablevalue import ScriptableValue

class TorsionStiffnessItem(MOAO):
    """
    Keyword arguments
    -----------------
    name : str
         (default "")
    description : str
         (default "")
    _id : str
         (default "")
    scriptableValues : List[ScriptableValue]
    torsionMoment : float
         Torsion moment(default 0.0)
    torsionAngle : float
         Torsion angle/length(default 0.0)
    """

    def __init__(self , name="", description="", _id="", torsionMoment=0.0, torsionAngle=0.0, **kwargs):
        super().__init__(**kwargs)
        self.name = name
        self.description = description
        self._id = _id
        self.scriptableValues = list()
        self.torsionMoment = torsionMoment
        self.torsionAngle = torsionAngle
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return TorsionStiffnessItemBlueprint()


    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = str(value)

    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = str(value)

    @property
    def _id(self) -> str:
        """"""
        return self.___id

    @_id.setter
    def _id(self, value: str):
        """Set _id"""
        self.___id = str(value)

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def torsionMoment(self) -> float:
        """Torsion moment"""
        return self.__torsionMoment

    @torsionMoment.setter
    def torsionMoment(self, value: float):
        """Set torsionMoment"""
        self.__torsionMoment = float(value)

    @property
    def torsionAngle(self) -> float:
        """Torsion angle/length"""
        return self.__torsionAngle

    @torsionAngle.setter
    def torsionAngle(self, value: float):
        """Set torsionAngle"""
        self.__torsionAngle = float(value)
