# This an autogenerated file
# 
# Generated with SpatiallyVaryingCurrent
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.spatiallyvaryingcurrent import SpatiallyVaryingCurrentBlueprint
from typing import Dict
from sima.environment.current import Current
from sima.riflex.currentprofile import CurrentProfile
from sima.sima.scriptablevalue import ScriptableValue

class SpatiallyVaryingCurrent(Current):
    """
    Keyword arguments
    -----------------
    description : str
         (default "")
    scriptableValues : List[ScriptableValue]
    profiles : List[CurrentProfile]
    """

    def __init__(self , description="", **kwargs):
        super().__init__(**kwargs)
        self.description = description
        self.scriptableValues = list()
        self.profiles = list()
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return SpatiallyVaryingCurrentBlueprint()


    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = value

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def profiles(self) -> List[CurrentProfile]:
        """"""
        return self.__profiles

    @profiles.setter
    def profiles(self, value: List[CurrentProfile]):
        """Set profiles"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__profiles = value
