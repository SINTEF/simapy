# This an autogenerated file
# 
# Generated with AddedMassProperty
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.addedmassproperty import AddedMassPropertyBlueprint
from typing import Dict
from sima.riflex.massfrequencyproperty import MassFrequencyProperty
from sima.sima.namedobject import NamedObject
from sima.sima.scriptablevalue import ScriptableValue

class AddedMassProperty(NamedObject):
    """
    Keyword arguments
    -----------------
    _id : str
         (default "")
    scriptableValues : List[ScriptableValue]
    name : str
         (default "")
    massFrequencyProperties : List[MassFrequencyProperty]
    """

    def __init__(self , _id="", name="", **kwargs):
        super().__init__(**kwargs)
        self._id = _id
        self.scriptableValues = list()
        self.name = name
        self.massFrequencyProperties = list()
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return AddedMassPropertyBlueprint()


    @property
    def _id(self) -> str:
        """"""
        return self.___id

    @_id.setter
    def _id(self, value: str):
        """Set _id"""
        self.___id = str(value)

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = str(value)

    @property
    def massFrequencyProperties(self) -> List[MassFrequencyProperty]:
        """"""
        return self.__massFrequencyProperties

    @massFrequencyProperties.setter
    def massFrequencyProperties(self, value: List[MassFrequencyProperty]):
        """Set massFrequencyProperties"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__massFrequencyProperties = value
