# This an autogenerated file
# 
# Generated with MoonpoolColumnItem
from __future__ import annotations
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.moonpoolcolumnitem import MoonpoolColumnItemBlueprint
from typing import Dict
from sima.riflex.linereference import LineReference
from sima.sima.moao import MOAO
from sima.sima.scriptablevalue import ScriptableValue
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from sima.sima.body import Body

class MoonpoolColumnItem(MOAO):
    """
    Keyword arguments
    -----------------
    _id : str
         (default "")
    scriptableValues : List[ScriptableValue]
    body : Body
    lowerZ : float
         Lower Z limit (local vessel system)(default 0.0)
    upperZ : float
         Upper Z limit (local vessel system)(default 0.0)
    lineReferences : List[LineReference]
    """

    def __init__(self , _id="", lowerZ=0.0, upperZ=0.0, **kwargs):
        super().__init__(**kwargs)
        self._id = _id
        self.scriptableValues = list()
        self.body = None
        self.lowerZ = lowerZ
        self.upperZ = upperZ
        self.lineReferences = list()
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return MoonpoolColumnItemBlueprint()


    @property
    def _id(self) -> str:
        """"""
        return self.___id

    @_id.setter
    def _id(self, value: str):
        """Set _id"""
        self.___id = str(value)

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def body(self) -> Body:
        """"""
        return self.__body

    @body.setter
    def body(self, value: Body):
        """Set body"""
        self.__body = value

    @property
    def lowerZ(self) -> float:
        """Lower Z limit (local vessel system)"""
        return self.__lowerZ

    @lowerZ.setter
    def lowerZ(self, value: float):
        """Set lowerZ"""
        self.__lowerZ = float(value)

    @property
    def upperZ(self) -> float:
        """Upper Z limit (local vessel system)"""
        return self.__upperZ

    @upperZ.setter
    def upperZ(self, value: float):
        """Set upperZ"""
        self.__upperZ = float(value)

    @property
    def lineReferences(self) -> List[LineReference]:
        """"""
        return self.__lineReferences

    @lineReferences.setter
    def lineReferences(self, value: List[LineReference]):
        """Set lineReferences"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__lineReferences = value
