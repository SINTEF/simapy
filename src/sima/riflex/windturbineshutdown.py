# This an autogenerated file
# 
# Generated with WindTurbineShutdown
from typing import Dict,Sequence,List
from dmt.entity import Entity
from dmt.blueprint import Blueprint
from .blueprints.windturbineshutdown import WindTurbineShutdownBlueprint
from sima.riflex.bladepitchchangeitem import BladePitchChangeItem
from sima.riflex.generatortorquefault import GeneratorTorqueFault
from sima.riflex.mechanicalbrakeoption import MechanicalBrakeOption
from sima.sima.moao import MOAO
from sima.sima.scriptablevalue import ScriptableValue

class WindTurbineShutdown(MOAO):
    """
    Keyword arguments
    -----------------
    name : str
         (default "")
    description : str
         (default "")
    _id : str
         (default "")
    scriptableValues : List[ScriptableValue]
    startTime : float
         Start time for shutdown(default 0.0)
    bladePitchChangeItems : List[BladePitchChangeItem]
    faultOption : GeneratorTorqueFault
    scalingFactor : float
         Scaling factor for generator torque(default 0.0)
    brakeOption : MechanicalBrakeOption
    linearTorqueDampingCoefficient : float
         (default 0.0)
    timeToFullBrakeTorque : float
         (default 0.0)
    """

    def __init__(self , name:str="", description:str="", _id:str="", startTime:float=0.0, faultOption:GeneratorTorqueFault=GeneratorTorqueFault.NONE, scalingFactor:float=0.0, brakeOption:MechanicalBrakeOption=MechanicalBrakeOption.NONE, linearTorqueDampingCoefficient:float=0.0, timeToFullBrakeTorque:float=0.0, **kwargs):
        super().__init__(**kwargs)
        self.__name = name
        self.__description = description
        self.___id = _id
        self.__scriptableValues = list()
        self.__startTime = startTime
        self.__bladePitchChangeItems = list()
        self.__faultOption = faultOption
        self.__scalingFactor = scalingFactor
        self.__brakeOption = brakeOption
        self.__linearTorqueDampingCoefficient = linearTorqueDampingCoefficient
        self.__timeToFullBrakeTorque = timeToFullBrakeTorque
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return WindTurbineShutdownBlueprint()


    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = str(value)

    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = str(value)

    @property
    def _id(self) -> str:
        """"""
        return self.___id

    @_id.setter
    def _id(self, value: str):
        """Set _id"""
        self.___id = str(value)

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def startTime(self) -> float:
        """Start time for shutdown"""
        return self.__startTime

    @startTime.setter
    def startTime(self, value: float):
        """Set startTime"""
        self.__startTime = float(value)

    @property
    def bladePitchChangeItems(self) -> List[BladePitchChangeItem]:
        """"""
        return self.__bladePitchChangeItems

    @bladePitchChangeItems.setter
    def bladePitchChangeItems(self, value: List[BladePitchChangeItem]):
        """Set bladePitchChangeItems"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__bladePitchChangeItems = value

    @property
    def faultOption(self) -> GeneratorTorqueFault:
        """"""
        return self.__faultOption

    @faultOption.setter
    def faultOption(self, value: GeneratorTorqueFault):
        """Set faultOption"""
        self.__faultOption = value

    @property
    def scalingFactor(self) -> float:
        """Scaling factor for generator torque"""
        return self.__scalingFactor

    @scalingFactor.setter
    def scalingFactor(self, value: float):
        """Set scalingFactor"""
        self.__scalingFactor = float(value)

    @property
    def brakeOption(self) -> MechanicalBrakeOption:
        """"""
        return self.__brakeOption

    @brakeOption.setter
    def brakeOption(self, value: MechanicalBrakeOption):
        """Set brakeOption"""
        self.__brakeOption = value

    @property
    def linearTorqueDampingCoefficient(self) -> float:
        """"""
        return self.__linearTorqueDampingCoefficient

    @linearTorqueDampingCoefficient.setter
    def linearTorqueDampingCoefficient(self, value: float):
        """Set linearTorqueDampingCoefficient"""
        self.__linearTorqueDampingCoefficient = float(value)

    @property
    def timeToFullBrakeTorque(self) -> float:
        """"""
        return self.__timeToFullBrakeTorque

    @timeToFullBrakeTorque.setter
    def timeToFullBrakeTorque(self, value: float):
        """Set timeToFullBrakeTorque"""
        self.__timeToFullBrakeTorque = float(value)
