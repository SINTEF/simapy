# This an autogenerated file
# 
# Generated with Regular3DBottom
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.regular3dbottom import Regular3DBottomBlueprint
from typing import Dict
from sima.sima.moao import MOAO
from sima.sima.scriptablevalue import ScriptableValue

class Regular3DBottom(MOAO):
    """
    Keyword arguments
    -----------------
    description : str
         (default "")
    scriptableValues : List[ScriptableValue]
    fileName : str
         File with seabed geometry data(default None)
    x : float
         (default 0.0)
    y : float
         (default 0.0)
    zos : float
         Z-coordinate of the origin of the seabed file reference system, in the global reference system(default 0.0)
    angos : float
         Angle between the X-axis of the seabed file reference system and the X-axis of the global reference system(default 0.0)
    """

    def __init__(self , description="", x=0.0, y=0.0, zos=0.0, angos=0.0, **kwargs):
        super().__init__(**kwargs)
        self.description = description
        self.scriptableValues = list()
        self.fileName = None
        self.x = x
        self.y = y
        self.zos = zos
        self.angos = angos
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return Regular3DBottomBlueprint()


    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = value

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def fileName(self) -> str:
        """File with seabed geometry data"""
        return self.__fileName

    @fileName.setter
    def fileName(self, value: str):
        """Set fileName"""
        self.__fileName = value

    @property
    def x(self) -> float:
        """"""
        return self.__x

    @x.setter
    def x(self, value: float):
        """Set x"""
        self.__x = float(value)

    @property
    def y(self) -> float:
        """"""
        return self.__y

    @y.setter
    def y(self, value: float):
        """Set y"""
        self.__y = float(value)

    @property
    def zos(self) -> float:
        """Z-coordinate of the origin of the seabed file reference system, in the global reference system"""
        return self.__zos

    @zos.setter
    def zos(self, value: float):
        """Set zos"""
        self.__zos = float(value)

    @property
    def angos(self) -> float:
        """Angle between the X-axis of the seabed file reference system and the X-axis of the global reference system"""
        return self.__angos

    @angos.setter
    def angos(self, value: float):
        """Set angos"""
        self.__angos = float(value)
