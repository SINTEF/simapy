# This an autogenerated file
# 
# Generated with RunawayBladePitchFaultItem
from __future__ import annotations
from typing import Dict,Sequence,List
from dmt.entity import Entity
from dmt.blueprint import Blueprint
from .blueprints.runawaybladepitchfaultitem import RunawayBladePitchFaultItemBlueprint
from sima.sima.moao import MOAO
from sima.sima.scriptablevalue import ScriptableValue
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from sima.riflex.arline import ARLine

class RunawayBladePitchFaultItem(MOAO):
    """
    Keyword arguments
    -----------------
    name : str
         (default "")
    description : str
         (default "")
    _id : str
         (default "")
    scriptableValues : List[ScriptableValue]
    startTime : float
         Start time for blade pitch fault(default 0.0)
    line : ARLine
    bladePitchRangeRate : float
         (default 0.0)
    finalPitch : float
         (default 0.0)
    """

    def __init__(self , name:str="", description:str="", _id:str="", startTime:float=0.0, bladePitchRangeRate:float=0.0, finalPitch:float=0.0, **kwargs):
        super().__init__(**kwargs)
        self.__name = name
        self.__description = description
        self.___id = _id
        self.__scriptableValues = list()
        self.__startTime = startTime
        self.__line = None
        self.__bladePitchRangeRate = bladePitchRangeRate
        self.__finalPitch = finalPitch
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return RunawayBladePitchFaultItemBlueprint()


    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = str(value)

    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = str(value)

    @property
    def _id(self) -> str:
        """"""
        return self.___id

    @_id.setter
    def _id(self, value: str):
        """Set _id"""
        self.___id = str(value)

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def startTime(self) -> float:
        """Start time for blade pitch fault"""
        return self.__startTime

    @startTime.setter
    def startTime(self, value: float):
        """Set startTime"""
        self.__startTime = float(value)

    @property
    def line(self) -> ARLine:
        """"""
        return self.__line

    @line.setter
    def line(self, value: ARLine):
        """Set line"""
        self.__line = value

    @property
    def bladePitchRangeRate(self) -> float:
        """"""
        return self.__bladePitchRangeRate

    @bladePitchRangeRate.setter
    def bladePitchRangeRate(self, value: float):
        """Set bladePitchRangeRate"""
        self.__bladePitchRangeRate = float(value)

    @property
    def finalPitch(self) -> float:
        """"""
        return self.__finalPitch

    @finalPitch.setter
    def finalPitch(self, value: float):
        """Set finalPitch"""
        self.__finalPitch = float(value)
