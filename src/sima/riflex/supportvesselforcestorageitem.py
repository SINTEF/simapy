# This an autogenerated file
# 
# Generated with SupportVesselForceStorageItem
from __future__ import annotations
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.supportvesselforcestorageitem import SupportVesselForceStorageItemBlueprint
from typing import Dict
from sima.riflex.bodyforcereferencesystem import BodyForceReferenceSystem
from sima.sima.moao import MOAO
from sima.sima.scriptablevalue import ScriptableValue
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from sima.riflex.supportvessel import SupportVessel

class SupportVesselForceStorageItem(MOAO):
    """
    Keyword arguments
    -----------------
    _id : str
         (default "")
    scriptableValues : List[ScriptableValue]
    vessel : SupportVessel
    referenceSystem : BodyForceReferenceSystem
    """

    def __init__(self , _id="", referenceSystem=BodyForceReferenceSystem.BODY_LOCAL, **kwargs):
        super().__init__(**kwargs)
        self._id = _id
        self.scriptableValues = list()
        self.vessel = None
        self.referenceSystem = referenceSystem
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return SupportVesselForceStorageItemBlueprint()


    @property
    def _id(self) -> str:
        """"""
        return self.___id

    @_id.setter
    def _id(self, value: str):
        """Set _id"""
        self.___id = str(value)

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def vessel(self) -> SupportVessel:
        """"""
        return self.__vessel

    @vessel.setter
    def vessel(self, value: SupportVessel):
        """Set vessel"""
        self.__vessel = value

    @property
    def referenceSystem(self) -> BodyForceReferenceSystem:
        """"""
        return self.__referenceSystem

    @referenceSystem.setter
    def referenceSystem(self, value: BodyForceReferenceSystem):
        """Set referenceSystem"""
        self.__referenceSystem = value
