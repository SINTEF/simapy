# This an autogenerated file
# 
# Generated with InternalFluidType
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.internalfluidtype import InternalFluidTypeBlueprint
from typing import Dict
from sima.riflex.end import End
from sima.sima.namedobject import NamedObject
from sima.sima.scriptablevalue import ScriptableValue

class InternalFluidType(NamedObject):
    """
    Keyword arguments
    -----------------
    description : str
         (default "")
    scriptableValues : List[ScriptableValue]
    name : str
         (default None)
    density : float
         Density(default 0.0)
    volumeVelocity : float
         Volume velocity(default 0.0)
    inletPressure : float
         Pressure at fluid inlet end(default 0.0)
    pressureDrop : float
         Pressure drop(default 0.0)
    flowInlet : End
         Flow direction code.
    """

    def __init__(self , description="", density=0.0, volumeVelocity=0.0, inletPressure=0.0, pressureDrop=0.0, flowInlet=End.ONE, **kwargs):
        super().__init__(**kwargs)
        self.description = description
        self.scriptableValues = list()
        self.name = None
        self.density = density
        self.volumeVelocity = volumeVelocity
        self.inletPressure = inletPressure
        self.pressureDrop = pressureDrop
        self.flowInlet = flowInlet
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return InternalFluidTypeBlueprint()


    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = value

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = value

    @property
    def density(self) -> float:
        """Density"""
        return self.__density

    @density.setter
    def density(self, value: float):
        """Set density"""
        self.__density = float(value)

    @property
    def volumeVelocity(self) -> float:
        """Volume velocity"""
        return self.__volumeVelocity

    @volumeVelocity.setter
    def volumeVelocity(self, value: float):
        """Set volumeVelocity"""
        self.__volumeVelocity = float(value)

    @property
    def inletPressure(self) -> float:
        """Pressure at fluid inlet end"""
        return self.__inletPressure

    @inletPressure.setter
    def inletPressure(self, value: float):
        """Set inletPressure"""
        self.__inletPressure = float(value)

    @property
    def pressureDrop(self) -> float:
        """Pressure drop"""
        return self.__pressureDrop

    @pressureDrop.setter
    def pressureDrop(self, value: float):
        """Set pressureDrop"""
        self.__pressureDrop = float(value)

    @property
    def flowInlet(self) -> End:
        """Flow direction code."""
        return self.__flowInlet

    @flowInlet.setter
    def flowInlet(self, value: End):
        """Set flowInlet"""
        self.__flowInlet = value
