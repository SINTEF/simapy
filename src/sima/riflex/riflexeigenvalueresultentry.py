# This an autogenerated file
# 
# Generated with RIFLEXEigenvalueResultEntry
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.riflexeigenvalueresultentry import RIFLEXEigenvalueResultEntryBlueprint
from typing import Dict
from sima.riflex.matrixplotresult import MatrixPlotResult
from sima.riflex.resfile import ResFile
from sima.sima.property import Property
from sima.sima.result import Result
from sima.sima.resultentry import ResultEntry
from sima.sima.scriptablevalue import ScriptableValue

class RIFLEXEigenvalueResultEntry(ResultEntry):
    """
    Keyword arguments
    -----------------
    _id : str
         (default "")
    scriptableValues : List[ScriptableValue]
    name : str
         (default "")
    properties : List[Property]
    resource : str
         (default "")
    relative : bool
         (default False)
    changeNumber : int
         (default 0)
    results : List[Result]
    entries : List[ResultEntry]
    riflexLDAT : Result
    mpfResult : MatrixPlotResult
    resFile : ResFile
    """

    def __init__(self , _id="", name="", resource="", relative=False, changeNumber=0, **kwargs):
        super().__init__(**kwargs)
        self._id = _id
        self.scriptableValues = list()
        self.name = name
        self.properties = list()
        self.resource = resource
        self.relative = relative
        self.changeNumber = changeNumber
        self.results = list()
        self.entries = list()
        self.riflexLDAT = None
        self.mpfResult = None
        self.resFile = None
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return RIFLEXEigenvalueResultEntryBlueprint()


    @property
    def _id(self) -> str:
        """"""
        return self.___id

    @_id.setter
    def _id(self, value: str):
        """Set _id"""
        self.___id = str(value)

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = str(value)

    @property
    def properties(self) -> List[Property]:
        """"""
        return self.__properties

    @properties.setter
    def properties(self, value: List[Property]):
        """Set properties"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__properties = value

    @property
    def resource(self) -> str:
        """"""
        return self.__resource

    @resource.setter
    def resource(self, value: str):
        """Set resource"""
        self.__resource = str(value)

    @property
    def relative(self) -> bool:
        """"""
        return self.__relative

    @relative.setter
    def relative(self, value: bool):
        """Set relative"""
        self.__relative = bool(value)

    @property
    def changeNumber(self) -> int:
        """"""
        return self.__changeNumber

    @changeNumber.setter
    def changeNumber(self, value: int):
        """Set changeNumber"""
        self.__changeNumber = int(value)

    @property
    def results(self) -> List[Result]:
        """"""
        return self.__results

    @results.setter
    def results(self, value: List[Result]):
        """Set results"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__results = value

    @property
    def entries(self) -> List[ResultEntry]:
        """"""
        return self.__entries

    @entries.setter
    def entries(self, value: List[ResultEntry]):
        """Set entries"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__entries = value

    @property
    def riflexLDAT(self) -> Result:
        """"""
        return self.__riflexLDAT

    @riflexLDAT.setter
    def riflexLDAT(self, value: Result):
        """Set riflexLDAT"""
        self.__riflexLDAT = value

    @property
    def mpfResult(self) -> MatrixPlotResult:
        """"""
        return self.__mpfResult

    @mpfResult.setter
    def mpfResult(self, value: MatrixPlotResult):
        """Set mpfResult"""
        self.__mpfResult = value

    @property
    def resFile(self) -> ResFile:
        """"""
        return self.__resFile

    @resFile.setter
    def resFile(self, value: ResFile):
        """Set resFile"""
        self.__resFile = value
