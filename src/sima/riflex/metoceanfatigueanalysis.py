# This an autogenerated file
# 
# Generated with MetoceanFatigueAnalysis
from __future__ import annotations
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.metoceanfatigueanalysis import MetoceanFatigueAnalysisBlueprint
from typing import Dict
from sima.sima.condition import Condition
from sima.sima.named import Named
from sima.sima.resultcontainer import ResultContainer
from sima.sima.scriptablevalue import ScriptableValue
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from sima.sima.condition import Condition

class MetoceanFatigueAnalysis(Condition,Named):
    """
    Keyword arguments
    -----------------
    description : str
         (default "")
    scriptableValues : List[ScriptableValue]
    name : str
         (default None)
    changeNumber : int
         (default 0)
    resultContainer : ResultContainer
    metoceanCondition : Condition
    analysisCondition : Condition
    """

    def __init__(self , description="", changeNumber=0, **kwargs):
        super().__init__(**kwargs)
        self.description = description
        self.scriptableValues = list()
        self.name = None
        self.changeNumber = changeNumber
        self.resultContainer = None
        self.metoceanCondition = None
        self.analysisCondition = None
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return MetoceanFatigueAnalysisBlueprint()


    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = value

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = value

    @property
    def changeNumber(self) -> int:
        """"""
        return self.__changeNumber

    @changeNumber.setter
    def changeNumber(self, value: int):
        """Set changeNumber"""
        self.__changeNumber = int(value)

    @property
    def resultContainer(self) -> ResultContainer:
        """"""
        return self.__resultContainer

    @resultContainer.setter
    def resultContainer(self, value: ResultContainer):
        """Set resultContainer"""
        self.__resultContainer = value

    @property
    def metoceanCondition(self) -> Condition:
        """"""
        return self.__metoceanCondition

    @metoceanCondition.setter
    def metoceanCondition(self, value: Condition):
        """Set metoceanCondition"""
        self.__metoceanCondition = value

    @property
    def analysisCondition(self) -> Condition:
        """"""
        return self.__analysisCondition

    @analysisCondition.setter
    def analysisCondition(self, value: Condition):
        """Set analysisCondition"""
        self.__analysisCondition = value
