# This an autogenerated file
# 
# Generated with FlexJointConnectorType
from typing import Dict,Sequence,List
from dmt.entity import Entity
from dmt.blueprint import Blueprint
from .blueprints.flexjointconnectortype import FlexJointConnectorTypeBlueprint
from sima.riflex.nodalcomponenttype import NodalComponentType
from sima.riflex.rotationalstiffnessitem import RotationalStiffnessItem
from sima.riflex.rotationalstiffnesstype import RotationalStiffnessType
from sima.sima.scriptablevalue import ScriptableValue

class FlexJointConnectorType(NodalComponentType):
    """
    Keyword arguments
    -----------------
    name : str
         (default "")
    description : str
         (default "")
    _id : str
         (default "")
    scriptableValues : List[ScriptableValue]
    mass : float
         Mass(default 0.0)
    volume : float
         Displacement volume(default 0.0)
    gyrationRadiusX : float
         Radius of gyration around local x-axis(default 0.0)
    gyrationRadiusY : float
         Radius of gyration around local y-axis(default 0.0)
    gyrationRadiusZ : float
         Radius of gyration around local z-axis(default 0.0)
    dampingRotX : float
         Damping coeff. Rotational velocity around local x-axis(default 0.0)
    dampingRotY : float
         Damping coeff. Rotational velocity around local y-axis(default 0.0)
    dampingRotZ : float
         Damping coeff. Rotational velocity around local z-axis(default 0.0)
    dragX : float
         Drag force coefficient in X-direction(default 0.0)
    dragY : float
         Drag force coefficient in Y-direction(default 0.0)
    dragZ : float
         Drag force coefficient in Z-direction(default 0.0)
    addedMassX : float
         Added mass in X-direction(default 0.0)
    addedMassY : float
         Added mass in Y-direction(default 0.0)
    addedMassZ : float
         Added mass in Z-direction(default 0.0)
    addedMassRotX : float
         Added mass rotation around local x-axis(default 0.0)
    addedMassRotY : float
         Added mass rotation around local y-axis(default 0.0)
    addedMassRotZ : float
         Added mass rotation around local z-axis(default 0.0)
    stiffnessTypeRotX : RotationalStiffnessType
         Rotational stiffnes type - local x-axis.
    stiffnessTypeRotY : RotationalStiffnessType
         Rotational stiffnes type - local z-axis.
    stiffnessTypeRotZ : RotationalStiffnessType
         Rotational stiffnes type - local z-axis.
    stiffnessDampingCoeffX : float
         Stiffness proportional damping coefficient.(default 0.0)
    stiffnessDampingCoeffY : float
         Stiffness proportional damping coefficient.(default 0.0)
    stiffnessDampingCoeffZ : float
         Stiffness proportional damping coefficient.(default 0.0)
    linearStiffnessRotX : float
         Stiffness with respect to x-axis rotation(default 0.0)
    linearStiffnessRotY : float
         Stiffness with respect to y-axis rotation(default 0.0)
    linearStiffnessRotZ : float
         Stiffness with respect to z-axis rotation(default 0.0)
    yzStiffnessSymmetry : bool
         Same stiffnes for y and z axis?(default False)
    stiffnessCharacteristicsRotX : List[RotationalStiffnessItem]
    stiffnessCharacteristicsRotY : List[RotationalStiffnessItem]
    stiffnessCharacteristicsRotZ : List[RotationalStiffnessItem]
    """

    def __init__(self , name:str="", description:str="", _id:str="", mass:float=0.0, volume:float=0.0, gyrationRadiusX:float=0.0, gyrationRadiusY:float=0.0, gyrationRadiusZ:float=0.0, dampingRotX:float=0.0, dampingRotY:float=0.0, dampingRotZ:float=0.0, dragX:float=0.0, dragY:float=0.0, dragZ:float=0.0, addedMassX:float=0.0, addedMassY:float=0.0, addedMassZ:float=0.0, addedMassRotX:float=0.0, addedMassRotY:float=0.0, addedMassRotZ:float=0.0, stiffnessTypeRotX:RotationalStiffnessType=RotationalStiffnessType.FIXED, stiffnessTypeRotY:RotationalStiffnessType=RotationalStiffnessType.FIXED, stiffnessTypeRotZ:RotationalStiffnessType=RotationalStiffnessType.FIXED, stiffnessDampingCoeffX:float=0.0, stiffnessDampingCoeffY:float=0.0, stiffnessDampingCoeffZ:float=0.0, linearStiffnessRotX:float=0.0, linearStiffnessRotY:float=0.0, linearStiffnessRotZ:float=0.0, yzStiffnessSymmetry:bool=False, **kwargs):
        super().__init__(**kwargs)
        self.__name = name
        self.__description = description
        self.___id = _id
        self.__scriptableValues = list()
        self.__mass = mass
        self.__volume = volume
        self.__gyrationRadiusX = gyrationRadiusX
        self.__gyrationRadiusY = gyrationRadiusY
        self.__gyrationRadiusZ = gyrationRadiusZ
        self.__dampingRotX = dampingRotX
        self.__dampingRotY = dampingRotY
        self.__dampingRotZ = dampingRotZ
        self.__dragX = dragX
        self.__dragY = dragY
        self.__dragZ = dragZ
        self.__addedMassX = addedMassX
        self.__addedMassY = addedMassY
        self.__addedMassZ = addedMassZ
        self.__addedMassRotX = addedMassRotX
        self.__addedMassRotY = addedMassRotY
        self.__addedMassRotZ = addedMassRotZ
        self.__stiffnessTypeRotX = stiffnessTypeRotX
        self.__stiffnessTypeRotY = stiffnessTypeRotY
        self.__stiffnessTypeRotZ = stiffnessTypeRotZ
        self.__stiffnessDampingCoeffX = stiffnessDampingCoeffX
        self.__stiffnessDampingCoeffY = stiffnessDampingCoeffY
        self.__stiffnessDampingCoeffZ = stiffnessDampingCoeffZ
        self.__linearStiffnessRotX = linearStiffnessRotX
        self.__linearStiffnessRotY = linearStiffnessRotY
        self.__linearStiffnessRotZ = linearStiffnessRotZ
        self.__yzStiffnessSymmetry = yzStiffnessSymmetry
        self.__stiffnessCharacteristicsRotX = list()
        self.__stiffnessCharacteristicsRotY = list()
        self.__stiffnessCharacteristicsRotZ = list()
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return FlexJointConnectorTypeBlueprint()


    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = str(value)

    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = str(value)

    @property
    def _id(self) -> str:
        """"""
        return self.___id

    @_id.setter
    def _id(self, value: str):
        """Set _id"""
        self.___id = str(value)

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def mass(self) -> float:
        """Mass"""
        return self.__mass

    @mass.setter
    def mass(self, value: float):
        """Set mass"""
        self.__mass = float(value)

    @property
    def volume(self) -> float:
        """Displacement volume"""
        return self.__volume

    @volume.setter
    def volume(self, value: float):
        """Set volume"""
        self.__volume = float(value)

    @property
    def gyrationRadiusX(self) -> float:
        """Radius of gyration around local x-axis"""
        return self.__gyrationRadiusX

    @gyrationRadiusX.setter
    def gyrationRadiusX(self, value: float):
        """Set gyrationRadiusX"""
        self.__gyrationRadiusX = float(value)

    @property
    def gyrationRadiusY(self) -> float:
        """Radius of gyration around local y-axis"""
        return self.__gyrationRadiusY

    @gyrationRadiusY.setter
    def gyrationRadiusY(self, value: float):
        """Set gyrationRadiusY"""
        self.__gyrationRadiusY = float(value)

    @property
    def gyrationRadiusZ(self) -> float:
        """Radius of gyration around local z-axis"""
        return self.__gyrationRadiusZ

    @gyrationRadiusZ.setter
    def gyrationRadiusZ(self, value: float):
        """Set gyrationRadiusZ"""
        self.__gyrationRadiusZ = float(value)

    @property
    def dampingRotX(self) -> float:
        """Damping coeff. Rotational velocity around local x-axis"""
        return self.__dampingRotX

    @dampingRotX.setter
    def dampingRotX(self, value: float):
        """Set dampingRotX"""
        self.__dampingRotX = float(value)

    @property
    def dampingRotY(self) -> float:
        """Damping coeff. Rotational velocity around local y-axis"""
        return self.__dampingRotY

    @dampingRotY.setter
    def dampingRotY(self, value: float):
        """Set dampingRotY"""
        self.__dampingRotY = float(value)

    @property
    def dampingRotZ(self) -> float:
        """Damping coeff. Rotational velocity around local z-axis"""
        return self.__dampingRotZ

    @dampingRotZ.setter
    def dampingRotZ(self, value: float):
        """Set dampingRotZ"""
        self.__dampingRotZ = float(value)

    @property
    def dragX(self) -> float:
        """Drag force coefficient in X-direction"""
        return self.__dragX

    @dragX.setter
    def dragX(self, value: float):
        """Set dragX"""
        self.__dragX = float(value)

    @property
    def dragY(self) -> float:
        """Drag force coefficient in Y-direction"""
        return self.__dragY

    @dragY.setter
    def dragY(self, value: float):
        """Set dragY"""
        self.__dragY = float(value)

    @property
    def dragZ(self) -> float:
        """Drag force coefficient in Z-direction"""
        return self.__dragZ

    @dragZ.setter
    def dragZ(self, value: float):
        """Set dragZ"""
        self.__dragZ = float(value)

    @property
    def addedMassX(self) -> float:
        """Added mass in X-direction"""
        return self.__addedMassX

    @addedMassX.setter
    def addedMassX(self, value: float):
        """Set addedMassX"""
        self.__addedMassX = float(value)

    @property
    def addedMassY(self) -> float:
        """Added mass in Y-direction"""
        return self.__addedMassY

    @addedMassY.setter
    def addedMassY(self, value: float):
        """Set addedMassY"""
        self.__addedMassY = float(value)

    @property
    def addedMassZ(self) -> float:
        """Added mass in Z-direction"""
        return self.__addedMassZ

    @addedMassZ.setter
    def addedMassZ(self, value: float):
        """Set addedMassZ"""
        self.__addedMassZ = float(value)

    @property
    def addedMassRotX(self) -> float:
        """Added mass rotation around local x-axis"""
        return self.__addedMassRotX

    @addedMassRotX.setter
    def addedMassRotX(self, value: float):
        """Set addedMassRotX"""
        self.__addedMassRotX = float(value)

    @property
    def addedMassRotY(self) -> float:
        """Added mass rotation around local y-axis"""
        return self.__addedMassRotY

    @addedMassRotY.setter
    def addedMassRotY(self, value: float):
        """Set addedMassRotY"""
        self.__addedMassRotY = float(value)

    @property
    def addedMassRotZ(self) -> float:
        """Added mass rotation around local z-axis"""
        return self.__addedMassRotZ

    @addedMassRotZ.setter
    def addedMassRotZ(self, value: float):
        """Set addedMassRotZ"""
        self.__addedMassRotZ = float(value)

    @property
    def stiffnessTypeRotX(self) -> RotationalStiffnessType:
        """Rotational stiffnes type - local x-axis."""
        return self.__stiffnessTypeRotX

    @stiffnessTypeRotX.setter
    def stiffnessTypeRotX(self, value: RotationalStiffnessType):
        """Set stiffnessTypeRotX"""
        self.__stiffnessTypeRotX = value

    @property
    def stiffnessTypeRotY(self) -> RotationalStiffnessType:
        """Rotational stiffnes type - local z-axis."""
        return self.__stiffnessTypeRotY

    @stiffnessTypeRotY.setter
    def stiffnessTypeRotY(self, value: RotationalStiffnessType):
        """Set stiffnessTypeRotY"""
        self.__stiffnessTypeRotY = value

    @property
    def stiffnessTypeRotZ(self) -> RotationalStiffnessType:
        """Rotational stiffnes type - local z-axis."""
        return self.__stiffnessTypeRotZ

    @stiffnessTypeRotZ.setter
    def stiffnessTypeRotZ(self, value: RotationalStiffnessType):
        """Set stiffnessTypeRotZ"""
        self.__stiffnessTypeRotZ = value

    @property
    def stiffnessDampingCoeffX(self) -> float:
        """Stiffness proportional damping coefficient."""
        return self.__stiffnessDampingCoeffX

    @stiffnessDampingCoeffX.setter
    def stiffnessDampingCoeffX(self, value: float):
        """Set stiffnessDampingCoeffX"""
        self.__stiffnessDampingCoeffX = float(value)

    @property
    def stiffnessDampingCoeffY(self) -> float:
        """Stiffness proportional damping coefficient."""
        return self.__stiffnessDampingCoeffY

    @stiffnessDampingCoeffY.setter
    def stiffnessDampingCoeffY(self, value: float):
        """Set stiffnessDampingCoeffY"""
        self.__stiffnessDampingCoeffY = float(value)

    @property
    def stiffnessDampingCoeffZ(self) -> float:
        """Stiffness proportional damping coefficient."""
        return self.__stiffnessDampingCoeffZ

    @stiffnessDampingCoeffZ.setter
    def stiffnessDampingCoeffZ(self, value: float):
        """Set stiffnessDampingCoeffZ"""
        self.__stiffnessDampingCoeffZ = float(value)

    @property
    def linearStiffnessRotX(self) -> float:
        """Stiffness with respect to x-axis rotation"""
        return self.__linearStiffnessRotX

    @linearStiffnessRotX.setter
    def linearStiffnessRotX(self, value: float):
        """Set linearStiffnessRotX"""
        self.__linearStiffnessRotX = float(value)

    @property
    def linearStiffnessRotY(self) -> float:
        """Stiffness with respect to y-axis rotation"""
        return self.__linearStiffnessRotY

    @linearStiffnessRotY.setter
    def linearStiffnessRotY(self, value: float):
        """Set linearStiffnessRotY"""
        self.__linearStiffnessRotY = float(value)

    @property
    def linearStiffnessRotZ(self) -> float:
        """Stiffness with respect to z-axis rotation"""
        return self.__linearStiffnessRotZ

    @linearStiffnessRotZ.setter
    def linearStiffnessRotZ(self, value: float):
        """Set linearStiffnessRotZ"""
        self.__linearStiffnessRotZ = float(value)

    @property
    def yzStiffnessSymmetry(self) -> bool:
        """Same stiffnes for y and z axis?"""
        return self.__yzStiffnessSymmetry

    @yzStiffnessSymmetry.setter
    def yzStiffnessSymmetry(self, value: bool):
        """Set yzStiffnessSymmetry"""
        self.__yzStiffnessSymmetry = bool(value)

    @property
    def stiffnessCharacteristicsRotX(self) -> List[RotationalStiffnessItem]:
        """"""
        return self.__stiffnessCharacteristicsRotX

    @stiffnessCharacteristicsRotX.setter
    def stiffnessCharacteristicsRotX(self, value: List[RotationalStiffnessItem]):
        """Set stiffnessCharacteristicsRotX"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__stiffnessCharacteristicsRotX = value

    @property
    def stiffnessCharacteristicsRotY(self) -> List[RotationalStiffnessItem]:
        """"""
        return self.__stiffnessCharacteristicsRotY

    @stiffnessCharacteristicsRotY.setter
    def stiffnessCharacteristicsRotY(self, value: List[RotationalStiffnessItem]):
        """Set stiffnessCharacteristicsRotY"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__stiffnessCharacteristicsRotY = value

    @property
    def stiffnessCharacteristicsRotZ(self) -> List[RotationalStiffnessItem]:
        """"""
        return self.__stiffnessCharacteristicsRotZ

    @stiffnessCharacteristicsRotZ.setter
    def stiffnessCharacteristicsRotZ(self, value: List[RotationalStiffnessItem]):
        """Set stiffnessCharacteristicsRotZ"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__stiffnessCharacteristicsRotZ = value
