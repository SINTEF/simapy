# This an autogenerated file
# 
# Generated with ElasticContactSurface
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.elasticcontactsurface import ElasticContactSurfaceBlueprint
from typing import Dict
from sima.riflex.contactsurfaceline import ContactSurfaceLine
from sima.riflex.contactsurfacepoint import ContactSurfacePoint
from sima.sima.namedobject import NamedObject
from sima.sima.scriptablevalue import ScriptableValue

class ElasticContactSurface(NamedObject):
    """
    Keyword arguments
    -----------------
    _id : str
         (default "")
    scriptableValues : List[ScriptableValue]
    name : str
         (default "")
    points : List[ContactSurfacePoint]
    lines : List[ContactSurfaceLine]
    """

    def __init__(self , _id="", name="", **kwargs):
        super().__init__(**kwargs)
        self._id = _id
        self.scriptableValues = list()
        self.name = name
        self.points = list()
        self.lines = list()
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return ElasticContactSurfaceBlueprint()


    @property
    def _id(self) -> str:
        """"""
        return self.___id

    @_id.setter
    def _id(self, value: str):
        """Set _id"""
        self.___id = str(value)

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = str(value)

    @property
    def points(self) -> List[ContactSurfacePoint]:
        """"""
        return self.__points

    @points.setter
    def points(self, value: List[ContactSurfacePoint]):
        """Set points"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__points = value

    @property
    def lines(self) -> List[ContactSurfaceLine]:
        """"""
        return self.__lines

    @lines.setter
    def lines(self, value: List[ContactSurfaceLine]):
        """Set lines"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__lines = value
