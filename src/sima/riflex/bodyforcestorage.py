# This an autogenerated file
# 
# Generated with BodyForceStorage
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.bodyforcestorage import BodyForceStorageBlueprint
from typing import Dict
from sima.riflex.bodyforcestorageitem import BodyForceStorageItem
from sima.sima.moao import MOAO
from sima.sima.scriptablevalue import ScriptableValue

class BodyForceStorage(MOAO):
    """
    Keyword arguments
    -----------------
    _id : str
         (default "")
    scriptableValues : List[ScriptableValue]
    items : List[BodyForceStorageItem]
    timeInterval : float
         (default 0.0)
    """

    def __init__(self , _id="", timeInterval=0.0, **kwargs):
        super().__init__(**kwargs)
        self._id = _id
        self.scriptableValues = list()
        self.items = list()
        self.timeInterval = timeInterval
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return BodyForceStorageBlueprint()


    @property
    def _id(self) -> str:
        """"""
        return self.___id

    @_id.setter
    def _id(self, value: str):
        """Set _id"""
        self.___id = str(value)

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def items(self) -> List[BodyForceStorageItem]:
        """"""
        return self.__items

    @items.setter
    def items(self, value: List[BodyForceStorageItem]):
        """Set items"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__items = value

    @property
    def timeInterval(self) -> float:
        """"""
        return self.__timeInterval

    @timeInterval.setter
    def timeInterval(self, value: float):
        """Set timeInterval"""
        self.__timeInterval = float(value)
