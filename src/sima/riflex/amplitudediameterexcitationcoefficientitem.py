# This an autogenerated file
# 
# Generated with AmplitudeDiameterExcitationCoefficientItem
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.amplitudediameterexcitationcoefficientitem import AmplitudeDiameterExcitationCoefficientItemBlueprint
from typing import Dict
from sima.sima.moao import MOAO
from sima.sima.scriptablevalue import ScriptableValue

class AmplitudeDiameterExcitationCoefficientItem(MOAO):
    """
    Keyword arguments
    -----------------
    description : str
         (default "")
    scriptableValues : List[ScriptableValue]
    amplitudeDiameterRatio : float
         Amplitude to diameter ratio(default 0.0)
    excitationCoefficient : float
         Excitation coefficient(default 0.0)
    """

    def __init__(self , description="", amplitudeDiameterRatio=0.0, excitationCoefficient=0.0, **kwargs):
        super().__init__(**kwargs)
        self.description = description
        self.scriptableValues = list()
        self.amplitudeDiameterRatio = amplitudeDiameterRatio
        self.excitationCoefficient = excitationCoefficient
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return AmplitudeDiameterExcitationCoefficientItemBlueprint()


    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = value

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def amplitudeDiameterRatio(self) -> float:
        """Amplitude to diameter ratio"""
        return self.__amplitudeDiameterRatio

    @amplitudeDiameterRatio.setter
    def amplitudeDiameterRatio(self, value: float):
        """Set amplitudeDiameterRatio"""
        self.__amplitudeDiameterRatio = float(value)

    @property
    def excitationCoefficient(self) -> float:
        """Excitation coefficient"""
        return self.__excitationCoefficient

    @excitationCoefficient.setter
    def excitationCoefficient(self, value: float):
        """Set excitationCoefficient"""
        self.__excitationCoefficient = float(value)
