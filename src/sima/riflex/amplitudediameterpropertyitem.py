# This an autogenerated file
# 
# Generated with AmplitudeDiameterPropertyItem
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.amplitudediameterpropertyitem import AmplitudeDiameterPropertyItemBlueprint
from typing import Dict
from sima.sima.moao import MOAO
from sima.sima.scriptablevalue import ScriptableValue

class AmplitudeDiameterPropertyItem(MOAO):
    """
    Keyword arguments
    -----------------
    description : str
         (default "")
    scriptableValues : List[ScriptableValue]
    nonDimensionalFrequency : float
         Non-dimensional frequency(default 0.0)
    adRatioCl0 : float
         A/D ratio when CL = 0(default 0.0)
    adRatioClMax : float
         A/D ratio when CL = CLMax(default 0.0)
    maxExcitationCoefficient : float
         Maximum excitation coefficient(default 0.0)
    excitCoeffAd0 : float
         Excitation coefficient for A/D=0(default 0.0)
    """

    def __init__(self , description="", nonDimensionalFrequency=0.0, adRatioCl0=0.0, adRatioClMax=0.0, maxExcitationCoefficient=0.0, excitCoeffAd0=0.0, **kwargs):
        super().__init__(**kwargs)
        self.description = description
        self.scriptableValues = list()
        self.nonDimensionalFrequency = nonDimensionalFrequency
        self.adRatioCl0 = adRatioCl0
        self.adRatioClMax = adRatioClMax
        self.maxExcitationCoefficient = maxExcitationCoefficient
        self.excitCoeffAd0 = excitCoeffAd0
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return AmplitudeDiameterPropertyItemBlueprint()


    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = value

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def nonDimensionalFrequency(self) -> float:
        """Non-dimensional frequency"""
        return self.__nonDimensionalFrequency

    @nonDimensionalFrequency.setter
    def nonDimensionalFrequency(self, value: float):
        """Set nonDimensionalFrequency"""
        self.__nonDimensionalFrequency = float(value)

    @property
    def adRatioCl0(self) -> float:
        """A/D ratio when CL = 0"""
        return self.__adRatioCl0

    @adRatioCl0.setter
    def adRatioCl0(self, value: float):
        """Set adRatioCl0"""
        self.__adRatioCl0 = float(value)

    @property
    def adRatioClMax(self) -> float:
        """A/D ratio when CL = CLMax"""
        return self.__adRatioClMax

    @adRatioClMax.setter
    def adRatioClMax(self, value: float):
        """Set adRatioClMax"""
        self.__adRatioClMax = float(value)

    @property
    def maxExcitationCoefficient(self) -> float:
        """Maximum excitation coefficient"""
        return self.__maxExcitationCoefficient

    @maxExcitationCoefficient.setter
    def maxExcitationCoefficient(self, value: float):
        """Set maxExcitationCoefficient"""
        self.__maxExcitationCoefficient = float(value)

    @property
    def excitCoeffAd0(self) -> float:
        """Excitation coefficient for A/D=0"""
        return self.__excitCoeffAd0

    @excitCoeffAd0.setter
    def excitCoeffAd0(self, value: float):
        """Set excitCoeffAd0"""
        self.__excitCoeffAd0 = float(value)
