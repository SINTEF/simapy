# This an autogenerated file
# 
# Generated with RelativeElementAngle
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.relativeelementangle import RelativeElementAngleBlueprint
from typing import Dict
from sima.riflex.elementreference import ElementReference
from sima.sima.moao import MOAO
from sima.sima.scriptablevalue import ScriptableValue

class RelativeElementAngle(MOAO):
    """
    Keyword arguments
    -----------------
    _id : str
         (default "")
    scriptableValues : List[ScriptableValue]
    firstElement : ElementReference
    secondElement : ElementReference
    """

    def __init__(self , _id="", **kwargs):
        super().__init__(**kwargs)
        self._id = _id
        self.scriptableValues = list()
        self.firstElement = None
        self.secondElement = None
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return RelativeElementAngleBlueprint()


    @property
    def _id(self) -> str:
        """"""
        return self.___id

    @_id.setter
    def _id(self, value: str):
        """Set _id"""
        self.___id = str(value)

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def firstElement(self) -> ElementReference:
        """"""
        return self.__firstElement

    @firstElement.setter
    def firstElement(self, value: ElementReference):
        """Set firstElement"""
        self.__firstElement = value

    @property
    def secondElement(self) -> ElementReference:
        """"""
        return self.__secondElement

    @secondElement.setter
    def secondElement(self, value: ElementReference):
        """Set secondElement"""
        self.__secondElement = value
