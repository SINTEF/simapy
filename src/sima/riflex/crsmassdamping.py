# This an autogenerated file
# 
# Generated with CRSMassDamping
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.crsmassdamping import CRSMassDampingBlueprint
from typing import Dict
from sima.sima.moao import MOAO
from sima.sima.scriptablevalue import ScriptableValue

class CRSMassDamping(MOAO):
    """
    Keyword arguments
    -----------------
    _id : str
         (default "")
    scriptableValues : List[ScriptableValue]
    axialFactor : float
         Factor for mass proportional damping in axial dof(default 0.0)
    torsionalFactor : float
         Factor for mass proportional damping in torsional dof(default 0.0)
    bendingFactor : float
         Factor for mass proportional damping in bending dof(default 0.0)
    """

    def __init__(self , _id="", axialFactor=0.0, torsionalFactor=0.0, bendingFactor=0.0, **kwargs):
        super().__init__(**kwargs)
        self._id = _id
        self.scriptableValues = list()
        self.axialFactor = axialFactor
        self.torsionalFactor = torsionalFactor
        self.bendingFactor = bendingFactor
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return CRSMassDampingBlueprint()


    @property
    def _id(self) -> str:
        """"""
        return self.___id

    @_id.setter
    def _id(self, value: str):
        """Set _id"""
        self.___id = str(value)

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def axialFactor(self) -> float:
        """Factor for mass proportional damping in axial dof"""
        return self.__axialFactor

    @axialFactor.setter
    def axialFactor(self, value: float):
        """Set axialFactor"""
        self.__axialFactor = float(value)

    @property
    def torsionalFactor(self) -> float:
        """Factor for mass proportional damping in torsional dof"""
        return self.__torsionalFactor

    @torsionalFactor.setter
    def torsionalFactor(self, value: float):
        """Set torsionalFactor"""
        self.__torsionalFactor = float(value)

    @property
    def bendingFactor(self) -> float:
        """Factor for mass proportional damping in bending dof"""
        return self.__bendingFactor

    @bendingFactor.setter
    def bendingFactor(self, value: float):
        """Set bendingFactor"""
        self.__bendingFactor = float(value)
