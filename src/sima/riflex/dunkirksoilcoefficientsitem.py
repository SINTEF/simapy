# This an autogenerated file
# 
# Generated with DunkirkSoilCoefficientsItem
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.dunkirksoilcoefficientsitem import DunkirkSoilCoefficientsItemBlueprint
from typing import Dict
from sima.riflex.commonsoilcoefficientsitem import CommonSoilCoefficientsItem
from sima.sima.scriptablevalue import ScriptableValue

class DunkirkSoilCoefficientsItem(CommonSoilCoefficientsItem):
    """
    Keyword arguments
    -----------------
    _id : str
         (default "")
    scriptableValues : List[ScriptableValue]
    c1 : float
         (default 0.0)
    c2 : float
         (default 0.0)
    c3 : float
         (default 0.0)
    c4 : float
         (default 0.0)
    """

    def __init__(self , _id="", c1=0.0, c2=0.0, c3=0.0, c4=0.0, **kwargs):
        super().__init__(**kwargs)
        self._id = _id
        self.scriptableValues = list()
        self.c1 = c1
        self.c2 = c2
        self.c3 = c3
        self.c4 = c4
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return DunkirkSoilCoefficientsItemBlueprint()


    @property
    def _id(self) -> str:
        """"""
        return self.___id

    @_id.setter
    def _id(self, value: str):
        """Set _id"""
        self.___id = str(value)

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def c1(self) -> float:
        """"""
        return self.__c1

    @c1.setter
    def c1(self, value: float):
        """Set c1"""
        self.__c1 = float(value)

    @property
    def c2(self) -> float:
        """"""
        return self.__c2

    @c2.setter
    def c2(self, value: float):
        """Set c2"""
        self.__c2 = float(value)

    @property
    def c3(self) -> float:
        """"""
        return self.__c3

    @c3.setter
    def c3(self, value: float):
        """Set c3"""
        self.__c3 = float(value)

    @property
    def c4(self) -> float:
        """"""
        return self.__c4

    @c4.setter
    def c4(self, value: float):
        """Set c4"""
        self.__c4 = float(value)
