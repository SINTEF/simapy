# This an autogenerated file
# 
# Generated with RIFLEXResultContainer
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.riflexresultcontainer import RIFLEXResultContainerBlueprint
from typing import Dict
from sima.riflex.riflexdynamicresultentry import RIFLEXDynamicResultEntry
from sima.riflex.riflexeigenvalueresultentry import RIFLEXEigenvalueResultEntry
from sima.riflex.riflexstaticresultentry import RIFLEXStaticResultEntry
from sima.riflex.riflexvivanaresultentry import RIFLEXVivanaResultEntry
from sima.sima.conditionresultcontainer import ConditionResultContainer
from sima.sima.property import Property
from sima.sima.scriptablevalue import ScriptableValue

class RIFLEXResultContainer(ConditionResultContainer):
    """
    Keyword arguments
    -----------------
    _id : str
         (default "")
    scriptableValues : List[ScriptableValue]
    name : str
         (default "")
    properties : List[Property]
    modelOutputFile : str
         (default "")
    probability : float
         (default 0.0)
    static : RIFLEXStaticResultEntry
    dynamic : RIFLEXDynamicResultEntry
    eigenvalue : RIFLEXEigenvalueResultEntry
    vivana : RIFLEXVivanaResultEntry
    """

    def __init__(self , _id="", name="", modelOutputFile="", probability=0.0, **kwargs):
        super().__init__(**kwargs)
        self._id = _id
        self.scriptableValues = list()
        self.name = name
        self.properties = list()
        self.modelOutputFile = modelOutputFile
        self.probability = probability
        self.static = None
        self.dynamic = None
        self.eigenvalue = None
        self.vivana = None
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return RIFLEXResultContainerBlueprint()


    @property
    def _id(self) -> str:
        """"""
        return self.___id

    @_id.setter
    def _id(self, value: str):
        """Set _id"""
        self.___id = str(value)

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = str(value)

    @property
    def properties(self) -> List[Property]:
        """"""
        return self.__properties

    @properties.setter
    def properties(self, value: List[Property]):
        """Set properties"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__properties = value

    @property
    def modelOutputFile(self) -> str:
        """"""
        return self.__modelOutputFile

    @modelOutputFile.setter
    def modelOutputFile(self, value: str):
        """Set modelOutputFile"""
        self.__modelOutputFile = str(value)

    @property
    def probability(self) -> float:
        """"""
        return self.__probability

    @probability.setter
    def probability(self, value: float):
        """Set probability"""
        self.__probability = float(value)

    @property
    def static(self) -> RIFLEXStaticResultEntry:
        """"""
        return self.__static

    @static.setter
    def static(self, value: RIFLEXStaticResultEntry):
        """Set static"""
        self.__static = value

    @property
    def dynamic(self) -> RIFLEXDynamicResultEntry:
        """"""
        return self.__dynamic

    @dynamic.setter
    def dynamic(self, value: RIFLEXDynamicResultEntry):
        """Set dynamic"""
        self.__dynamic = value

    @property
    def eigenvalue(self) -> RIFLEXEigenvalueResultEntry:
        """"""
        return self.__eigenvalue

    @eigenvalue.setter
    def eigenvalue(self, value: RIFLEXEigenvalueResultEntry):
        """Set eigenvalue"""
        self.__eigenvalue = value

    @property
    def vivana(self) -> RIFLEXVivanaResultEntry:
        """"""
        return self.__vivana

    @vivana.setter
    def vivana(self, value: RIFLEXVivanaResultEntry):
        """Set vivana"""
        self.__vivana = value
