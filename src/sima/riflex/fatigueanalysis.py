# This an autogenerated file
# 
# Generated with FatigueAnalysis
from typing import Dict,Sequence,List
from dmt.entity import Entity
from dmt.blueprint import Blueprint
from .blueprints.fatigueanalysis import FatigueAnalysisBlueprint
from sima.riflex.fatigueanalysisitem import FatigueAnalysisItem
from sima.sima.moao import MOAO
from sima.sima.scriptablevalue import ScriptableValue

class FatigueAnalysis(MOAO):
    """
    Keyword arguments
    -----------------
    name : str
         (default "")
    description : str
         (default "")
    _id : str
         (default "")
    scriptableValues : List[ScriptableValue]
    numberOfPoints : int
         (default 8)
    includeAllPoints : bool
         Include the results from all points in output(default False)
    items : List[FatigueAnalysisItem]
         Specification of nodes for displacement storage
    specifyTimeWindow : bool
         (default False)
    startTime : float
         (default 0.0)
    endTime : float
         (default 0.0)
    """

    def __init__(self , name:str="", description:str="", _id:str="", numberOfPoints:int=8, includeAllPoints:bool=False, specifyTimeWindow:bool=False, startTime:float=0.0, endTime:float=0.0, **kwargs):
        super().__init__(**kwargs)
        self.__name = name
        self.__description = description
        self.___id = _id
        self.__scriptableValues = list()
        self.__numberOfPoints = numberOfPoints
        self.__includeAllPoints = includeAllPoints
        self.__items = list()
        self.__specifyTimeWindow = specifyTimeWindow
        self.__startTime = startTime
        self.__endTime = endTime
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return FatigueAnalysisBlueprint()


    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = str(value)

    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = str(value)

    @property
    def _id(self) -> str:
        """"""
        return self.___id

    @_id.setter
    def _id(self, value: str):
        """Set _id"""
        self.___id = str(value)

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def numberOfPoints(self) -> int:
        """"""
        return self.__numberOfPoints

    @numberOfPoints.setter
    def numberOfPoints(self, value: int):
        """Set numberOfPoints"""
        self.__numberOfPoints = int(value)

    @property
    def includeAllPoints(self) -> bool:
        """Include the results from all points in output"""
        return self.__includeAllPoints

    @includeAllPoints.setter
    def includeAllPoints(self, value: bool):
        """Set includeAllPoints"""
        self.__includeAllPoints = bool(value)

    @property
    def items(self) -> List[FatigueAnalysisItem]:
        """Specification of nodes for displacement storage"""
        return self.__items

    @items.setter
    def items(self, value: List[FatigueAnalysisItem]):
        """Set items"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__items = value

    @property
    def specifyTimeWindow(self) -> bool:
        """"""
        return self.__specifyTimeWindow

    @specifyTimeWindow.setter
    def specifyTimeWindow(self, value: bool):
        """Set specifyTimeWindow"""
        self.__specifyTimeWindow = bool(value)

    @property
    def startTime(self) -> float:
        """"""
        return self.__startTime

    @startTime.setter
    def startTime(self, value: float):
        """Set startTime"""
        self.__startTime = float(value)

    @property
    def endTime(self) -> float:
        """"""
        return self.__endTime

    @endTime.setter
    def endTime(self, value: float):
        """Set endTime"""
        self.__endTime = float(value)
