# This an autogenerated file
# 
# Generated with SumForceResponseStorage
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.sumforceresponsestorage import SumForceResponseStorageBlueprint
from typing import Dict
from sima.riflex.additionalfileformatcode import AdditionalFileFormatCode
from sima.riflex.elementreference import ElementReference
from sima.sima.moao import MOAO
from sima.sima.scriptablevalue import ScriptableValue

class SumForceResponseStorage(MOAO):
    """
    Keyword arguments
    -----------------
    _id : str
         (default "")
    scriptableValues : List[ScriptableValue]
    storageStep : int
         Code for storage of the sum of forces. Storage for every <storage step> given.(default 1)
    format : AdditionalFileFormatCode
         Format code for additional output of time series
    elements : List[ElementReference]
         Specification of nodes for displacement storage
    """

    def __init__(self , _id="", storageStep=1, format=AdditionalFileFormatCode.BINARY_OUTPUT, **kwargs):
        super().__init__(**kwargs)
        self._id = _id
        self.scriptableValues = list()
        self.storageStep = storageStep
        self.format = format
        self.elements = list()
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return SumForceResponseStorageBlueprint()


    @property
    def _id(self) -> str:
        """"""
        return self.___id

    @_id.setter
    def _id(self, value: str):
        """Set _id"""
        self.___id = str(value)

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def storageStep(self) -> int:
        """Code for storage of the sum of forces. Storage for every <storage step> given."""
        return self.__storageStep

    @storageStep.setter
    def storageStep(self, value: int):
        """Set storageStep"""
        self.__storageStep = int(value)

    @property
    def format(self) -> AdditionalFileFormatCode:
        """Format code for additional output of time series"""
        return self.__format

    @format.setter
    def format(self, value: AdditionalFileFormatCode):
        """Set format"""
        self.__format = value

    @property
    def elements(self) -> List[ElementReference]:
        """Specification of nodes for displacement storage"""
        return self.__elements

    @elements.setter
    def elements(self, value: List[ElementReference]):
        """Set elements"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__elements = value
