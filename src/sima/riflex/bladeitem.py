# This an autogenerated file
# 
# Generated with BladeItem
from __future__ import annotations
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.bladeitem import BladeItemBlueprint
from typing import Dict
from sima.sima.moao import MOAO
from sima.sima.scriptablevalue import ScriptableValue
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from sima.riflex.arline import ARLine

class BladeItem(MOAO):
    """
    Keyword arguments
    -----------------
    _id : str
         (default "")
    scriptableValues : List[ScriptableValue]
    eccentricityLine : ARLine
    bladeLine : ARLine
    """

    def __init__(self , _id="", **kwargs):
        super().__init__(**kwargs)
        self._id = _id
        self.scriptableValues = list()
        self.eccentricityLine = None
        self.bladeLine = None
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return BladeItemBlueprint()


    @property
    def _id(self) -> str:
        """"""
        return self.___id

    @_id.setter
    def _id(self, value: str):
        """Set _id"""
        self.___id = str(value)

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def eccentricityLine(self) -> ARLine:
        """"""
        return self.__eccentricityLine

    @eccentricityLine.setter
    def eccentricityLine(self, value: ARLine):
        """Set eccentricityLine"""
        self.__eccentricityLine = value

    @property
    def bladeLine(self) -> ARLine:
        """"""
        return self.__bladeLine

    @bladeLine.setter
    def bladeLine(self, value: ARLine):
        """Set bladeLine"""
        self.__bladeLine = value
