# This an autogenerated file
# 
# Generated with StrouhalConstantNumberProperty
from typing import Dict,Sequence,List
from dmt.entity import Entity
from dmt.blueprint import Blueprint
from .blueprints.strouhalconstantnumberproperty import StrouhalConstantNumberPropertyBlueprint
from typing import Dict
from sima.riflex.strouhalspecificationproperty import StrouhalSpecificationProperty
from sima.sima.scriptablevalue import ScriptableValue

class StrouhalConstantNumberProperty(StrouhalSpecificationProperty):
    """
    Keyword arguments
    -----------------
    name : str
         (default "")
    description : str
         (default "")
    _id : str
         (default "")
    scriptableValues : List[ScriptableValue]
    fixedStrouhalNumber : float
         Fixed Strouhal number(default 0.19)
    """

    def __init__(self , name="", description="", _id="", fixedStrouhalNumber=0.19, **kwargs):
        super().__init__(**kwargs)
        self.name = name
        self.description = description
        self._id = _id
        self.scriptableValues = list()
        self.fixedStrouhalNumber = fixedStrouhalNumber
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return StrouhalConstantNumberPropertyBlueprint()


    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = str(value)

    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = str(value)

    @property
    def _id(self) -> str:
        """"""
        return self.___id

    @_id.setter
    def _id(self, value: str):
        """Set _id"""
        self.___id = str(value)

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def fixedStrouhalNumber(self) -> float:
        """Fixed Strouhal number"""
        return self.__fixedStrouhalNumber

    @fixedStrouhalNumber.setter
    def fixedStrouhalNumber(self, value: float):
        """Set fixedStrouhalNumber"""
        self.__fixedStrouhalNumber = float(value)
