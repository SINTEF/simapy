# This an autogenerated file
# 
# Generated with WamitModel
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.wamitmodel import WamitModelBlueprint
from typing import Dict
from sima.sima.moao import MOAO
from sima.sima.scriptablevalue import ScriptableValue
from sima.wamit.wamitbody import WamitBody
from sima.wamit.wamitcalculationparameters import WamitCalculationParameters
from sima.wamit.wamitenvironment import WamitEnvironment
from sima.wamit.wamitlocation import WamitLocation

class WamitModel(MOAO):
    """
    Keyword arguments
    -----------------
    description : str
         (default "")
    scriptableValues : List[ScriptableValue]
    environments : List[WamitEnvironment]
    location : WamitLocation
    bodies : List[WamitBody]
    calculationParameters : WamitCalculationParameters
    """

    def __init__(self , description="", **kwargs):
        super().__init__(**kwargs)
        self.description = description
        self.scriptableValues = list()
        self.environments = list()
        self.location = None
        self.bodies = list()
        self.calculationParameters = None
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return WamitModelBlueprint()


    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = value

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def environments(self) -> List[WamitEnvironment]:
        """"""
        return self.__environments

    @environments.setter
    def environments(self, value: List[WamitEnvironment]):
        """Set environments"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__environments = value

    @property
    def location(self) -> WamitLocation:
        """"""
        return self.__location

    @location.setter
    def location(self, value: WamitLocation):
        """Set location"""
        self.__location = value

    @property
    def bodies(self) -> List[WamitBody]:
        """"""
        return self.__bodies

    @bodies.setter
    def bodies(self, value: List[WamitBody]):
        """Set bodies"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__bodies = value

    @property
    def calculationParameters(self) -> WamitCalculationParameters:
        """"""
        return self.__calculationParameters

    @calculationParameters.setter
    def calculationParameters(self, value: WamitCalculationParameters):
        """Set calculationParameters"""
        self.__calculationParameters = value
