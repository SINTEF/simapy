# This an autogenerated file
# 
# Generated with WamitControlSurface
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.wamitcontrolsurface import WamitControlSurfaceBlueprint
from typing import Dict
from sima.sima.moao import MOAO
from sima.sima.scriptablevalue import ScriptableValue
from sima.wamit.directionsofnormalsoption import DirectionsOfNormalsOption
from sima.wamit.evaluationmodeoption import EvaluationModeOption
from sima.wamit.parameterlines import ParameterLines
from sima.wamit.surfacestoincludefromms2fileoption import SurfacesToIncludeFromMs2FileOption

class WamitControlSurface(MOAO):
    """
    Keyword arguments
    -----------------
    description : str
         (default "")
    scriptableValues : List[ScriptableValue]
    geometryFilename : str
         GDF Geometry(default None)
    surfacesToIncludeFromMs2File : SurfacesToIncludeFromMs2FileOption
    symmetryAboutX : bool
         (default False)
    symmetryAboutY : bool
         (default False)
    entitySelectionList : str
         (default None)
    evaluationMode : EvaluationModeOption
    divisionsMultiplier : int
         (default 0)
    directionOfNormals : DirectionsOfNormalsOption
    parameterLines : List[ParameterLines]
    panelSize : float
         (default 10.0)
    """

    def __init__(self , description="", surfacesToIncludeFromMs2File=SurfacesToIncludeFromMs2FileOption.ALLVISIBLESURFACES, symmetryAboutX=False, symmetryAboutY=False, evaluationMode=EvaluationModeOption.FAST, divisionsMultiplier=0, directionOfNormals=DirectionsOfNormalsOption.OUTWARD, panelSize=10.0, **kwargs):
        super().__init__(**kwargs)
        self.description = description
        self.scriptableValues = list()
        self.geometryFilename = None
        self.surfacesToIncludeFromMs2File = surfacesToIncludeFromMs2File
        self.symmetryAboutX = symmetryAboutX
        self.symmetryAboutY = symmetryAboutY
        self.entitySelectionList = None
        self.evaluationMode = evaluationMode
        self.divisionsMultiplier = divisionsMultiplier
        self.directionOfNormals = directionOfNormals
        self.parameterLines = list()
        self.panelSize = panelSize
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return WamitControlSurfaceBlueprint()


    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = value

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def geometryFilename(self) -> str:
        """GDF Geometry"""
        return self.__geometryFilename

    @geometryFilename.setter
    def geometryFilename(self, value: str):
        """Set geometryFilename"""
        self.__geometryFilename = value

    @property
    def surfacesToIncludeFromMs2File(self) -> SurfacesToIncludeFromMs2FileOption:
        """"""
        return self.__surfacesToIncludeFromMs2File

    @surfacesToIncludeFromMs2File.setter
    def surfacesToIncludeFromMs2File(self, value: SurfacesToIncludeFromMs2FileOption):
        """Set surfacesToIncludeFromMs2File"""
        self.__surfacesToIncludeFromMs2File = value

    @property
    def symmetryAboutX(self) -> bool:
        """"""
        return self.__symmetryAboutX

    @symmetryAboutX.setter
    def symmetryAboutX(self, value: bool):
        """Set symmetryAboutX"""
        self.__symmetryAboutX = bool(value)

    @property
    def symmetryAboutY(self) -> bool:
        """"""
        return self.__symmetryAboutY

    @symmetryAboutY.setter
    def symmetryAboutY(self, value: bool):
        """Set symmetryAboutY"""
        self.__symmetryAboutY = bool(value)

    @property
    def entitySelectionList(self) -> str:
        """"""
        return self.__entitySelectionList

    @entitySelectionList.setter
    def entitySelectionList(self, value: str):
        """Set entitySelectionList"""
        self.__entitySelectionList = value

    @property
    def evaluationMode(self) -> EvaluationModeOption:
        """"""
        return self.__evaluationMode

    @evaluationMode.setter
    def evaluationMode(self, value: EvaluationModeOption):
        """Set evaluationMode"""
        self.__evaluationMode = value

    @property
    def divisionsMultiplier(self) -> int:
        """"""
        return self.__divisionsMultiplier

    @divisionsMultiplier.setter
    def divisionsMultiplier(self, value: int):
        """Set divisionsMultiplier"""
        self.__divisionsMultiplier = int(value)

    @property
    def directionOfNormals(self) -> DirectionsOfNormalsOption:
        """"""
        return self.__directionOfNormals

    @directionOfNormals.setter
    def directionOfNormals(self, value: DirectionsOfNormalsOption):
        """Set directionOfNormals"""
        self.__directionOfNormals = value

    @property
    def parameterLines(self) -> List[ParameterLines]:
        """"""
        return self.__parameterLines

    @parameterLines.setter
    def parameterLines(self, value: List[ParameterLines]):
        """Set parameterLines"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__parameterLines = value

    @property
    def panelSize(self) -> float:
        """"""
        return self.__panelSize

    @panelSize.setter
    def panelSize(self, value: float):
        """Set panelSize"""
        self.__panelSize = float(value)
