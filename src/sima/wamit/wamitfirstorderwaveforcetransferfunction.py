# This an autogenerated file
# 
# Generated with WamitFirstOrderWaveForceTransferFunction
from typing import Dict,Sequence,List
from dmt.entity import Entity
from dmt.blueprint import Blueprint
from .blueprints.wamitfirstorderwaveforcetransferfunction import WamitFirstOrderWaveForceTransferFunctionBlueprint
from sima.hydro.directiondependentcomplexvalues import DirectionDependentComplexValues
from sima.hydro.directionsymmetry import DirectionSymmetry
from sima.hydro.firstorderwaveforcetransferfunction import FirstOrderWaveForceTransferFunction
from sima.sima.scriptablevalue import ScriptableValue

class WamitFirstOrderWaveForceTransferFunction(FirstOrderWaveForceTransferFunction):
    """
    Keyword arguments
    -----------------
    name : str
         (default "")
    description : str
         (default "")
    _id : str
         (default "")
    scriptableValues : List[ScriptableValue]
    directions : Sequence[float]
    frequencies : Sequence[float]
    symmetry : DirectionSymmetry
    fx : DirectionDependentComplexValues
    fy : DirectionDependentComplexValues
    fz : DirectionDependentComplexValues
    mx : DirectionDependentComplexValues
    my : DirectionDependentComplexValues
    mz : DirectionDependentComplexValues
    """

    def __init__(self , name:str="", description:str="", _id:str="", symmetry:DirectionSymmetry=DirectionSymmetry.NO_SYMMETRY, **kwargs):
        super().__init__(**kwargs)
        self.__name = name
        self.__description = description
        self.___id = _id
        self.__scriptableValues = list()
        self.__directions = list()
        self.__frequencies = list()
        self.__symmetry = symmetry
        self.__fx = None
        self.__fy = None
        self.__fz = None
        self.__mx = None
        self.__my = None
        self.__mz = None
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return WamitFirstOrderWaveForceTransferFunctionBlueprint()


    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = str(value)

    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = str(value)

    @property
    def _id(self) -> str:
        """"""
        return self.___id

    @_id.setter
    def _id(self, value: str):
        """Set _id"""
        self.___id = str(value)

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def directions(self) -> Sequence[float]:
        """"""
        return self.__directions

    @directions.setter
    def directions(self, value: Sequence[float]):
        """Set directions"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__directions = value

    @property
    def frequencies(self) -> Sequence[float]:
        """"""
        return self.__frequencies

    @frequencies.setter
    def frequencies(self, value: Sequence[float]):
        """Set frequencies"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__frequencies = value

    @property
    def symmetry(self) -> DirectionSymmetry:
        """"""
        return self.__symmetry

    @symmetry.setter
    def symmetry(self, value: DirectionSymmetry):
        """Set symmetry"""
        self.__symmetry = value

    @property
    def fx(self) -> DirectionDependentComplexValues:
        """"""
        return self.__fx

    @fx.setter
    def fx(self, value: DirectionDependentComplexValues):
        """Set fx"""
        self.__fx = value

    @property
    def fy(self) -> DirectionDependentComplexValues:
        """"""
        return self.__fy

    @fy.setter
    def fy(self, value: DirectionDependentComplexValues):
        """Set fy"""
        self.__fy = value

    @property
    def fz(self) -> DirectionDependentComplexValues:
        """"""
        return self.__fz

    @fz.setter
    def fz(self, value: DirectionDependentComplexValues):
        """Set fz"""
        self.__fz = value

    @property
    def mx(self) -> DirectionDependentComplexValues:
        """"""
        return self.__mx

    @mx.setter
    def mx(self, value: DirectionDependentComplexValues):
        """Set mx"""
        self.__mx = value

    @property
    def my(self) -> DirectionDependentComplexValues:
        """"""
        return self.__my

    @my.setter
    def my(self, value: DirectionDependentComplexValues):
        """Set my"""
        self.__my = value

    @property
    def mz(self) -> DirectionDependentComplexValues:
        """"""
        return self.__mz

    @mz.setter
    def mz(self, value: DirectionDependentComplexValues):
        """Set mz"""
        self.__mz = value
