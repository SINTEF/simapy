# This an autogenerated file
# 
# Generated with PointField
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.pointfield import PointFieldBlueprint
from typing import Dict
from sima.sima.moao import MOAO
from sima.sima.scriptablevalue import ScriptableValue

class PointField(MOAO):
    """
    Keyword arguments
    -----------------
    _id : str
         (default "")
    scriptableValues : List[ScriptableValue]
    xMin : float
         x start coordinate (default 0.0)
    xMax : float
         x end coordinate (default 0.0)
    yMin : float
         y start coordinate (default 0.0)
    yMax : float
         y end coordinate (default 0.0)
    zMin : float
         z start coordinate (default 0.0)
    zMax : float
         z end coordinate (default 0.0)
    xNumberOfPoints : int
         number of points in x direction(default 0)
    yNumberOfPoints : int
         number of points in y direction(default 0)
    zNumberOfPoints : int
         number of points in z direction(default 0)
    visible : bool
         (default True)
    """

    def __init__(self , _id="", xMin=0.0, xMax=0.0, yMin=0.0, yMax=0.0, zMin=0.0, zMax=0.0, xNumberOfPoints=0, yNumberOfPoints=0, zNumberOfPoints=0, visible=True, **kwargs):
        super().__init__(**kwargs)
        self._id = _id
        self.scriptableValues = list()
        self.xMin = xMin
        self.xMax = xMax
        self.yMin = yMin
        self.yMax = yMax
        self.zMin = zMin
        self.zMax = zMax
        self.xNumberOfPoints = xNumberOfPoints
        self.yNumberOfPoints = yNumberOfPoints
        self.zNumberOfPoints = zNumberOfPoints
        self.visible = visible
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return PointFieldBlueprint()


    @property
    def _id(self) -> str:
        """"""
        return self.___id

    @_id.setter
    def _id(self, value: str):
        """Set _id"""
        self.___id = str(value)

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def xMin(self) -> float:
        """x start coordinate """
        return self.__xMin

    @xMin.setter
    def xMin(self, value: float):
        """Set xMin"""
        self.__xMin = float(value)

    @property
    def xMax(self) -> float:
        """x end coordinate """
        return self.__xMax

    @xMax.setter
    def xMax(self, value: float):
        """Set xMax"""
        self.__xMax = float(value)

    @property
    def yMin(self) -> float:
        """y start coordinate """
        return self.__yMin

    @yMin.setter
    def yMin(self, value: float):
        """Set yMin"""
        self.__yMin = float(value)

    @property
    def yMax(self) -> float:
        """y end coordinate """
        return self.__yMax

    @yMax.setter
    def yMax(self, value: float):
        """Set yMax"""
        self.__yMax = float(value)

    @property
    def zMin(self) -> float:
        """z start coordinate """
        return self.__zMin

    @zMin.setter
    def zMin(self, value: float):
        """Set zMin"""
        self.__zMin = float(value)

    @property
    def zMax(self) -> float:
        """z end coordinate """
        return self.__zMax

    @zMax.setter
    def zMax(self, value: float):
        """Set zMax"""
        self.__zMax = float(value)

    @property
    def xNumberOfPoints(self) -> int:
        """number of points in x direction"""
        return self.__xNumberOfPoints

    @xNumberOfPoints.setter
    def xNumberOfPoints(self, value: int):
        """Set xNumberOfPoints"""
        self.__xNumberOfPoints = int(value)

    @property
    def yNumberOfPoints(self) -> int:
        """number of points in y direction"""
        return self.__yNumberOfPoints

    @yNumberOfPoints.setter
    def yNumberOfPoints(self, value: int):
        """Set yNumberOfPoints"""
        self.__yNumberOfPoints = int(value)

    @property
    def zNumberOfPoints(self) -> int:
        """number of points in z direction"""
        return self.__zNumberOfPoints

    @zNumberOfPoints.setter
    def zNumberOfPoints(self, value: int):
        """Set zNumberOfPoints"""
        self.__zNumberOfPoints = int(value)

    @property
    def visible(self) -> bool:
        """"""
        return self.__visible

    @visible.setter
    def visible(self, value: bool):
        """Set visible"""
        self.__visible = bool(value)
