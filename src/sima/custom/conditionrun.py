# This an autogenerated file
# 
# Generated with ConditionRun
from __future__ import annotations
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.conditionrun import ConditionRunBlueprint
from typing import Dict
from sima.custom.customcomponent import CustomComponent
from sima.sima.scriptablevalue import ScriptableValue
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from sima.sima.condition import Condition

class ConditionRun(CustomComponent):
    """
    Keyword arguments
    -----------------
    description : str
         (default "")
    scriptableValues : List[ScriptableValue]
    condition : Condition
    _type : str
         (default None)
    addAllConditionTypes : bool
         (default False)
    addCustomLabel : bool
         (default False)
    label : str
         (default None)
    addOpenView : bool
         (default False)
    """

    def __init__(self , description="", addAllConditionTypes=False, addCustomLabel=False, addOpenView=False, **kwargs):
        super().__init__(**kwargs)
        self.description = description
        self.scriptableValues = list()
        self.condition = None
        self._type = None
        self.addAllConditionTypes = addAllConditionTypes
        self.addCustomLabel = addCustomLabel
        self.label = None
        self.addOpenView = addOpenView
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return ConditionRunBlueprint()


    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = value

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def condition(self) -> Condition:
        """"""
        return self.__condition

    @condition.setter
    def condition(self, value: Condition):
        """Set condition"""
        self.__condition = value

    @property
    def _type(self) -> str:
        """"""
        return self.___type

    @_type.setter
    def _type(self, value: str):
        """Set _type"""
        self.___type = value

    @property
    def addAllConditionTypes(self) -> bool:
        """"""
        return self.__addAllConditionTypes

    @addAllConditionTypes.setter
    def addAllConditionTypes(self, value: bool):
        """Set addAllConditionTypes"""
        self.__addAllConditionTypes = bool(value)

    @property
    def addCustomLabel(self) -> bool:
        """"""
        return self.__addCustomLabel

    @addCustomLabel.setter
    def addCustomLabel(self, value: bool):
        """Set addCustomLabel"""
        self.__addCustomLabel = bool(value)

    @property
    def label(self) -> str:
        """"""
        return self.__label

    @label.setter
    def label(self, value: str):
        """Set label"""
        self.__label = value

    @property
    def addOpenView(self) -> bool:
        """"""
        return self.__addOpenView

    @addOpenView.setter
    def addOpenView(self, value: bool):
        """Set addOpenView"""
        self.__addOpenView = bool(value)
