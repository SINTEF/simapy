# This an autogenerated file
# 
# Generated with CustomContainer
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.customcontainer import CustomContainerBlueprint
from typing import Dict
from sima.custom.customcomponent import CustomComponent
from sima.custom.customvisibilityparameter import CustomVisibilityParameter
from sima.sima.scriptablevalue import ScriptableValue

class CustomContainer(CustomComponent):
    """
    Keyword arguments
    -----------------
    description : str
         (default "")
    scriptableValues : List[ScriptableValue]
    children : List[CustomComponent]
    visibilityParameters : List[CustomVisibilityParameter]
    visibleWhenScript : str
         (default None)
    """

    def __init__(self , description="", **kwargs):
        super().__init__(**kwargs)
        self.description = description
        self.scriptableValues = list()
        self.children = list()
        self.visibilityParameters = list()
        self.visibleWhenScript = None
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return CustomContainerBlueprint()


    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = value

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def children(self) -> List[CustomComponent]:
        """"""
        return self.__children

    @children.setter
    def children(self, value: List[CustomComponent]):
        """Set children"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__children = value

    @property
    def visibilityParameters(self) -> List[CustomVisibilityParameter]:
        """"""
        return self.__visibilityParameters

    @visibilityParameters.setter
    def visibilityParameters(self, value: List[CustomVisibilityParameter]):
        """Set visibilityParameters"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__visibilityParameters = value

    @property
    def visibleWhenScript(self) -> str:
        """"""
        return self.__visibleWhenScript

    @visibleWhenScript.setter
    def visibleWhenScript(self, value: str):
        """Set visibleWhenScript"""
        self.__visibleWhenScript = value
