# This an autogenerated file
# 
# Generated with XYTableNode
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.xytablenode import XYTableNodeBlueprint
from typing import Dict
from sima.post.controlsignalinputslot import ControlSignalInputSlot
from sima.post.inputslot import InputSlot
from sima.post.outputnode import OutputNode
from sima.sima.scriptablevalue import ScriptableValue

class XYTableNode(OutputNode):
    """
    Keyword arguments
    -----------------
    _id : str
         (default "")
    scriptableValues : List[ScriptableValue]
    name : str
         (default "")
    x : int
         (default 0)
    y : int
         (default 0)
    h : int
         (default 0)
    w : int
         (default 0)
    controlSignalInputSlots : List[ControlSignalInputSlot]
    inputSlot : InputSlot
    columnVariable : str
         the values of this variable will create the columns of the table(default "")
    rowVariable : str
         the values of this variable will create the rows of the table(default "")
    dataSeries : str
         the values of this signal will be shown in the field matching the related variable values(default "")
    """

    def __init__(self , _id="", name="", x=0, y=0, h=0, w=0, columnVariable="", rowVariable="", dataSeries="", **kwargs):
        super().__init__(**kwargs)
        self._id = _id
        self.scriptableValues = list()
        self.name = name
        self.x = x
        self.y = y
        self.h = h
        self.w = w
        self.controlSignalInputSlots = list()
        self.inputSlot = None
        self.columnVariable = columnVariable
        self.rowVariable = rowVariable
        self.dataSeries = dataSeries
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return XYTableNodeBlueprint()


    @property
    def _id(self) -> str:
        """"""
        return self.___id

    @_id.setter
    def _id(self, value: str):
        """Set _id"""
        self.___id = str(value)

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = str(value)

    @property
    def x(self) -> int:
        """"""
        return self.__x

    @x.setter
    def x(self, value: int):
        """Set x"""
        self.__x = int(value)

    @property
    def y(self) -> int:
        """"""
        return self.__y

    @y.setter
    def y(self, value: int):
        """Set y"""
        self.__y = int(value)

    @property
    def h(self) -> int:
        """"""
        return self.__h

    @h.setter
    def h(self, value: int):
        """Set h"""
        self.__h = int(value)

    @property
    def w(self) -> int:
        """"""
        return self.__w

    @w.setter
    def w(self, value: int):
        """Set w"""
        self.__w = int(value)

    @property
    def controlSignalInputSlots(self) -> List[ControlSignalInputSlot]:
        """"""
        return self.__controlSignalInputSlots

    @controlSignalInputSlots.setter
    def controlSignalInputSlots(self, value: List[ControlSignalInputSlot]):
        """Set controlSignalInputSlots"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__controlSignalInputSlots = value

    @property
    def inputSlot(self) -> InputSlot:
        """"""
        return self.__inputSlot

    @inputSlot.setter
    def inputSlot(self, value: InputSlot):
        """Set inputSlot"""
        self.__inputSlot = value

    @property
    def columnVariable(self) -> str:
        """the values of this variable will create the columns of the table"""
        return self.__columnVariable

    @columnVariable.setter
    def columnVariable(self, value: str):
        """Set columnVariable"""
        self.__columnVariable = str(value)

    @property
    def rowVariable(self) -> str:
        """the values of this variable will create the rows of the table"""
        return self.__rowVariable

    @rowVariable.setter
    def rowVariable(self, value: str):
        """Set rowVariable"""
        self.__rowVariable = str(value)

    @property
    def dataSeries(self) -> str:
        """the values of this signal will be shown in the field matching the related variable values"""
        return self.__dataSeries

    @dataSeries.setter
    def dataSeries(self, value: str):
        """Set dataSeries"""
        self.__dataSeries = str(value)
