# This an autogenerated file
# 
# Generated with ConditionInputNode
from __future__ import annotations
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.conditioninputnode import ConditionInputNodeBlueprint
from typing import Dict
from sima.post.controlsignalinputslot import ControlSignalInputSlot
from sima.post.inputslot import InputSlot
from sima.post.outputslot import OutputSlot
from sima.post.runnode import RunNode
from sima.sima.scriptablevalue import ScriptableValue
from sima.workflow.filespecification import FileSpecification
from sima.workflow.modelinputslot import ModelInputSlot
from sima.workflow.modeloutputspecification import ModelOutputSpecification
from sima.workflow.modelreferenceinputslot import ModelReferenceInputSlot
from sima.workflow.variableinputslot import VariableInputSlot
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from sima.sima.condition import Condition

class ConditionInputNode(RunNode):
    """
    Keyword arguments
    -----------------
    _id : str
         (default "")
    scriptableValues : List[ScriptableValue]
    name : str
         (default "")
    x : int
         (default 0)
    y : int
         (default 0)
    h : int
         (default 0)
    w : int
         (default 0)
    controlSignalInputSlots : List[ControlSignalInputSlot]
    variableInputSlots : List[VariableInputSlot]
    modelReferenceInputSlot : ModelReferenceInputSlot
    condition : Condition
    analysis : str
         (default "")
    outputSlot : OutputSlot
    additionalFiles : List[FileSpecification]
    modelOutput : List[ModelOutputSpecification]
    modelInputSlots : List[ModelInputSlot]
    inputCondition : bool
         Set the condition input from the outside. Use a model reference as source.(default False)
    setFolderName : bool
         Override the default folder name created. This folder will be relative to the running workflow. If left empty it will create the results directly in the workflow folder.(default False)
    folderName : str
         (default "")
    addInputFiles : bool
         Add additional input files before running(default False)
    fileInputSlot : InputSlot
    """

    def __init__(self , _id="", name="", x=0, y=0, h=0, w=0, analysis="", inputCondition=False, setFolderName=False, folderName="", addInputFiles=False, **kwargs):
        super().__init__(**kwargs)
        self._id = _id
        self.scriptableValues = list()
        self.name = name
        self.x = x
        self.y = y
        self.h = h
        self.w = w
        self.controlSignalInputSlots = list()
        self.variableInputSlots = list()
        self.modelReferenceInputSlot = None
        self.condition = None
        self.analysis = analysis
        self.outputSlot = None
        self.additionalFiles = list()
        self.modelOutput = list()
        self.modelInputSlots = list()
        self.inputCondition = inputCondition
        self.setFolderName = setFolderName
        self.folderName = folderName
        self.addInputFiles = addInputFiles
        self.fileInputSlot = None
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return ConditionInputNodeBlueprint()


    @property
    def _id(self) -> str:
        """"""
        return self.___id

    @_id.setter
    def _id(self, value: str):
        """Set _id"""
        self.___id = str(value)

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = str(value)

    @property
    def x(self) -> int:
        """"""
        return self.__x

    @x.setter
    def x(self, value: int):
        """Set x"""
        self.__x = int(value)

    @property
    def y(self) -> int:
        """"""
        return self.__y

    @y.setter
    def y(self, value: int):
        """Set y"""
        self.__y = int(value)

    @property
    def h(self) -> int:
        """"""
        return self.__h

    @h.setter
    def h(self, value: int):
        """Set h"""
        self.__h = int(value)

    @property
    def w(self) -> int:
        """"""
        return self.__w

    @w.setter
    def w(self, value: int):
        """Set w"""
        self.__w = int(value)

    @property
    def controlSignalInputSlots(self) -> List[ControlSignalInputSlot]:
        """"""
        return self.__controlSignalInputSlots

    @controlSignalInputSlots.setter
    def controlSignalInputSlots(self, value: List[ControlSignalInputSlot]):
        """Set controlSignalInputSlots"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__controlSignalInputSlots = value

    @property
    def variableInputSlots(self) -> List[VariableInputSlot]:
        """"""
        return self.__variableInputSlots

    @variableInputSlots.setter
    def variableInputSlots(self, value: List[VariableInputSlot]):
        """Set variableInputSlots"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__variableInputSlots = value

    @property
    def modelReferenceInputSlot(self) -> ModelReferenceInputSlot:
        """"""
        return self.__modelReferenceInputSlot

    @modelReferenceInputSlot.setter
    def modelReferenceInputSlot(self, value: ModelReferenceInputSlot):
        """Set modelReferenceInputSlot"""
        self.__modelReferenceInputSlot = value

    @property
    def condition(self) -> Condition:
        """"""
        return self.__condition

    @condition.setter
    def condition(self, value: Condition):
        """Set condition"""
        self.__condition = value

    @property
    def analysis(self) -> str:
        """"""
        return self.__analysis

    @analysis.setter
    def analysis(self, value: str):
        """Set analysis"""
        self.__analysis = str(value)

    @property
    def outputSlot(self) -> OutputSlot:
        """"""
        return self.__outputSlot

    @outputSlot.setter
    def outputSlot(self, value: OutputSlot):
        """Set outputSlot"""
        self.__outputSlot = value

    @property
    def additionalFiles(self) -> List[FileSpecification]:
        """"""
        return self.__additionalFiles

    @additionalFiles.setter
    def additionalFiles(self, value: List[FileSpecification]):
        """Set additionalFiles"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__additionalFiles = value

    @property
    def modelOutput(self) -> List[ModelOutputSpecification]:
        """"""
        return self.__modelOutput

    @modelOutput.setter
    def modelOutput(self, value: List[ModelOutputSpecification]):
        """Set modelOutput"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__modelOutput = value

    @property
    def modelInputSlots(self) -> List[ModelInputSlot]:
        """"""
        return self.__modelInputSlots

    @modelInputSlots.setter
    def modelInputSlots(self, value: List[ModelInputSlot]):
        """Set modelInputSlots"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__modelInputSlots = value

    @property
    def inputCondition(self) -> bool:
        """Set the condition input from the outside. Use a model reference as source."""
        return self.__inputCondition

    @inputCondition.setter
    def inputCondition(self, value: bool):
        """Set inputCondition"""
        self.__inputCondition = bool(value)

    @property
    def setFolderName(self) -> bool:
        """Override the default folder name created. This folder will be relative to the running workflow. If left empty it will create the results directly in the workflow folder."""
        return self.__setFolderName

    @setFolderName.setter
    def setFolderName(self, value: bool):
        """Set setFolderName"""
        self.__setFolderName = bool(value)

    @property
    def folderName(self) -> str:
        """"""
        return self.__folderName

    @folderName.setter
    def folderName(self, value: str):
        """Set folderName"""
        self.__folderName = str(value)

    @property
    def addInputFiles(self) -> bool:
        """Add additional input files before running"""
        return self.__addInputFiles

    @addInputFiles.setter
    def addInputFiles(self, value: bool):
        """Set addInputFiles"""
        self.__addInputFiles = bool(value)

    @property
    def fileInputSlot(self) -> InputSlot:
        """"""
        return self.__fileInputSlot

    @fileInputSlot.setter
    def fileInputSlot(self, value: InputSlot):
        """Set fileInputSlot"""
        self.__fileInputSlot = value
