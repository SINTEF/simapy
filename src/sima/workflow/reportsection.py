# This an autogenerated file
# 
# Generated with ReportSection
from typing import Dict,Sequence,List
from dmt.entity import Entity
from dmt.blueprint import Blueprint
from .blueprints.reportsection import ReportSectionBlueprint
from sima.report.orientation import Orientation
from sima.sima.scriptablevalue import ScriptableValue
from sima.workflow.reportfragmentitem import ReportFragmentItem
from sima.workflow.reportfragmentitemcontainer import ReportFragmentItemContainer

class ReportSection(ReportFragmentItemContainer):
    """
    Keyword arguments
    -----------------
    name : str
         (default "")
    description : str
         (default "")
    _id : str
         (default "")
    scriptableValues : List[ScriptableValue]
    reportFragmentItems : List[ReportFragmentItem]
    title : str
         (default "")
    pageBreakBefore : bool
         (default False)
    orientation : Orientation
    """

    def __init__(self , name:str="", description:str="", _id:str="", title:str="", pageBreakBefore:bool=False, orientation:Orientation=Orientation.PORTRAIT, **kwargs):
        super().__init__(**kwargs)
        self.__name = name
        self.__description = description
        self.___id = _id
        self.__scriptableValues = list()
        self.__reportFragmentItems = list()
        self.__title = title
        self.__pageBreakBefore = pageBreakBefore
        self.__orientation = orientation
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return ReportSectionBlueprint()


    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = str(value)

    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = str(value)

    @property
    def _id(self) -> str:
        """"""
        return self.___id

    @_id.setter
    def _id(self, value: str):
        """Set _id"""
        self.___id = str(value)

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def reportFragmentItems(self) -> List[ReportFragmentItem]:
        """"""
        return self.__reportFragmentItems

    @reportFragmentItems.setter
    def reportFragmentItems(self, value: List[ReportFragmentItem]):
        """Set reportFragmentItems"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__reportFragmentItems = value

    @property
    def title(self) -> str:
        """"""
        return self.__title

    @title.setter
    def title(self, value: str):
        """Set title"""
        self.__title = str(value)

    @property
    def pageBreakBefore(self) -> bool:
        """"""
        return self.__pageBreakBefore

    @pageBreakBefore.setter
    def pageBreakBefore(self, value: bool):
        """Set pageBreakBefore"""
        self.__pageBreakBefore = bool(value)

    @property
    def orientation(self) -> Orientation:
        """"""
        return self.__orientation

    @orientation.setter
    def orientation(self, value: Orientation):
        """Set orientation"""
        self.__orientation = value
