# This an autogenerated file
# 
# Generated with FileOutputSlot
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.fileoutputslot import FileOutputSlotBlueprint
from typing import Dict
from sima.post.outputslot import OutputSlot
from sima.sima.scriptablevalue import ScriptableValue

class FileOutputSlot(OutputSlot):
    """
    Keyword arguments
    -----------------
    _id : str
         (default "")
    scriptableValues : List[ScriptableValue]
    name : str
         (default "")
    filename : str
         Name of file to be imported(default "")
    pathOnly : bool
         Import the path to the specified file and not the content(default False)
    """

    def __init__(self , _id="", name="", filename="", pathOnly=False, **kwargs):
        super().__init__(**kwargs)
        self._id = _id
        self.scriptableValues = list()
        self.name = name
        self.filename = filename
        self.pathOnly = pathOnly
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return FileOutputSlotBlueprint()


    @property
    def _id(self) -> str:
        """"""
        return self.___id

    @_id.setter
    def _id(self, value: str):
        """Set _id"""
        self.___id = str(value)

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = str(value)

    @property
    def filename(self) -> str:
        """Name of file to be imported"""
        return self.__filename

    @filename.setter
    def filename(self, value: str):
        """Set filename"""
        self.__filename = str(value)

    @property
    def pathOnly(self) -> bool:
        """Import the path to the specified file and not the content"""
        return self.__pathOnly

    @pathOnly.setter
    def pathOnly(self, value: bool):
        """Set pathOnly"""
        self.__pathOnly = bool(value)
