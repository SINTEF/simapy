# This an autogenerated file
# 
# Generated with ModelContent
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.modelcontent import ModelContentBlueprint
from typing import Dict
from dmt.entity import Entity
from sima.header import Header

class ModelContent(Entity):
    """
    Keyword arguments
    -----------------
    description : str
         (default "")
    header : Header
    contents : List[Entity]
    """

    def __init__(self , description="", **kwargs):
        super().__init__(**kwargs)
        self.description = description
        self.header = None
        self.contents = list()
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return ModelContentBlueprint()


    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = value

    @property
    def header(self) -> Header:
        """"""
        return self.__header

    @header.setter
    def header(self, value: Header):
        """Set header"""
        self.__header = value

    @property
    def contents(self) -> List[Entity]:
        """"""
        return self.__contents

    @contents.setter
    def contents(self, value: List[Entity]):
        """Set contents"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__contents = value
