# This an autogenerated file
# 
# Generated with SIMAWorkspace
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.simaworkspace import SIMAWorkspaceBlueprint
from typing import Dict
from sima.sima.moao import MOAO
from sima.sima.scriptablevalue import ScriptableValue
from sima.sima.task import Task
from sima.sima.taskfolder import TaskFolder

class SIMAWorkspace(MOAO):
    """
    Keyword arguments
    -----------------
    description : str
         (default "")
    scriptableValues : List[ScriptableValue]
    childFolders : List[TaskFolder]
    tasks : List[Task]
    productId : str
         (default None)
    dateAndTime : str
         (default None)
    """

    def __init__(self , description="", **kwargs):
        super().__init__(**kwargs)
        self.description = description
        self.scriptableValues = list()
        self.childFolders = list()
        self.tasks = list()
        self.productId = None
        self.dateAndTime = None
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return SIMAWorkspaceBlueprint()


    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = value

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def childFolders(self) -> List[TaskFolder]:
        """"""
        return self.__childFolders

    @childFolders.setter
    def childFolders(self, value: List[TaskFolder]):
        """Set childFolders"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__childFolders = value

    @property
    def tasks(self) -> List[Task]:
        """"""
        return self.__tasks

    @tasks.setter
    def tasks(self, value: List[Task]):
        """Set tasks"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__tasks = value

    @property
    def productId(self) -> str:
        """"""
        return self.__productId

    @productId.setter
    def productId(self, value: str):
        """Set productId"""
        self.__productId = value

    @property
    def dateAndTime(self) -> str:
        """"""
        return self.__dateAndTime

    @dateAndTime.setter
    def dateAndTime(self, value: str):
        """Set dateAndTime"""
        self.__dateAndTime = value
