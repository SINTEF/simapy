# This an autogenerated file
# 
# Generated with SIMAColor
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.simacolor import SIMAColorBlueprint
from typing import Dict
from sima.sima.moao import MOAO
from sima.sima.scriptablevalue import ScriptableValue

class SIMAColor(MOAO):
    """
    Keyword arguments
    -----------------
    _id : str
         (default "")
    scriptableValues : List[ScriptableValue]
    red : float
         (default 1.0)
    green : float
         (default 0.0)
    blue : float
         (default 0.0)
    """

    def __init__(self , _id="", red=1.0, green=0.0, blue=0.0, **kwargs):
        super().__init__(**kwargs)
        self._id = _id
        self.scriptableValues = list()
        self.red = red
        self.green = green
        self.blue = blue
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return SIMAColorBlueprint()


    @property
    def _id(self) -> str:
        """"""
        return self.___id

    @_id.setter
    def _id(self, value: str):
        """Set _id"""
        self.___id = str(value)

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def red(self) -> float:
        """"""
        return self.__red

    @red.setter
    def red(self, value: float):
        """Set red"""
        self.__red = float(value)

    @property
    def green(self) -> float:
        """"""
        return self.__green

    @green.setter
    def green(self, value: float):
        """Set green"""
        self.__green = float(value)

    @property
    def blue(self) -> float:
        """"""
        return self.__blue

    @blue.setter
    def blue(self, value: float):
        """Set blue"""
        self.__blue = float(value)
