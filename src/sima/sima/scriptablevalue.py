# This an autogenerated file
# 
# Generated with ScriptableValue
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.scriptablevalue import ScriptableValueBlueprint
from typing import Dict
from dmt.entity import Entity
from sima.sima.dependency import Dependency

class ScriptableValue(Entity):
    """
    Keyword arguments
    -----------------
    _id : str
         (default "")
    script : str
         (default "")
    dependencies : List[Dependency]
    cyclic : bool
         (default False)
    feature : str
         (default "")
    index : int
         (default -1)
    """

    def __init__(self , _id="", script="", cyclic=False, feature="", index=-1, **kwargs):
        super().__init__(**kwargs)
        self._id = _id
        self.script = script
        self.dependencies = list()
        self.cyclic = cyclic
        self.feature = feature
        self.index = index
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return ScriptableValueBlueprint()


    @property
    def _id(self) -> str:
        """"""
        return self.___id

    @_id.setter
    def _id(self, value: str):
        """Set _id"""
        self.___id = str(value)

    @property
    def script(self) -> str:
        """"""
        return self.__script

    @script.setter
    def script(self, value: str):
        """Set script"""
        self.__script = str(value)

    @property
    def dependencies(self) -> List[Dependency]:
        """"""
        return self.__dependencies

    @dependencies.setter
    def dependencies(self, value: List[Dependency]):
        """Set dependencies"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__dependencies = value

    @property
    def cyclic(self) -> bool:
        """"""
        return self.__cyclic

    @cyclic.setter
    def cyclic(self, value: bool):
        """Set cyclic"""
        self.__cyclic = bool(value)

    @property
    def feature(self) -> str:
        """"""
        return self.__feature

    @feature.setter
    def feature(self, value: str):
        """Set feature"""
        self.__feature = str(value)

    @property
    def index(self) -> int:
        """"""
        return self.__index

    @index.setter
    def index(self, value: int):
        """Set index"""
        self.__index = int(value)
