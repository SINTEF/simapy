# This an autogenerated file
# 
# Generated with VersioningPreference
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.versioningpreference import VersioningPreferenceBlueprint
from typing import Dict
from sima.sima.scriptablevalue import ScriptableValue
from sima.sima.simapreference import SIMAPreference

class VersioningPreference(SIMAPreference):
    """
    Keyword arguments
    -----------------
    _id : str
         (default "")
    scriptableValues : List[ScriptableValue]
    userHome : str
         Override user home folder(default "")
    sshFolder : str
         Override ssh folder(default "")
    """

    def __init__(self , _id="", userHome="", sshFolder="", **kwargs):
        super().__init__(**kwargs)
        self._id = _id
        self.scriptableValues = list()
        self.userHome = userHome
        self.sshFolder = sshFolder
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return VersioningPreferenceBlueprint()


    @property
    def _id(self) -> str:
        """"""
        return self.___id

    @_id.setter
    def _id(self, value: str):
        """Set _id"""
        self.___id = str(value)

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def userHome(self) -> str:
        """Override user home folder"""
        return self.__userHome

    @userHome.setter
    def userHome(self, value: str):
        """Set userHome"""
        self.__userHome = str(value)

    @property
    def sshFolder(self) -> str:
        """Override ssh folder"""
        return self.__sshFolder

    @sshFolder.setter
    def sshFolder(self, value: str):
        """Set sshFolder"""
        self.__sshFolder = str(value)
