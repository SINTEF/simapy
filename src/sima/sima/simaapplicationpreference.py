# This an autogenerated file
# 
# Generated with SIMAApplicationPreference
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.simaapplicationpreference import SIMAApplicationPreferenceBlueprint
from typing import Dict
from sima.sima.scriptablevalue import ScriptableValue
from sima.sima.simapreference import SIMAPreference

class SIMAApplicationPreference(SIMAPreference):
    """
    Keyword arguments
    -----------------
    description : str
         (default "")
    scriptableValues : List[ScriptableValue]
    createTimestamp : bool
         (default True)
    deleteAutomatically : bool
         (default True)
    interpolate : bool
         (default True)
    overrideTimeZone : bool
         (default True)
    minimumDiskSpace : int
         (default 1)
    autoSaveFrequency : int
         (default 5)
    backupFolder : str
         (default None)
    numberOfSignificantDigits : int
         Maximum number of significant digits used to display floating point numbers (editors must be reopened) (default 5)
    """

    def __init__(self , description="", createTimestamp=True, deleteAutomatically=True, interpolate=True, overrideTimeZone=True, minimumDiskSpace=1, autoSaveFrequency=5, numberOfSignificantDigits=5, **kwargs):
        super().__init__(**kwargs)
        self.description = description
        self.scriptableValues = list()
        self.createTimestamp = createTimestamp
        self.deleteAutomatically = deleteAutomatically
        self.interpolate = interpolate
        self.overrideTimeZone = overrideTimeZone
        self.minimumDiskSpace = minimumDiskSpace
        self.autoSaveFrequency = autoSaveFrequency
        self.backupFolder = None
        self.numberOfSignificantDigits = numberOfSignificantDigits
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return SIMAApplicationPreferenceBlueprint()


    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = value

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def createTimestamp(self) -> bool:
        """"""
        return self.__createTimestamp

    @createTimestamp.setter
    def createTimestamp(self, value: bool):
        """Set createTimestamp"""
        self.__createTimestamp = bool(value)

    @property
    def deleteAutomatically(self) -> bool:
        """"""
        return self.__deleteAutomatically

    @deleteAutomatically.setter
    def deleteAutomatically(self, value: bool):
        """Set deleteAutomatically"""
        self.__deleteAutomatically = bool(value)

    @property
    def interpolate(self) -> bool:
        """"""
        return self.__interpolate

    @interpolate.setter
    def interpolate(self, value: bool):
        """Set interpolate"""
        self.__interpolate = bool(value)

    @property
    def overrideTimeZone(self) -> bool:
        """"""
        return self.__overrideTimeZone

    @overrideTimeZone.setter
    def overrideTimeZone(self, value: bool):
        """Set overrideTimeZone"""
        self.__overrideTimeZone = bool(value)

    @property
    def minimumDiskSpace(self) -> int:
        """"""
        return self.__minimumDiskSpace

    @minimumDiskSpace.setter
    def minimumDiskSpace(self, value: int):
        """Set minimumDiskSpace"""
        self.__minimumDiskSpace = int(value)

    @property
    def autoSaveFrequency(self) -> int:
        """"""
        return self.__autoSaveFrequency

    @autoSaveFrequency.setter
    def autoSaveFrequency(self, value: int):
        """Set autoSaveFrequency"""
        self.__autoSaveFrequency = int(value)

    @property
    def backupFolder(self) -> str:
        """"""
        return self.__backupFolder

    @backupFolder.setter
    def backupFolder(self, value: str):
        """Set backupFolder"""
        self.__backupFolder = value

    @property
    def numberOfSignificantDigits(self) -> int:
        """Maximum number of significant digits used to display floating point numbers (editors must be reopened) """
        return self.__numberOfSignificantDigits

    @numberOfSignificantDigits.setter
    def numberOfSignificantDigits(self, value: int):
        """Set numberOfSignificantDigits"""
        self.__numberOfSignificantDigits = int(value)
