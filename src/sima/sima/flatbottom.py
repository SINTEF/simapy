# This an autogenerated file
# 
# Generated with FlatBottom
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.flatbottom import FlatBottomBlueprint
from typing import Dict
from sima.sima.moao import MOAO
from sima.sima.scriptablevalue import ScriptableValue
from sima.sima.simacolor import SIMAColor

class FlatBottom(MOAO):
    """
    Keyword arguments
    -----------------
    _id : str
         (default "")
    scriptableValues : List[ScriptableValue]
    centerX : float
         Center of surface in x(default 0.0)
    centerY : float
         Center of surface in y(default 0.0)
    sizeX : float
         Size of surface in x(default 500.0)
    sizeY : float
         Size of surface in y(default 500.0)
    color : SIMAColor
    transparency : float
         Transparency of surface(default 0.0)
    meshGridSize : float
         Size of grids in the mesh(default 100.0)
    showMesh : bool
         Show mesh grid on surface(default True)
    z : float
         Depth of surface(default -100.0)
    angle : float
         (default 0.0)
    """

    def __init__(self , _id="", centerX=0.0, centerY=0.0, sizeX=500.0, sizeY=500.0, transparency=0.0, meshGridSize=100.0, showMesh=True, z=-100.0, angle=0.0, **kwargs):
        super().__init__(**kwargs)
        self._id = _id
        self.scriptableValues = list()
        self.centerX = centerX
        self.centerY = centerY
        self.sizeX = sizeX
        self.sizeY = sizeY
        self.color = None
        self.transparency = transparency
        self.meshGridSize = meshGridSize
        self.showMesh = showMesh
        self.z = z
        self.angle = angle
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return FlatBottomBlueprint()


    @property
    def _id(self) -> str:
        """"""
        return self.___id

    @_id.setter
    def _id(self, value: str):
        """Set _id"""
        self.___id = str(value)

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def centerX(self) -> float:
        """Center of surface in x"""
        return self.__centerX

    @centerX.setter
    def centerX(self, value: float):
        """Set centerX"""
        self.__centerX = float(value)

    @property
    def centerY(self) -> float:
        """Center of surface in y"""
        return self.__centerY

    @centerY.setter
    def centerY(self, value: float):
        """Set centerY"""
        self.__centerY = float(value)

    @property
    def sizeX(self) -> float:
        """Size of surface in x"""
        return self.__sizeX

    @sizeX.setter
    def sizeX(self, value: float):
        """Set sizeX"""
        self.__sizeX = float(value)

    @property
    def sizeY(self) -> float:
        """Size of surface in y"""
        return self.__sizeY

    @sizeY.setter
    def sizeY(self, value: float):
        """Set sizeY"""
        self.__sizeY = float(value)

    @property
    def color(self) -> SIMAColor:
        """"""
        return self.__color

    @color.setter
    def color(self, value: SIMAColor):
        """Set color"""
        self.__color = value

    @property
    def transparency(self) -> float:
        """Transparency of surface"""
        return self.__transparency

    @transparency.setter
    def transparency(self, value: float):
        """Set transparency"""
        self.__transparency = float(value)

    @property
    def meshGridSize(self) -> float:
        """Size of grids in the mesh"""
        return self.__meshGridSize

    @meshGridSize.setter
    def meshGridSize(self, value: float):
        """Set meshGridSize"""
        self.__meshGridSize = float(value)

    @property
    def showMesh(self) -> bool:
        """Show mesh grid on surface"""
        return self.__showMesh

    @showMesh.setter
    def showMesh(self, value: bool):
        """Set showMesh"""
        self.__showMesh = bool(value)

    @property
    def z(self) -> float:
        """Depth of surface"""
        return self.__z

    @z.setter
    def z(self, value: float):
        """Set z"""
        self.__z = float(value)

    @property
    def angle(self) -> float:
        """"""
        return self.__angle

    @angle.setter
    def angle(self, value: float):
        """Set angle"""
        self.__angle = float(value)
