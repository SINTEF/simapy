# This an autogenerated file
# 
# Generated with HLASurface
from typing import Dict,Sequence,List
from dmt.entity import Entity
from dmt.blueprint import Blueprint
from .blueprints.hlasurface import HLASurfaceBlueprint
from sima.hla.hlaobject import HLAObject
from sima.hla.surfacetype import SurfaceType
from sima.sima.scriptablevalue import ScriptableValue

class HLASurface(HLAObject):
    """
    Keyword arguments
    -----------------
    name : str
         (default "")
    description : str
         (default "")
    _id : str
         (default "")
    scriptableValues : List[ScriptableValue]
    _type : SurfaceType
    transparency : float
         (default 0.0)
    sizeX : float
         (default 0.0)
    sizeY : float
         (default 0.0)
    """

    def __init__(self , name:str="", description:str="", _id:str="", _type:SurfaceType=SurfaceType.OCEAN_SURFACE, transparency:float=0.0, sizeX:float=0.0, sizeY:float=0.0, **kwargs):
        super().__init__(**kwargs)
        self.__name = name
        self.__description = description
        self.___id = _id
        self.__scriptableValues = list()
        self.___type = _type
        self.__transparency = transparency
        self.__sizeX = sizeX
        self.__sizeY = sizeY
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return HLASurfaceBlueprint()


    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = str(value)

    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = str(value)

    @property
    def _id(self) -> str:
        """"""
        return self.___id

    @_id.setter
    def _id(self, value: str):
        """Set _id"""
        self.___id = str(value)

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def _type(self) -> SurfaceType:
        """"""
        return self.___type

    @_type.setter
    def _type(self, value: SurfaceType):
        """Set _type"""
        self.___type = value

    @property
    def transparency(self) -> float:
        """"""
        return self.__transparency

    @transparency.setter
    def transparency(self, value: float):
        """Set transparency"""
        self.__transparency = float(value)

    @property
    def sizeX(self) -> float:
        """"""
        return self.__sizeX

    @sizeX.setter
    def sizeX(self, value: float):
        """Set sizeX"""
        self.__sizeX = float(value)

    @property
    def sizeY(self) -> float:
        """"""
        return self.__sizeY

    @sizeY.setter
    def sizeY(self, value: float):
        """Set sizeY"""
        self.__sizeY = float(value)
