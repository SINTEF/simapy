# This an autogenerated file
# 
# Generated with HLAPlot
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.hlaplot import HLAPlotBlueprint
from numpy import ndarray,asarray
from sima.hla.hlaobject import HLAObject
from sima.hla.range import Range
from sima.sima.scriptablevalue import ScriptableValue

class HLAPlot(HLAObject):
    """
    Keyword arguments
    -----------------
    _id : str
         (default "")
    scriptableValues : List[ScriptableValue]
    name : str
         (default "")
    curves : ndarray
    crossPlotXAxisValues : str
         (default "")
    minMaxX : Range
    minMaxY : Range
    axisTitleX : str
         (default "")
    axisTitleY : str
         (default "")
    valueTypeX : str
         (default "")
    showTimeMarker : bool
         (default False)
    fadePrecedingCurves : bool
         (default False)
    fadePrecedingCurvesCount : int
         (default 5)
    """

    def __init__(self , _id="", name="", crossPlotXAxisValues="", axisTitleX="", axisTitleY="", valueTypeX="", showTimeMarker=False, fadePrecedingCurves=False, fadePrecedingCurvesCount=5, **kwargs):
        super().__init__(**kwargs)
        self._id = _id
        self.scriptableValues = list()
        self.name = name
        self.curves = ndarray(1)
        self.crossPlotXAxisValues = crossPlotXAxisValues
        self.minMaxX = None
        self.minMaxY = None
        self.axisTitleX = axisTitleX
        self.axisTitleY = axisTitleY
        self.valueTypeX = valueTypeX
        self.showTimeMarker = showTimeMarker
        self.fadePrecedingCurves = fadePrecedingCurves
        self.fadePrecedingCurvesCount = fadePrecedingCurvesCount
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return HLAPlotBlueprint()


    @property
    def _id(self) -> str:
        """"""
        return self.___id

    @_id.setter
    def _id(self, value: str):
        """Set _id"""
        self.___id = str(value)

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = str(value)

    @property
    def curves(self) -> ndarray:
        """"""
        return self.__curves

    @curves.setter
    def curves(self, value: ndarray):
        """Set curves"""
        self.__curves = asarray(value)

    @property
    def crossPlotXAxisValues(self) -> str:
        """"""
        return self.__crossPlotXAxisValues

    @crossPlotXAxisValues.setter
    def crossPlotXAxisValues(self, value: str):
        """Set crossPlotXAxisValues"""
        self.__crossPlotXAxisValues = str(value)

    @property
    def minMaxX(self) -> Range:
        """"""
        return self.__minMaxX

    @minMaxX.setter
    def minMaxX(self, value: Range):
        """Set minMaxX"""
        self.__minMaxX = value

    @property
    def minMaxY(self) -> Range:
        """"""
        return self.__minMaxY

    @minMaxY.setter
    def minMaxY(self, value: Range):
        """Set minMaxY"""
        self.__minMaxY = value

    @property
    def axisTitleX(self) -> str:
        """"""
        return self.__axisTitleX

    @axisTitleX.setter
    def axisTitleX(self, value: str):
        """Set axisTitleX"""
        self.__axisTitleX = str(value)

    @property
    def axisTitleY(self) -> str:
        """"""
        return self.__axisTitleY

    @axisTitleY.setter
    def axisTitleY(self, value: str):
        """Set axisTitleY"""
        self.__axisTitleY = str(value)

    @property
    def valueTypeX(self) -> str:
        """"""
        return self.__valueTypeX

    @valueTypeX.setter
    def valueTypeX(self, value: str):
        """Set valueTypeX"""
        self.__valueTypeX = str(value)

    @property
    def showTimeMarker(self) -> bool:
        """"""
        return self.__showTimeMarker

    @showTimeMarker.setter
    def showTimeMarker(self, value: bool):
        """Set showTimeMarker"""
        self.__showTimeMarker = bool(value)

    @property
    def fadePrecedingCurves(self) -> bool:
        """"""
        return self.__fadePrecedingCurves

    @fadePrecedingCurves.setter
    def fadePrecedingCurves(self, value: bool):
        """Set fadePrecedingCurves"""
        self.__fadePrecedingCurves = bool(value)

    @property
    def fadePrecedingCurvesCount(self) -> int:
        """"""
        return self.__fadePrecedingCurvesCount

    @fadePrecedingCurvesCount.setter
    def fadePrecedingCurvesCount(self, value: int):
        """Set fadePrecedingCurvesCount"""
        self.__fadePrecedingCurvesCount = int(value)
