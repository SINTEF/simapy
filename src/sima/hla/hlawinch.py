# This an autogenerated file
# 
# Generated with HLAWinch
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.hlawinch import HLAWinchBlueprint
from typing import Dict
from sima.hla.hlaobject import HLAObject
from sima.sima.scriptablevalue import ScriptableValue

class HLAWinch(HLAObject):
    """
    Keyword arguments
    -----------------
    description : str
         (default "")
    scriptableValues : List[ScriptableValue]
    name : str
         (default None)
    initialLength : float
         Initial wire length at drum(default 0.0)
    maximumSpeed : float
         Max. run velocity for winch(default 0.0)
    acceleration : float
         Max. run acceleration for winch(default 0.0)
    maximumLength : float
         Max. wire length that can be added to drum(default 0.0)
    """

    def __init__(self , description="", initialLength=0.0, maximumSpeed=0.0, acceleration=0.0, maximumLength=0.0, **kwargs):
        super().__init__(**kwargs)
        self.description = description
        self.scriptableValues = list()
        self.name = None
        self.initialLength = initialLength
        self.maximumSpeed = maximumSpeed
        self.acceleration = acceleration
        self.maximumLength = maximumLength
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return HLAWinchBlueprint()


    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = value

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = value

    @property
    def initialLength(self) -> float:
        """Initial wire length at drum"""
        return self.__initialLength

    @initialLength.setter
    def initialLength(self, value: float):
        """Set initialLength"""
        self.__initialLength = float(value)

    @property
    def maximumSpeed(self) -> float:
        """Max. run velocity for winch"""
        return self.__maximumSpeed

    @maximumSpeed.setter
    def maximumSpeed(self, value: float):
        """Set maximumSpeed"""
        self.__maximumSpeed = float(value)

    @property
    def acceleration(self) -> float:
        """Max. run acceleration for winch"""
        return self.__acceleration

    @acceleration.setter
    def acceleration(self, value: float):
        """Set acceleration"""
        self.__acceleration = float(value)

    @property
    def maximumLength(self) -> float:
        """Max. wire length that can be added to drum"""
        return self.__maximumLength

    @maximumLength.setter
    def maximumLength(self, value: float):
        """Set maximumLength"""
        self.__maximumLength = float(value)
