# This an autogenerated file
# 
# Generated with HLAActivePipeRoute
from __future__ import annotations
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.hlaactivepiperoute import HLAActivePipeRouteBlueprint
from typing import Dict
from sima.hla.hlaobject import HLAObject
from sima.sima.scriptablevalue import ScriptableValue
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from sima.sima.simacolor import SIMAColor

class HLAActivePipeRoute(HLAObject):
    """
    Keyword arguments
    -----------------
    _id : str
         (default "")
    scriptableValues : List[ScriptableValue]
    name : str
         (default "")
    fileName : str
         (default "")
    mapOnTerrain : str
         (default "")
    color : SIMAColor
    """

    def __init__(self , _id="", name="", fileName="", mapOnTerrain="", **kwargs):
        super().__init__(**kwargs)
        self._id = _id
        self.scriptableValues = list()
        self.name = name
        self.fileName = fileName
        self.mapOnTerrain = mapOnTerrain
        self.color = None
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return HLAActivePipeRouteBlueprint()


    @property
    def _id(self) -> str:
        """"""
        return self.___id

    @_id.setter
    def _id(self, value: str):
        """Set _id"""
        self.___id = str(value)

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = str(value)

    @property
    def fileName(self) -> str:
        """"""
        return self.__fileName

    @fileName.setter
    def fileName(self, value: str):
        """Set fileName"""
        self.__fileName = str(value)

    @property
    def mapOnTerrain(self) -> str:
        """"""
        return self.__mapOnTerrain

    @mapOnTerrain.setter
    def mapOnTerrain(self, value: str):
        """Set mapOnTerrain"""
        self.__mapOnTerrain = str(value)

    @property
    def color(self) -> SIMAColor:
        """"""
        return self.__color

    @color.setter
    def color(self, value: SIMAColor):
        """Set color"""
        self.__color = value
