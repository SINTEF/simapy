# This an autogenerated file
# 
# Generated with Image
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.image import ImageBlueprint
from typing import Dict
from sima.report.reportitem import ReportItem
from sima.sima.scriptablevalue import ScriptableValue

class Image(ReportItem):
    """
    Keyword arguments
    -----------------
    description : str
         (default "")
    scriptableValues : List[ScriptableValue]
    caption : str
         Caption(default None)
    filePath : str
         Path to the image(default None)
    width : int
         The image witdth in twips (1/1440 inch). If only the width is specified the height will be automatically calculated.(default 0)
    height : int
         The image height in twips (1/1440 inch). If only the width is specified the height will be automatically calculated.(default 0)
    """

    def __init__(self , description="", width=0, height=0, **kwargs):
        super().__init__(**kwargs)
        self.description = description
        self.scriptableValues = list()
        self.caption = None
        self.filePath = None
        self.width = width
        self.height = height
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return ImageBlueprint()


    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = value

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def caption(self) -> str:
        """Caption"""
        return self.__caption

    @caption.setter
    def caption(self, value: str):
        """Set caption"""
        self.__caption = value

    @property
    def filePath(self) -> str:
        """Path to the image"""
        return self.__filePath

    @filePath.setter
    def filePath(self, value: str):
        """Set filePath"""
        self.__filePath = value

    @property
    def width(self) -> int:
        """The image witdth in twips (1/1440 inch). If only the width is specified the height will be automatically calculated."""
        return self.__width

    @width.setter
    def width(self, value: int):
        """Set width"""
        self.__width = int(value)

    @property
    def height(self) -> int:
        """The image height in twips (1/1440 inch). If only the width is specified the height will be automatically calculated."""
        return self.__height

    @height.setter
    def height(self, value: int):
        """Set height"""
        self.__height = int(value)
