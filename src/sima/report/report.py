# This an autogenerated file
# 
# Generated with Report
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.report import ReportBlueprint
from typing import Dict
from sima.report.reportitem import ReportItem
from sima.sima.namedobject import NamedObject
from sima.sima.scriptablevalue import ScriptableValue

class Report(NamedObject):
    """
    Keyword arguments
    -----------------
    _id : str
         (default "")
    scriptableValues : List[ScriptableValue]
    name : str
         (default "")
    items : List[ReportItem]
    title : str
         The title of the report.(default "")
    subtitle : str
         A sub title for the report.(default "")
    filePath : str
         Optional path to the generated report file(default "")
    """

    def __init__(self , _id="", name="", title="", subtitle="", filePath="", **kwargs):
        super().__init__(**kwargs)
        self._id = _id
        self.scriptableValues = list()
        self.name = name
        self.items = list()
        self.title = title
        self.subtitle = subtitle
        self.filePath = filePath
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return ReportBlueprint()


    @property
    def _id(self) -> str:
        """"""
        return self.___id

    @_id.setter
    def _id(self, value: str):
        """Set _id"""
        self.___id = str(value)

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = str(value)

    @property
    def items(self) -> List[ReportItem]:
        """"""
        return self.__items

    @items.setter
    def items(self, value: List[ReportItem]):
        """Set items"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__items = value

    @property
    def title(self) -> str:
        """The title of the report."""
        return self.__title

    @title.setter
    def title(self, value: str):
        """Set title"""
        self.__title = str(value)

    @property
    def subtitle(self) -> str:
        """A sub title for the report."""
        return self.__subtitle

    @subtitle.setter
    def subtitle(self, value: str):
        """Set subtitle"""
        self.__subtitle = str(value)

    @property
    def filePath(self) -> str:
        """Optional path to the generated report file"""
        return self.__filePath

    @filePath.setter
    def filePath(self, value: str):
        """Set filePath"""
        self.__filePath = str(value)
