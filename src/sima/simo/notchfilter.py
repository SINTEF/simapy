# This an autogenerated file
# 
# Generated with NotchFilter
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.notchfilter import NotchFilterBlueprint
from typing import Dict
from sima.sima.scriptablevalue import ScriptableValue
from sima.simo.estimator import Estimator

class NotchFilter(Estimator):
    """
    Keyword arguments
    -----------------
    _id : str
         (default "")
    scriptableValues : List[ScriptableValue]
    centerPeriod : float
         Center period of wave filter(default 10.0)
    strength : float
         Strength of wave filter, between 0 and 1(default 1.0)
    """

    def __init__(self , _id="", centerPeriod=10.0, strength=1.0, **kwargs):
        super().__init__(**kwargs)
        self._id = _id
        self.scriptableValues = list()
        self.centerPeriod = centerPeriod
        self.strength = strength
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return NotchFilterBlueprint()


    @property
    def _id(self) -> str:
        """"""
        return self.___id

    @_id.setter
    def _id(self, value: str):
        """Set _id"""
        self.___id = str(value)

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def centerPeriod(self) -> float:
        """Center period of wave filter"""
        return self.__centerPeriod

    @centerPeriod.setter
    def centerPeriod(self, value: float):
        """Set centerPeriod"""
        self.__centerPeriod = float(value)

    @property
    def strength(self) -> float:
        """Strength of wave filter, between 0 and 1"""
        return self.__strength

    @strength.setter
    def strength(self, value: float):
        """Set strength"""
        self.__strength = float(value)
