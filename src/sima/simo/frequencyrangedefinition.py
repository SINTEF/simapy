# This an autogenerated file
# 
# Generated with FrequencyRangeDefinition
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.frequencyrangedefinition import FrequencyRangeDefinitionBlueprint
from typing import Dict
from sima.sima.moao import MOAO
from sima.sima.scriptablevalue import ScriptableValue

class FrequencyRangeDefinition(MOAO):
    """
    Keyword arguments
    -----------------
    description : str
         (default "")
    scriptableValues : List[ScriptableValue]
    fromPeriod : float
         (default 0.0)
    toPeriod : float
         (default 0.0)
    numberOfPeriods : int
         (default 0)
    """

    def __init__(self , description="", fromPeriod=0.0, toPeriod=0.0, numberOfPeriods=0, **kwargs):
        super().__init__(**kwargs)
        self.description = description
        self.scriptableValues = list()
        self.fromPeriod = fromPeriod
        self.toPeriod = toPeriod
        self.numberOfPeriods = numberOfPeriods
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return FrequencyRangeDefinitionBlueprint()


    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = value

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def fromPeriod(self) -> float:
        """"""
        return self.__fromPeriod

    @fromPeriod.setter
    def fromPeriod(self, value: float):
        """Set fromPeriod"""
        self.__fromPeriod = float(value)

    @property
    def toPeriod(self) -> float:
        """"""
        return self.__toPeriod

    @toPeriod.setter
    def toPeriod(self, value: float):
        """Set toPeriod"""
        self.__toPeriod = float(value)

    @property
    def numberOfPeriods(self) -> int:
        """"""
        return self.__numberOfPeriods

    @numberOfPeriods.setter
    def numberOfPeriods(self, value: int):
        """Set numberOfPeriods"""
        self.__numberOfPeriods = int(value)
