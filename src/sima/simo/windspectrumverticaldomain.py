# This an autogenerated file
# 
# Generated with WindSpectrumVerticalDomain
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.windspectrumverticaldomain import WindSpectrumVerticalDomainBlueprint
from typing import Dict
from sima.sima.moao import MOAO
from sima.sima.scriptablevalue import ScriptableValue

class WindSpectrumVerticalDomain(MOAO):
    """
    Keyword arguments
    -----------------
    _id : str
         (default "")
    scriptableValues : List[ScriptableValue]
    specifyVerticalDomain : bool
         Should a vertical grid for interpolation of wind velocity be specified?(default False)
    numberOfLevels : int
         Number of vertical levels to pre-generate wind time series for(default 0)
    zMinimum : float
         Lower limit of vertical domain(default 0.0)
    zMaximum : float
         Upper limit of vertical domain(default 0.0)
    allowOutsideDomain : bool
         Should computation of wind velocity outside specified limits be allowed?(default False)
    """

    def __init__(self , _id="", specifyVerticalDomain=False, numberOfLevels=0, zMinimum=0.0, zMaximum=0.0, allowOutsideDomain=False, **kwargs):
        super().__init__(**kwargs)
        self._id = _id
        self.scriptableValues = list()
        self.specifyVerticalDomain = specifyVerticalDomain
        self.numberOfLevels = numberOfLevels
        self.zMinimum = zMinimum
        self.zMaximum = zMaximum
        self.allowOutsideDomain = allowOutsideDomain
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return WindSpectrumVerticalDomainBlueprint()


    @property
    def _id(self) -> str:
        """"""
        return self.___id

    @_id.setter
    def _id(self, value: str):
        """Set _id"""
        self.___id = str(value)

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def specifyVerticalDomain(self) -> bool:
        """Should a vertical grid for interpolation of wind velocity be specified?"""
        return self.__specifyVerticalDomain

    @specifyVerticalDomain.setter
    def specifyVerticalDomain(self, value: bool):
        """Set specifyVerticalDomain"""
        self.__specifyVerticalDomain = bool(value)

    @property
    def numberOfLevels(self) -> int:
        """Number of vertical levels to pre-generate wind time series for"""
        return self.__numberOfLevels

    @numberOfLevels.setter
    def numberOfLevels(self, value: int):
        """Set numberOfLevels"""
        self.__numberOfLevels = int(value)

    @property
    def zMinimum(self) -> float:
        """Lower limit of vertical domain"""
        return self.__zMinimum

    @zMinimum.setter
    def zMinimum(self, value: float):
        """Set zMinimum"""
        self.__zMinimum = float(value)

    @property
    def zMaximum(self) -> float:
        """Upper limit of vertical domain"""
        return self.__zMaximum

    @zMaximum.setter
    def zMaximum(self, value: float):
        """Set zMaximum"""
        self.__zMaximum = float(value)

    @property
    def allowOutsideDomain(self) -> bool:
        """Should computation of wind velocity outside specified limits be allowed?"""
        return self.__allowOutsideDomain

    @allowOutsideDomain.setter
    def allowOutsideDomain(self, value: bool):
        """Set allowOutsideDomain"""
        self.__allowOutsideDomain = bool(value)
