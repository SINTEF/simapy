# This an autogenerated file
# 
# Generated with CatenarySystem
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.catenarysystem import CatenarySystemBlueprint
from typing import Dict
from sima.sima.moao import MOAO
from sima.sima.scriptablevalue import ScriptableValue
from sima.simo.buoytype import BuoyType
from sima.simo.catenaryline import CatenaryLine
from sima.simo.directinputlinetype import DirectInputLineType
from sima.simo.elongationcharacteristic import ElongationCharacteristic
from sima.simo.segmentedlinetype import SegmentedLineType

class CatenarySystem(MOAO):
    """
    Keyword arguments
    -----------------
    description : str
         (default "")
    scriptableValues : List[ScriptableValue]
    elongationCharacteristics : List[ElongationCharacteristic]
    lines : List[CatenaryLine]
    segmentedLineTypes : List[SegmentedLineType]
    buoys : List[BuoyType]
    directInputLineTypes : List[DirectInputLineType]
    """

    def __init__(self , description="", **kwargs):
        super().__init__(**kwargs)
        self.description = description
        self.scriptableValues = list()
        self.elongationCharacteristics = list()
        self.lines = list()
        self.segmentedLineTypes = list()
        self.buoys = list()
        self.directInputLineTypes = list()
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return CatenarySystemBlueprint()


    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = value

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def elongationCharacteristics(self) -> List[ElongationCharacteristic]:
        """"""
        return self.__elongationCharacteristics

    @elongationCharacteristics.setter
    def elongationCharacteristics(self, value: List[ElongationCharacteristic]):
        """Set elongationCharacteristics"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__elongationCharacteristics = value

    @property
    def lines(self) -> List[CatenaryLine]:
        """"""
        return self.__lines

    @lines.setter
    def lines(self, value: List[CatenaryLine]):
        """Set lines"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__lines = value

    @property
    def segmentedLineTypes(self) -> List[SegmentedLineType]:
        """"""
        return self.__segmentedLineTypes

    @segmentedLineTypes.setter
    def segmentedLineTypes(self, value: List[SegmentedLineType]):
        """Set segmentedLineTypes"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__segmentedLineTypes = value

    @property
    def buoys(self) -> List[BuoyType]:
        """"""
        return self.__buoys

    @buoys.setter
    def buoys(self, value: List[BuoyType]):
        """Set buoys"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__buoys = value

    @property
    def directInputLineTypes(self) -> List[DirectInputLineType]:
        """"""
        return self.__directInputLineTypes

    @directInputLineTypes.setter
    def directInputLineTypes(self, value: List[DirectInputLineType]):
        """Set directInputLineTypes"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__directInputLineTypes = value
