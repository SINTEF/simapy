# This an autogenerated file
# 
# Generated with TimeSimulationResult
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.timesimulationresult import TimeSimulationResultBlueprint
from typing import Dict
from sima.sima.property import Property
from sima.sima.result import Result
from sima.sima.scriptablevalue import ScriptableValue
from sima.sima.simamessage import SimaMessage

class TimeSimulationResult(Result):
    """
    Keyword arguments
    -----------------
    description : str
         (default "")
    scriptableValues : List[ScriptableValue]
    name : str
         (default None)
    properties : List[Property]
    resource : str
         (default None)
    relative : bool
         (default False)
    _type : str
         (default None)
    time : int
         (default -1)
    size : int
         (default -1)
    runNumber : int
         (default -1)
    messages : List[SimaMessage]
    """

    def __init__(self , description="", relative=False, time=-1, size=-1, runNumber=-1, **kwargs):
        super().__init__(**kwargs)
        self.description = description
        self.scriptableValues = list()
        self.name = None
        self.properties = list()
        self.resource = None
        self.relative = relative
        self._type = None
        self.time = time
        self.size = size
        self.runNumber = runNumber
        self.messages = list()
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return TimeSimulationResultBlueprint()


    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = value

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = value

    @property
    def properties(self) -> List[Property]:
        """"""
        return self.__properties

    @properties.setter
    def properties(self, value: List[Property]):
        """Set properties"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__properties = value

    @property
    def resource(self) -> str:
        """"""
        return self.__resource

    @resource.setter
    def resource(self, value: str):
        """Set resource"""
        self.__resource = value

    @property
    def relative(self) -> bool:
        """"""
        return self.__relative

    @relative.setter
    def relative(self, value: bool):
        """Set relative"""
        self.__relative = bool(value)

    @property
    def _type(self) -> str:
        """"""
        return self.___type

    @_type.setter
    def _type(self, value: str):
        """Set _type"""
        self.___type = value

    @property
    def time(self) -> int:
        """"""
        return self.__time

    @time.setter
    def time(self, value: int):
        """Set time"""
        self.__time = int(value)

    @property
    def size(self) -> int:
        """"""
        return self.__size

    @size.setter
    def size(self, value: int):
        """Set size"""
        self.__size = int(value)

    @property
    def runNumber(self) -> int:
        """"""
        return self.__runNumber

    @runNumber.setter
    def runNumber(self, value: int):
        """Set runNumber"""
        self.__runNumber = int(value)

    @property
    def messages(self) -> List[SimaMessage]:
        """"""
        return self.__messages

    @messages.setter
    def messages(self, value: List[SimaMessage]):
        """Set messages"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__messages = value
