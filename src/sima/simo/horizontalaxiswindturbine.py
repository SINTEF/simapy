# This an autogenerated file
# 
# Generated with HorizontalAxisWindTurbine
from __future__ import annotations
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.horizontalaxiswindturbine import HorizontalAxisWindTurbineBlueprint
from typing import Dict
from sima.sima.namedobject import NamedObject
from sima.sima.scriptablevalue import ScriptableValue
from sima.simo.bladeitem import BladeItem
from sima.windturbine.horizontalaxiswindturbinecontroller import HorizontalAxisWindTurbineController
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from sima.simo.momentcoupling import MomentCoupling

class HorizontalAxisWindTurbine(NamedObject):
    """
    Keyword arguments
    -----------------
    description : str
         (default "")
    scriptableValues : List[ScriptableValue]
    name : str
         (default None)
    controller : HorizontalAxisWindTurbineController
    momentCoupling : MomentCoupling
    referenceHeight : float
         Reference height for calculation of wind(default 0.0)
    windArea : float
         Wind area admittance function(default 0.0)
    outerAirfoilRadius : float
         Outer airfoil radius(default 0.0)
    coneAngle : float
         Cone angle(default 0.0)
    bladeItems : List[BladeItem]
    numBlades : int
         Number of blades(default 0)
    """

    def __init__(self , description="", referenceHeight=0.0, windArea=0.0, outerAirfoilRadius=0.0, coneAngle=0.0, numBlades=0, **kwargs):
        super().__init__(**kwargs)
        self.description = description
        self.scriptableValues = list()
        self.name = None
        self.controller = None
        self.momentCoupling = None
        self.referenceHeight = referenceHeight
        self.windArea = windArea
        self.outerAirfoilRadius = outerAirfoilRadius
        self.coneAngle = coneAngle
        self.bladeItems = list()
        self.numBlades = numBlades
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return HorizontalAxisWindTurbineBlueprint()


    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = value

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = value

    @property
    def controller(self) -> HorizontalAxisWindTurbineController:
        """"""
        return self.__controller

    @controller.setter
    def controller(self, value: HorizontalAxisWindTurbineController):
        """Set controller"""
        self.__controller = value

    @property
    def momentCoupling(self) -> MomentCoupling:
        """"""
        return self.__momentCoupling

    @momentCoupling.setter
    def momentCoupling(self, value: MomentCoupling):
        """Set momentCoupling"""
        self.__momentCoupling = value

    @property
    def referenceHeight(self) -> float:
        """Reference height for calculation of wind"""
        return self.__referenceHeight

    @referenceHeight.setter
    def referenceHeight(self, value: float):
        """Set referenceHeight"""
        self.__referenceHeight = float(value)

    @property
    def windArea(self) -> float:
        """Wind area admittance function"""
        return self.__windArea

    @windArea.setter
    def windArea(self, value: float):
        """Set windArea"""
        self.__windArea = float(value)

    @property
    def outerAirfoilRadius(self) -> float:
        """Outer airfoil radius"""
        return self.__outerAirfoilRadius

    @outerAirfoilRadius.setter
    def outerAirfoilRadius(self, value: float):
        """Set outerAirfoilRadius"""
        self.__outerAirfoilRadius = float(value)

    @property
    def coneAngle(self) -> float:
        """Cone angle"""
        return self.__coneAngle

    @coneAngle.setter
    def coneAngle(self, value: float):
        """Set coneAngle"""
        self.__coneAngle = float(value)

    @property
    def bladeItems(self) -> List[BladeItem]:
        """"""
        return self.__bladeItems

    @bladeItems.setter
    def bladeItems(self, value: List[BladeItem]):
        """Set bladeItems"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__bladeItems = value

    @property
    def numBlades(self) -> int:
        """Number of blades"""
        return self.__numBlades

    @numBlades.setter
    def numBlades(self, value: int):
        """Set numBlades"""
        self.__numBlades = int(value)
