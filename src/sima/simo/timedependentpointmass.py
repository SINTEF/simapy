# This an autogenerated file
# 
# Generated with TimeDependentPointMass
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.timedependentpointmass import TimeDependentPointMassBlueprint
from typing import Dict
from sima.sima.namedobject import NamedObject
from sima.sima.point3 import Point3
from sima.sima.scriptablevalue import ScriptableValue
from sima.simo.flowrateitem import FlowRateItem

class TimeDependentPointMass(NamedObject):
    """
    Keyword arguments
    -----------------
    _id : str
         (default "")
    scriptableValues : List[ScriptableValue]
    name : str
         (default "")
    point : Point3
         Mass point (local coordinates).
    flowRates : List[FlowRateItem]
    mass0 : float
         Mass at t=0 (may be negative).(default 0.0)
    massMax : float
         Maximum allowable mass Mass, (may be negative).(default 0.0)
    massMin : float
         Minimum allowable mass Mass, (may be negative).(default 0.0)
    massRateMax : float
         Maximum allowable mass rate, (may be negative) (HLA only).(default 0.0)
    massRateMin : float
         Minimum allowable mass rate, (may be negative) (HLA only).(default 0.0)
    """

    def __init__(self , _id="", name="", mass0=0.0, massMax=0.0, massMin=0.0, massRateMax=0.0, massRateMin=0.0, **kwargs):
        super().__init__(**kwargs)
        self._id = _id
        self.scriptableValues = list()
        self.name = name
        self.point = None
        self.flowRates = list()
        self.mass0 = mass0
        self.massMax = massMax
        self.massMin = massMin
        self.massRateMax = massRateMax
        self.massRateMin = massRateMin
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return TimeDependentPointMassBlueprint()


    @property
    def _id(self) -> str:
        """"""
        return self.___id

    @_id.setter
    def _id(self, value: str):
        """Set _id"""
        self.___id = str(value)

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = str(value)

    @property
    def point(self) -> Point3:
        """Mass point (local coordinates)."""
        return self.__point

    @point.setter
    def point(self, value: Point3):
        """Set point"""
        self.__point = value

    @property
    def flowRates(self) -> List[FlowRateItem]:
        """"""
        return self.__flowRates

    @flowRates.setter
    def flowRates(self, value: List[FlowRateItem]):
        """Set flowRates"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__flowRates = value

    @property
    def mass0(self) -> float:
        """Mass at t=0 (may be negative)."""
        return self.__mass0

    @mass0.setter
    def mass0(self, value: float):
        """Set mass0"""
        self.__mass0 = float(value)

    @property
    def massMax(self) -> float:
        """Maximum allowable mass Mass, (may be negative)."""
        return self.__massMax

    @massMax.setter
    def massMax(self, value: float):
        """Set massMax"""
        self.__massMax = float(value)

    @property
    def massMin(self) -> float:
        """Minimum allowable mass Mass, (may be negative)."""
        return self.__massMin

    @massMin.setter
    def massMin(self, value: float):
        """Set massMin"""
        self.__massMin = float(value)

    @property
    def massRateMax(self) -> float:
        """Maximum allowable mass rate, (may be negative) (HLA only)."""
        return self.__massRateMax

    @massRateMax.setter
    def massRateMax(self, value: float):
        """Set massRateMax"""
        self.__massRateMax = float(value)

    @property
    def massRateMin(self) -> float:
        """Minimum allowable mass rate, (may be negative) (HLA only)."""
        return self.__massRateMin

    @massRateMin.setter
    def massRateMin(self, value: float):
        """Set massRateMin"""
        self.__massRateMin = float(value)
