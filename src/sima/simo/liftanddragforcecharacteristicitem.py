# This an autogenerated file
# 
# Generated with LiftAndDragForceCharacteristicItem
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.liftanddragforcecharacteristicitem import LiftAndDragForceCharacteristicItemBlueprint
from typing import Dict
from sima.sima.moao import MOAO
from sima.sima.scriptablevalue import ScriptableValue

class LiftAndDragForceCharacteristicItem(MOAO):
    """
    Keyword arguments
    -----------------
    description : str
         (default "")
    scriptableValues : List[ScriptableValue]
    velocityDirection : float
         Velocity direction relative to rudder x-axis(default 0.0)
    forceX : float
         Quadratic force coefficient in rudder x-direction(default 0.0)
    forceY : float
         Quadratic force coefficient in rudder y-direction(default 0.0)
    momentZ : float
         Quadratic moment coefficient about rudder z-axis(default 0.0)
    """

    def __init__(self , description="", velocityDirection=0.0, forceX=0.0, forceY=0.0, momentZ=0.0, **kwargs):
        super().__init__(**kwargs)
        self.description = description
        self.scriptableValues = list()
        self.velocityDirection = velocityDirection
        self.forceX = forceX
        self.forceY = forceY
        self.momentZ = momentZ
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return LiftAndDragForceCharacteristicItemBlueprint()


    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = value

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def velocityDirection(self) -> float:
        """Velocity direction relative to rudder x-axis"""
        return self.__velocityDirection

    @velocityDirection.setter
    def velocityDirection(self, value: float):
        """Set velocityDirection"""
        self.__velocityDirection = float(value)

    @property
    def forceX(self) -> float:
        """Quadratic force coefficient in rudder x-direction"""
        return self.__forceX

    @forceX.setter
    def forceX(self, value: float):
        """Set forceX"""
        self.__forceX = float(value)

    @property
    def forceY(self) -> float:
        """Quadratic force coefficient in rudder y-direction"""
        return self.__forceY

    @forceY.setter
    def forceY(self, value: float):
        """Set forceY"""
        self.__forceY = float(value)

    @property
    def momentZ(self) -> float:
        """Quadratic moment coefficient about rudder z-axis"""
        return self.__momentZ

    @momentZ.setter
    def momentZ(self, value: float):
        """Set momentZ"""
        self.__momentZ = float(value)
