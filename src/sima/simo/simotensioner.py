# This an autogenerated file
# 
# Generated with SIMOTensioner
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.simotensioner import SIMOTensionerBlueprint
from typing import Dict
from sima.sima.namedobject import NamedObject
from sima.sima.scriptablevalue import ScriptableValue

class SIMOTensioner(NamedObject):
    """
    Keyword arguments
    -----------------
    _id : str
         (default "")
    scriptableValues : List[ScriptableValue]
    name : str
         (default "")
    pretension : float
         Pretension in tensioner(default 0.0)
    maxRate : float
         Max. rate of change in pretension(default 0.0)
    stiffness : float
         Stiffness at specified pretension(default 0.0)
    strokeLength : float
         Stiffness at specified pretension(default 0.0)
    """

    def __init__(self , _id="", name="", pretension=0.0, maxRate=0.0, stiffness=0.0, strokeLength=0.0, **kwargs):
        super().__init__(**kwargs)
        self._id = _id
        self.scriptableValues = list()
        self.name = name
        self.pretension = pretension
        self.maxRate = maxRate
        self.stiffness = stiffness
        self.strokeLength = strokeLength
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return SIMOTensionerBlueprint()


    @property
    def _id(self) -> str:
        """"""
        return self.___id

    @_id.setter
    def _id(self, value: str):
        """Set _id"""
        self.___id = str(value)

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = str(value)

    @property
    def pretension(self) -> float:
        """Pretension in tensioner"""
        return self.__pretension

    @pretension.setter
    def pretension(self, value: float):
        """Set pretension"""
        self.__pretension = float(value)

    @property
    def maxRate(self) -> float:
        """Max. rate of change in pretension"""
        return self.__maxRate

    @maxRate.setter
    def maxRate(self, value: float):
        """Set maxRate"""
        self.__maxRate = float(value)

    @property
    def stiffness(self) -> float:
        """Stiffness at specified pretension"""
        return self.__stiffness

    @stiffness.setter
    def stiffness(self, value: float):
        """Set stiffness"""
        self.__stiffness = float(value)

    @property
    def strokeLength(self) -> float:
        """Stiffness at specified pretension"""
        return self.__strokeLength

    @strokeLength.setter
    def strokeLength(self, value: float):
        """Set strokeLength"""
        self.__strokeLength = float(value)
