# This an autogenerated file
# 
# Generated with SoilCapacityElement
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.soilcapacityelement import SoilCapacityElementBlueprint
from typing import Dict
from sima.sima.moao import MOAO
from sima.sima.scriptablevalue import ScriptableValue

class SoilCapacityElement(MOAO):
    """
    Keyword arguments
    -----------------
    description : str
         (default "")
    scriptableValues : List[ScriptableValue]
    dCap : float
         Penetration relative to ZCONT (positive upwards)(default 0.0)
    soilFr : float
         Soil capacity against failure at soil surface(default 0.0)
    frcDep : float
         Depth of each new soil failure(default 0.0)
    pSuct : float
         Suction pressure(default 0.0)
    """

    def __init__(self , description="", dCap=0.0, soilFr=0.0, frcDep=0.0, pSuct=0.0, **kwargs):
        super().__init__(**kwargs)
        self.description = description
        self.scriptableValues = list()
        self.dCap = dCap
        self.soilFr = soilFr
        self.frcDep = frcDep
        self.pSuct = pSuct
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return SoilCapacityElementBlueprint()


    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = value

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def dCap(self) -> float:
        """Penetration relative to ZCONT (positive upwards)"""
        return self.__dCap

    @dCap.setter
    def dCap(self, value: float):
        """Set dCap"""
        self.__dCap = float(value)

    @property
    def soilFr(self) -> float:
        """Soil capacity against failure at soil surface"""
        return self.__soilFr

    @soilFr.setter
    def soilFr(self, value: float):
        """Set soilFr"""
        self.__soilFr = float(value)

    @property
    def frcDep(self) -> float:
        """Depth of each new soil failure"""
        return self.__frcDep

    @frcDep.setter
    def frcDep(self, value: float):
        """Set frcDep"""
        self.__frcDep = float(value)

    @property
    def pSuct(self) -> float:
        """Suction pressure"""
        return self.__pSuct

    @pSuct.setter
    def pSuct(self, value: float):
        """Set pSuct"""
        self.__pSuct = float(value)
