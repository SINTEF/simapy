# This an autogenerated file
# 
# Generated with FibreRopeModel
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.fibreropemodel import FibreRopeModelBlueprint
from typing import Dict
from sima.sima.namedobject import NamedObject
from sima.sima.scriptablevalue import ScriptableValue
from sima.simo.axialstiffnessitem import AxialStiffnessItem

class FibreRopeModel(NamedObject):
    """
    Keyword arguments
    -----------------
    _id : str
         (default "")
    scriptableValues : List[ScriptableValue]
    name : str
         (default "")
    originalCurve : List[AxialStiffnessItem]
    originalWorkingCurve : List[AxialStiffnessItem]
    workingCurve : List[AxialStiffnessItem]
    dynamicStiffnessCoefficientA : float
         (default 0.0)
    dynamicStiffnessCoefficientB : float
         (default 0.0)
    """

    def __init__(self , _id="", name="", dynamicStiffnessCoefficientA=0.0, dynamicStiffnessCoefficientB=0.0, **kwargs):
        super().__init__(**kwargs)
        self._id = _id
        self.scriptableValues = list()
        self.name = name
        self.originalCurve = list()
        self.originalWorkingCurve = list()
        self.workingCurve = list()
        self.dynamicStiffnessCoefficientA = dynamicStiffnessCoefficientA
        self.dynamicStiffnessCoefficientB = dynamicStiffnessCoefficientB
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return FibreRopeModelBlueprint()


    @property
    def _id(self) -> str:
        """"""
        return self.___id

    @_id.setter
    def _id(self, value: str):
        """Set _id"""
        self.___id = str(value)

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = str(value)

    @property
    def originalCurve(self) -> List[AxialStiffnessItem]:
        """"""
        return self.__originalCurve

    @originalCurve.setter
    def originalCurve(self, value: List[AxialStiffnessItem]):
        """Set originalCurve"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__originalCurve = value

    @property
    def originalWorkingCurve(self) -> List[AxialStiffnessItem]:
        """"""
        return self.__originalWorkingCurve

    @originalWorkingCurve.setter
    def originalWorkingCurve(self, value: List[AxialStiffnessItem]):
        """Set originalWorkingCurve"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__originalWorkingCurve = value

    @property
    def workingCurve(self) -> List[AxialStiffnessItem]:
        """"""
        return self.__workingCurve

    @workingCurve.setter
    def workingCurve(self, value: List[AxialStiffnessItem]):
        """Set workingCurve"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__workingCurve = value

    @property
    def dynamicStiffnessCoefficientA(self) -> float:
        """"""
        return self.__dynamicStiffnessCoefficientA

    @dynamicStiffnessCoefficientA.setter
    def dynamicStiffnessCoefficientA(self, value: float):
        """Set dynamicStiffnessCoefficientA"""
        self.__dynamicStiffnessCoefficientA = float(value)

    @property
    def dynamicStiffnessCoefficientB(self) -> float:
        """"""
        return self.__dynamicStiffnessCoefficientB

    @dynamicStiffnessCoefficientB.setter
    def dynamicStiffnessCoefficientB(self, value: float):
        """Set dynamicStiffnessCoefficientB"""
        self.__dynamicStiffnessCoefficientB = float(value)
