# This an autogenerated file
# 
# Generated with MultiEnvironment
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.multienvironment import MultiEnvironmentBlueprint
from typing import Dict
from sima.environment.environment import Environment
from sima.sima.scriptablevalue import ScriptableValue
from sima.simo.multienvironmentitem import MultiEnvironmentItem

class MultiEnvironment(Environment):
    """
    Keyword arguments
    -----------------
    description : str
         (default "")
    scriptableValues : List[ScriptableValue]
    name : str
         (default None)
    items : List[MultiEnvironmentItem]
    """

    def __init__(self , description="", **kwargs):
        super().__init__(**kwargs)
        self.description = description
        self.scriptableValues = list()
        self.name = None
        self.items = list()
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return MultiEnvironmentBlueprint()


    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = value

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = value

    @property
    def items(self) -> List[MultiEnvironmentItem]:
        """"""
        return self.__items

    @items.setter
    def items(self, value: List[MultiEnvironmentItem]):
        """Set items"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__items = value
