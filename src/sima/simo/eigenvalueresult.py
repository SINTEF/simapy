# This an autogenerated file
# 
# Generated with EigenvalueResult
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.eigenvalueresult import EigenvalueResultBlueprint
from typing import Dict
from sima.sima.moao import MOAO
from sima.sima.scriptablevalue import ScriptableValue
from sima.simo.bodyeigenvalueresult import BodyEigenvalueResult

class EigenvalueResult(MOAO):
    """
    Keyword arguments
    -----------------
    description : str
         (default "")
    scriptableValues : List[ScriptableValue]
    bodyResults : List[BodyEigenvalueResult]
    """

    def __init__(self , description="", **kwargs):
        super().__init__(**kwargs)
        self.description = description
        self.scriptableValues = list()
        self.bodyResults = list()
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return EigenvalueResultBlueprint()


    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = value

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def bodyResults(self) -> List[BodyEigenvalueResult]:
        """"""
        return self.__bodyResults

    @bodyResults.setter
    def bodyResults(self, value: List[BodyEigenvalueResult]):
        """Set bodyResults"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__bodyResults = value
