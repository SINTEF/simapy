# This an autogenerated file
# 
# Generated with ExternalControlSystem
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.externalcontrolsystem import ExternalControlSystemBlueprint
from typing import Dict
from sima.sima.moao import MOAO
from sima.sima.scriptablevalue import ScriptableValue
from sima.simo.nameddoubleparameter import NamedDoubleParameter
from sima.simo.namedintparameter import NamedIntParameter
from sima.simo.namedstringparameter import NamedStringParameter

class ExternalControlSystem(MOAO):
    """
    Keyword arguments
    -----------------
    _id : str
         (default "")
    scriptableValues : List[ScriptableValue]
    intParameters : List[NamedIntParameter]
    doubleParameters : List[NamedDoubleParameter]
    stringParameters : List[NamedStringParameter]
    """

    def __init__(self , _id="", **kwargs):
        super().__init__(**kwargs)
        self._id = _id
        self.scriptableValues = list()
        self.intParameters = list()
        self.doubleParameters = list()
        self.stringParameters = list()
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return ExternalControlSystemBlueprint()


    @property
    def _id(self) -> str:
        """"""
        return self.___id

    @_id.setter
    def _id(self, value: str):
        """Set _id"""
        self.___id = str(value)

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def intParameters(self) -> List[NamedIntParameter]:
        """"""
        return self.__intParameters

    @intParameters.setter
    def intParameters(self, value: List[NamedIntParameter]):
        """Set intParameters"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__intParameters = value

    @property
    def doubleParameters(self) -> List[NamedDoubleParameter]:
        """"""
        return self.__doubleParameters

    @doubleParameters.setter
    def doubleParameters(self, value: List[NamedDoubleParameter]):
        """Set doubleParameters"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__doubleParameters = value

    @property
    def stringParameters(self) -> List[NamedStringParameter]:
        """"""
        return self.__stringParameters

    @stringParameters.setter
    def stringParameters(self, value: List[NamedStringParameter]):
        """Set stringParameters"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__stringParameters = value
