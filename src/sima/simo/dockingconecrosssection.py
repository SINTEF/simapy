# This an autogenerated file
# 
# Generated with DockingConeCrossSection
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.dockingconecrosssection import DockingConeCrossSectionBlueprint
from typing import Dict
from sima.sima.moao import MOAO
from sima.sima.scriptablevalue import ScriptableValue
from sima.simo.forcedampingitem import ForceDampingItem

class DockingConeCrossSection(MOAO):
    """
    Keyword arguments
    -----------------
    _id : str
         (default "")
    scriptableValues : List[ScriptableValue]
    axialDistance : float
         Axial point, axial distance from end(default 0.0)
    items : List[ForceDampingItem]
    """

    def __init__(self , _id="", axialDistance=0.0, **kwargs):
        super().__init__(**kwargs)
        self._id = _id
        self.scriptableValues = list()
        self.axialDistance = axialDistance
        self.items = list()
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return DockingConeCrossSectionBlueprint()


    @property
    def _id(self) -> str:
        """"""
        return self.___id

    @_id.setter
    def _id(self, value: str):
        """Set _id"""
        self.___id = str(value)

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def axialDistance(self) -> float:
        """Axial point, axial distance from end"""
        return self.__axialDistance

    @axialDistance.setter
    def axialDistance(self, value: float):
        """Set axialDistance"""
        self.__axialDistance = float(value)

    @property
    def items(self) -> List[ForceDampingItem]:
        """"""
        return self.__items

    @items.setter
    def items(self, value: List[ForceDampingItem]):
        """Set items"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__items = value
