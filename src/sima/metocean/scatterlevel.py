# This an autogenerated file
# 
# Generated with ScatterLevel
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.scatterlevel import ScatterLevelBlueprint
from typing import Dict
from sima.metocean.scatterdiagram import ScatterDiagram
from sima.sima.moao import MOAO
from sima.sima.scriptablevalue import ScriptableValue

class ScatterLevel(MOAO):
    """
    Keyword arguments
    -----------------
    description : str
         (default "")
    scriptableValues : List[ScriptableValue]
    level : float
         (default 0.0)
    scatterDiagrams : List[ScatterDiagram]
    """

    def __init__(self , description="", level=0.0, **kwargs):
        super().__init__(**kwargs)
        self.description = description
        self.scriptableValues = list()
        self.level = level
        self.scatterDiagrams = list()
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return ScatterLevelBlueprint()


    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = value

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def level(self) -> float:
        """"""
        return self.__level

    @level.setter
    def level(self, value: float):
        """Set level"""
        self.__level = float(value)

    @property
    def scatterDiagrams(self) -> List[ScatterDiagram]:
        """"""
        return self.__scatterDiagrams

    @scatterDiagrams.setter
    def scatterDiagrams(self, value: List[ScatterDiagram]):
        """Set scatterDiagrams"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scatterDiagrams = value
