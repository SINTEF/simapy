# This an autogenerated file
# 
# Generated with LongTermStatisticsWindCalculation
from __future__ import annotations
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.longtermstatisticswindcalculation import LongTermStatisticsWindCalculationBlueprint
from typing import Dict
from sima.metocean.calculationlevel import CalculationLevel
from sima.metocean.levelstatisticsmethod import LevelStatisticsMethod
from sima.sima.moao import MOAO
from sima.sima.scriptablevalue import ScriptableValue
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from sima.metocean.windlongtermstatistics import WindLongTermStatistics

class LongTermStatisticsWindCalculation(MOAO):
    """
    Keyword arguments
    -----------------
    description : str
         (default "")
    scriptableValues : List[ScriptableValue]
    returnPeriod : float
         (default 0.0)
    levels : List[CalculationLevel]
    method : LevelStatisticsMethod
    omniMethod : LevelStatisticsMethod
    directionRelativeToWave : float
         (default 0.0)
    statistics : WindLongTermStatistics
    omni : WindLongTermStatistics
    """

    def __init__(self , description="", returnPeriod=0.0, method=LevelStatisticsMethod.FROM_DISTRIBUTION, omniMethod=LevelStatisticsMethod.FROM_DISTRIBUTION, directionRelativeToWave=0.0, **kwargs):
        super().__init__(**kwargs)
        self.description = description
        self.scriptableValues = list()
        self.returnPeriod = returnPeriod
        self.levels = list()
        self.method = method
        self.omniMethod = omniMethod
        self.directionRelativeToWave = directionRelativeToWave
        self.statistics = None
        self.omni = None
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return LongTermStatisticsWindCalculationBlueprint()


    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = value

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def returnPeriod(self) -> float:
        """"""
        return self.__returnPeriod

    @returnPeriod.setter
    def returnPeriod(self, value: float):
        """Set returnPeriod"""
        self.__returnPeriod = float(value)

    @property
    def levels(self) -> List[CalculationLevel]:
        """"""
        return self.__levels

    @levels.setter
    def levels(self, value: List[CalculationLevel]):
        """Set levels"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__levels = value

    @property
    def method(self) -> LevelStatisticsMethod:
        """"""
        return self.__method

    @method.setter
    def method(self, value: LevelStatisticsMethod):
        """Set method"""
        self.__method = value

    @property
    def omniMethod(self) -> LevelStatisticsMethod:
        """"""
        return self.__omniMethod

    @omniMethod.setter
    def omniMethod(self, value: LevelStatisticsMethod):
        """Set omniMethod"""
        self.__omniMethod = value

    @property
    def directionRelativeToWave(self) -> float:
        """"""
        return self.__directionRelativeToWave

    @directionRelativeToWave.setter
    def directionRelativeToWave(self, value: float):
        """Set directionRelativeToWave"""
        self.__directionRelativeToWave = float(value)

    @property
    def statistics(self) -> WindLongTermStatistics:
        """"""
        return self.__statistics

    @statistics.setter
    def statistics(self, value: WindLongTermStatistics):
        """Set statistics"""
        self.__statistics = value

    @property
    def omni(self) -> WindLongTermStatistics:
        """"""
        return self.__omni

    @omni.setter
    def omni(self, value: WindLongTermStatistics):
        """Set omni"""
        self.__omni = value
