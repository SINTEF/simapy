# This an autogenerated file
# 
# Generated with HindcastWaveContainer
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.hindcastwavecontainer import HindcastWaveContainerBlueprint
from typing import Dict
from sima.metocean.hindcastwavedata import HindcastWaveData
from sima.sima.moao import MOAO
from sima.sima.scriptablevalue import ScriptableValue

class HindcastWaveContainer(MOAO):
    """
    Keyword arguments
    -----------------
    _id : str
         (default "")
    scriptableValues : List[ScriptableValue]
    waves : List[HindcastWaveData]
    """

    def __init__(self , _id="", **kwargs):
        super().__init__(**kwargs)
        self._id = _id
        self.scriptableValues = list()
        self.waves = list()
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return HindcastWaveContainerBlueprint()


    @property
    def _id(self) -> str:
        """"""
        return self.___id

    @_id.setter
    def _id(self, value: str):
        """Set _id"""
        self.___id = str(value)

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def waves(self) -> List[HindcastWaveData]:
        """"""
        return self.__waves

    @waves.setter
    def waves(self, value: List[HindcastWaveData]):
        """Set waves"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__waves = value
