# This an autogenerated file
# 
# Generated with DirectionDependentExtremeValues
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.directiondependentextremevalues import DirectionDependentExtremeValuesBlueprint
from typing import Dict
from sima.metocean.levelextreme import LevelExtreme
from sima.metocean.sectorextreme import SectorExtreme
from sima.sima.scriptablevalue import ScriptableValue

class DirectionDependentExtremeValues(LevelExtreme):
    """
    Keyword arguments
    -----------------
    description : str
         (default "")
    scriptableValues : List[ScriptableValue]
    name : str
         (default None)
    level : float
         (default 0.0)
    duration : float
         (default 0.0)
    sectors : List[SectorExtreme]
    """

    def __init__(self , description="", level=0.0, duration=0.0, **kwargs):
        super().__init__(**kwargs)
        self.description = description
        self.scriptableValues = list()
        self.name = None
        self.level = level
        self.duration = duration
        self.sectors = list()
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return DirectionDependentExtremeValuesBlueprint()


    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = value

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = value

    @property
    def level(self) -> float:
        """"""
        return self.__level

    @level.setter
    def level(self, value: float):
        """Set level"""
        self.__level = float(value)

    @property
    def duration(self) -> float:
        """"""
        return self.__duration

    @duration.setter
    def duration(self, value: float):
        """Set duration"""
        self.__duration = float(value)

    @property
    def sectors(self) -> List[SectorExtreme]:
        """"""
        return self.__sectors

    @sectors.setter
    def sectors(self, value: List[SectorExtreme]):
        """Set sectors"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__sectors = value
