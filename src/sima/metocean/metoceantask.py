# This an autogenerated file
# 
# Generated with MetoceanTask
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.metoceantask import MetoceanTaskBlueprint
from typing import Dict
from sima.condition.conditiontask import ConditionTask
from sima.condition.conditiontaskcondition import ConditionTaskCondition
from sima.condition.initialcondition import InitialCondition
from sima.condition.modelvariation import ModelVariation
from sima.metocean.hindcastdata import HindcastData
from sima.metocean.hindcastdatacalculation import HindcastDataCalculation
from sima.metocean.longtermstatistics import LongTermStatistics
from sima.metocean.longtermstatisticscalculation import LongTermStatisticsCalculation
from sima.metocean.profile import Profile
from sima.metocean.scatterdata import ScatterData
from sima.metocean.scatterdatacalculation import ScatterDataCalculation
from sima.sima.doublevariable import DoubleVariable
from sima.sima.integervariable import IntegerVariable
from sima.sima.modelreferencevariable import ModelReferenceVariable
from sima.sima.scriptablevalue import ScriptableValue
from sima.sima.simascript import SIMAScript
from sima.sima.stringvariable import StringVariable

class MetoceanTask(ConditionTask):
    """
    Keyword arguments
    -----------------
    description : str
         (default "")
    scriptableValues : List[ScriptableValue]
    name : str
         (default None)
    doubleVariables : List[DoubleVariable]
    integerVariables : List[IntegerVariable]
    stringVariables : List[StringVariable]
    runNumber : int
         (default 0)
    scripts : List[SIMAScript]
    variations : List[ModelVariation]
    referenceVariables : List[ModelReferenceVariable]
    initialCondition : InitialCondition
    conditions : List[ConditionTaskCondition]
    hindcastData : List[HindcastData]
    scatterData : List[ScatterData]
    longTermStatistics : List[LongTermStatistics]
    scatterDataCalculations : List[ScatterDataCalculation]
    hindcastDataCalculations : List[HindcastDataCalculation]
    longTermStatisticsCalculations : List[LongTermStatisticsCalculation]
    profiles : List[Profile]
    """

    def __init__(self , description="", runNumber=0, **kwargs):
        super().__init__(**kwargs)
        self.description = description
        self.scriptableValues = list()
        self.name = None
        self.doubleVariables = list()
        self.integerVariables = list()
        self.stringVariables = list()
        self.runNumber = runNumber
        self.scripts = list()
        self.variations = list()
        self.referenceVariables = list()
        self.initialCondition = None
        self.conditions = list()
        self.hindcastData = list()
        self.scatterData = list()
        self.longTermStatistics = list()
        self.scatterDataCalculations = list()
        self.hindcastDataCalculations = list()
        self.longTermStatisticsCalculations = list()
        self.profiles = list()
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return MetoceanTaskBlueprint()


    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = value

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = value

    @property
    def doubleVariables(self) -> List[DoubleVariable]:
        """"""
        return self.__doubleVariables

    @doubleVariables.setter
    def doubleVariables(self, value: List[DoubleVariable]):
        """Set doubleVariables"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__doubleVariables = value

    @property
    def integerVariables(self) -> List[IntegerVariable]:
        """"""
        return self.__integerVariables

    @integerVariables.setter
    def integerVariables(self, value: List[IntegerVariable]):
        """Set integerVariables"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__integerVariables = value

    @property
    def stringVariables(self) -> List[StringVariable]:
        """"""
        return self.__stringVariables

    @stringVariables.setter
    def stringVariables(self, value: List[StringVariable]):
        """Set stringVariables"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__stringVariables = value

    @property
    def runNumber(self) -> int:
        """"""
        return self.__runNumber

    @runNumber.setter
    def runNumber(self, value: int):
        """Set runNumber"""
        self.__runNumber = int(value)

    @property
    def scripts(self) -> List[SIMAScript]:
        """"""
        return self.__scripts

    @scripts.setter
    def scripts(self, value: List[SIMAScript]):
        """Set scripts"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scripts = value

    @property
    def variations(self) -> List[ModelVariation]:
        """"""
        return self.__variations

    @variations.setter
    def variations(self, value: List[ModelVariation]):
        """Set variations"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__variations = value

    @property
    def referenceVariables(self) -> List[ModelReferenceVariable]:
        """"""
        return self.__referenceVariables

    @referenceVariables.setter
    def referenceVariables(self, value: List[ModelReferenceVariable]):
        """Set referenceVariables"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__referenceVariables = value

    @property
    def initialCondition(self) -> InitialCondition:
        """"""
        return self.__initialCondition

    @initialCondition.setter
    def initialCondition(self, value: InitialCondition):
        """Set initialCondition"""
        self.__initialCondition = value

    @property
    def conditions(self) -> List[ConditionTaskCondition]:
        """"""
        return self.__conditions

    @conditions.setter
    def conditions(self, value: List[ConditionTaskCondition]):
        """Set conditions"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__conditions = value

    @property
    def hindcastData(self) -> List[HindcastData]:
        """"""
        return self.__hindcastData

    @hindcastData.setter
    def hindcastData(self, value: List[HindcastData]):
        """Set hindcastData"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__hindcastData = value

    @property
    def scatterData(self) -> List[ScatterData]:
        """"""
        return self.__scatterData

    @scatterData.setter
    def scatterData(self, value: List[ScatterData]):
        """Set scatterData"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scatterData = value

    @property
    def longTermStatistics(self) -> List[LongTermStatistics]:
        """"""
        return self.__longTermStatistics

    @longTermStatistics.setter
    def longTermStatistics(self, value: List[LongTermStatistics]):
        """Set longTermStatistics"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__longTermStatistics = value

    @property
    def scatterDataCalculations(self) -> List[ScatterDataCalculation]:
        """"""
        return self.__scatterDataCalculations

    @scatterDataCalculations.setter
    def scatterDataCalculations(self, value: List[ScatterDataCalculation]):
        """Set scatterDataCalculations"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scatterDataCalculations = value

    @property
    def hindcastDataCalculations(self) -> List[HindcastDataCalculation]:
        """"""
        return self.__hindcastDataCalculations

    @hindcastDataCalculations.setter
    def hindcastDataCalculations(self, value: List[HindcastDataCalculation]):
        """Set hindcastDataCalculations"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__hindcastDataCalculations = value

    @property
    def longTermStatisticsCalculations(self) -> List[LongTermStatisticsCalculation]:
        """"""
        return self.__longTermStatisticsCalculations

    @longTermStatisticsCalculations.setter
    def longTermStatisticsCalculations(self, value: List[LongTermStatisticsCalculation]):
        """Set longTermStatisticsCalculations"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__longTermStatisticsCalculations = value

    @property
    def profiles(self) -> List[Profile]:
        """"""
        return self.__profiles

    @profiles.setter
    def profiles(self, value: List[Profile]):
        """Set profiles"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__profiles = value
