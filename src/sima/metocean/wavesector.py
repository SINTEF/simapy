# This an autogenerated file
# 
# Generated with WaveSector
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.wavesector import WaveSectorBlueprint
from typing import Dict
from sima.metocean.contourdata import ContourData
from sima.metocean.significantwaveheightweibulldata import SignificantWaveHeightWeibullData
from sima.metocean.spectralpeakperiodrelation import SpectralPeakPeriodRelation
from sima.sima.moao import MOAO
from sima.sima.scriptablevalue import ScriptableValue

class WaveSector(MOAO):
    """
    Keyword arguments
    -----------------
    _id : str
         (default "")
    scriptableValues : List[ScriptableValue]
    contours : List[ContourData]
    spectralPeakRelation : SpectralPeakPeriodRelation
    significantWaveHeightWeibullData : SignificantWaveHeightWeibullData
    direction : float
         (default 0.0)
    """

    def __init__(self , _id="", direction=0.0, **kwargs):
        super().__init__(**kwargs)
        self._id = _id
        self.scriptableValues = list()
        self.contours = list()
        self.spectralPeakRelation = None
        self.significantWaveHeightWeibullData = None
        self.direction = direction
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return WaveSectorBlueprint()


    @property
    def _id(self) -> str:
        """"""
        return self.___id

    @_id.setter
    def _id(self, value: str):
        """Set _id"""
        self.___id = str(value)

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def contours(self) -> List[ContourData]:
        """"""
        return self.__contours

    @contours.setter
    def contours(self, value: List[ContourData]):
        """Set contours"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__contours = value

    @property
    def spectralPeakRelation(self) -> SpectralPeakPeriodRelation:
        """"""
        return self.__spectralPeakRelation

    @spectralPeakRelation.setter
    def spectralPeakRelation(self, value: SpectralPeakPeriodRelation):
        """Set spectralPeakRelation"""
        self.__spectralPeakRelation = value

    @property
    def significantWaveHeightWeibullData(self) -> SignificantWaveHeightWeibullData:
        """"""
        return self.__significantWaveHeightWeibullData

    @significantWaveHeightWeibullData.setter
    def significantWaveHeightWeibullData(self, value: SignificantWaveHeightWeibullData):
        """Set significantWaveHeightWeibullData"""
        self.__significantWaveHeightWeibullData = value

    @property
    def direction(self) -> float:
        """"""
        return self.__direction

    @direction.setter
    def direction(self, value: float):
        """Set direction"""
        self.__direction = float(value)
