# This an autogenerated file
# 
# Generated with OmniDirectionalWaveLongTermStatistics
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.omnidirectionalwavelongtermstatistics import OmniDirectionalWaveLongTermStatisticsBlueprint
from typing import Dict
from sima.metocean.contourdata import ContourData
from sima.metocean.significantwaveheightweibulldata import SignificantWaveHeightWeibullData
from sima.metocean.spectralpeakperiodrelation import SpectralPeakPeriodRelation
from sima.metocean.wavelongtermstatistics import WaveLongTermStatistics
from sima.sima.scriptablevalue import ScriptableValue

class OmniDirectionalWaveLongTermStatistics(WaveLongTermStatistics):
    """
    Keyword arguments
    -----------------
    description : str
         (default "")
    scriptableValues : List[ScriptableValue]
    name : str
         (default None)
    contours : List[ContourData]
    spectralPeakRelation : SpectralPeakPeriodRelation
    significantWaveHeightWeibullData : SignificantWaveHeightWeibullData
    """

    def __init__(self , description="", **kwargs):
        super().__init__(**kwargs)
        self.description = description
        self.scriptableValues = list()
        self.name = None
        self.contours = list()
        self.spectralPeakRelation = None
        self.significantWaveHeightWeibullData = None
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return OmniDirectionalWaveLongTermStatisticsBlueprint()


    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = value

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = value

    @property
    def contours(self) -> List[ContourData]:
        """"""
        return self.__contours

    @contours.setter
    def contours(self, value: List[ContourData]):
        """Set contours"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__contours = value

    @property
    def spectralPeakRelation(self) -> SpectralPeakPeriodRelation:
        """"""
        return self.__spectralPeakRelation

    @spectralPeakRelation.setter
    def spectralPeakRelation(self, value: SpectralPeakPeriodRelation):
        """Set spectralPeakRelation"""
        self.__spectralPeakRelation = value

    @property
    def significantWaveHeightWeibullData(self) -> SignificantWaveHeightWeibullData:
        """"""
        return self.__significantWaveHeightWeibullData

    @significantWaveHeightWeibullData.setter
    def significantWaveHeightWeibullData(self, value: SignificantWaveHeightWeibullData):
        """Set significantWaveHeightWeibullData"""
        self.__significantWaveHeightWeibullData = value
