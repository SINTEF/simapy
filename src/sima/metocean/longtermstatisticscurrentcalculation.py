# This an autogenerated file
# 
# Generated with LongTermStatisticsCurrentCalculation
from __future__ import annotations
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.longtermstatisticscurrentcalculation import LongTermStatisticsCurrentCalculationBlueprint
from typing import Dict
from sima.metocean.calculationlevel import CalculationLevel
from sima.metocean.levelstatisticsmethod import LevelStatisticsMethod
from sima.sima.moao import MOAO
from sima.sima.scriptablevalue import ScriptableValue
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from sima.metocean.currentlongtermstatistics import CurrentLongTermStatistics

class LongTermStatisticsCurrentCalculation(MOAO):
    """
    Keyword arguments
    -----------------
    _id : str
         (default "")
    scriptableValues : List[ScriptableValue]
    returnPeriod : float
         (default 0.0)
    levels : List[CalculationLevel]
    method : LevelStatisticsMethod
    omniMethod : LevelStatisticsMethod
    directionRelativeToWind : float
         (default 0.0)
    statistics : CurrentLongTermStatistics
    omni : CurrentLongTermStatistics
    """

    def __init__(self , _id="", returnPeriod=0.0, method=LevelStatisticsMethod.FROM_DISTRIBUTION, omniMethod=LevelStatisticsMethod.FROM_DISTRIBUTION, directionRelativeToWind=0.0, **kwargs):
        super().__init__(**kwargs)
        self._id = _id
        self.scriptableValues = list()
        self.returnPeriod = returnPeriod
        self.levels = list()
        self.method = method
        self.omniMethod = omniMethod
        self.directionRelativeToWind = directionRelativeToWind
        self.statistics = None
        self.omni = None
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return LongTermStatisticsCurrentCalculationBlueprint()


    @property
    def _id(self) -> str:
        """"""
        return self.___id

    @_id.setter
    def _id(self, value: str):
        """Set _id"""
        self.___id = str(value)

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def returnPeriod(self) -> float:
        """"""
        return self.__returnPeriod

    @returnPeriod.setter
    def returnPeriod(self, value: float):
        """Set returnPeriod"""
        self.__returnPeriod = float(value)

    @property
    def levels(self) -> List[CalculationLevel]:
        """"""
        return self.__levels

    @levels.setter
    def levels(self, value: List[CalculationLevel]):
        """Set levels"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__levels = value

    @property
    def method(self) -> LevelStatisticsMethod:
        """"""
        return self.__method

    @method.setter
    def method(self, value: LevelStatisticsMethod):
        """Set method"""
        self.__method = value

    @property
    def omniMethod(self) -> LevelStatisticsMethod:
        """"""
        return self.__omniMethod

    @omniMethod.setter
    def omniMethod(self, value: LevelStatisticsMethod):
        """Set omniMethod"""
        self.__omniMethod = value

    @property
    def directionRelativeToWind(self) -> float:
        """"""
        return self.__directionRelativeToWind

    @directionRelativeToWind.setter
    def directionRelativeToWind(self, value: float):
        """Set directionRelativeToWind"""
        self.__directionRelativeToWind = float(value)

    @property
    def statistics(self) -> CurrentLongTermStatistics:
        """"""
        return self.__statistics

    @statistics.setter
    def statistics(self, value: CurrentLongTermStatistics):
        """Set statistics"""
        self.__statistics = value

    @property
    def omni(self) -> CurrentLongTermStatistics:
        """"""
        return self.__omni

    @omni.setter
    def omni(self, value: CurrentLongTermStatistics):
        """Set omni"""
        self.__omni = value
