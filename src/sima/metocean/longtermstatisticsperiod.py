# This an autogenerated file
# 
# Generated with LongTermStatisticsPeriod
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.longtermstatisticsperiod import LongTermStatisticsPeriodBlueprint
from typing import Dict
from sima.metocean.currentlongtermstatistics import CurrentLongTermStatistics
from sima.metocean.wavelongtermstatistics import WaveLongTermStatistics
from sima.metocean.windlongtermstatistics import WindLongTermStatistics
from sima.sima.named import Named
from sima.sima.scriptablevalue import ScriptableValue

class LongTermStatisticsPeriod(Named):
    """
    Keyword arguments
    -----------------
    _id : str
         (default "")
    scriptableValues : List[ScriptableValue]
    name : str
         (default "")
    waveStatistics : List[WaveLongTermStatistics]
    windStatistics : List[WindLongTermStatistics]
    currentStatistics : List[CurrentLongTermStatistics]
    """

    def __init__(self , _id="", name="", **kwargs):
        super().__init__(**kwargs)
        self._id = _id
        self.scriptableValues = list()
        self.name = name
        self.waveStatistics = list()
        self.windStatistics = list()
        self.currentStatistics = list()
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return LongTermStatisticsPeriodBlueprint()


    @property
    def _id(self) -> str:
        """"""
        return self.___id

    @_id.setter
    def _id(self, value: str):
        """Set _id"""
        self.___id = str(value)

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = str(value)

    @property
    def waveStatistics(self) -> List[WaveLongTermStatistics]:
        """"""
        return self.__waveStatistics

    @waveStatistics.setter
    def waveStatistics(self, value: List[WaveLongTermStatistics]):
        """Set waveStatistics"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__waveStatistics = value

    @property
    def windStatistics(self) -> List[WindLongTermStatistics]:
        """"""
        return self.__windStatistics

    @windStatistics.setter
    def windStatistics(self, value: List[WindLongTermStatistics]):
        """Set windStatistics"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__windStatistics = value

    @property
    def currentStatistics(self) -> List[CurrentLongTermStatistics]:
        """"""
        return self.__currentStatistics

    @currentStatistics.setter
    def currentStatistics(self, value: List[CurrentLongTermStatistics]):
        """Set currentStatistics"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__currentStatistics = value
