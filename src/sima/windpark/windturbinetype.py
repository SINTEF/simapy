# This an autogenerated file
# 
# Generated with WindTurbineType
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.windturbinetype import WindTurbineTypeBlueprint
from typing import Dict
from sima.sima.namedobject import NamedObject
from sima.sima.scriptablevalue import ScriptableValue
from sima.windpark.bladeelement import BladeElement
from sima.windpark.performancerelation import PerformanceRelation
from sima.windpark.turbinedirection import TurbineDirection

class WindTurbineType(NamedObject):
    """
    Keyword arguments
    -----------------
    _id : str
         (default "")
    scriptableValues : List[ScriptableValue]
    name : str
         (default "")
    airfoilDatabaseFilename : str
         (default "")
    direction : TurbineDirection
         Option for choosing the best approach for handling multiple deficits
    outerRadius : float
         Outer airfoil radius(default 0.0)
    numberOfBlades : int
         (default 0)
    turbineDirection : TurbineDirection
    bladeElements : List[BladeElement]
    cutInWindSpeed : float
         (default 0.0)
    cutOutWindSpeed : float
         (default 0.0)
    performanceRelations : List[PerformanceRelation]
    """

    def __init__(self , _id="", name="", airfoilDatabaseFilename="", direction=TurbineDirection.UPWIND, outerRadius=0.0, numberOfBlades=0, turbineDirection=TurbineDirection.UPWIND, cutInWindSpeed=0.0, cutOutWindSpeed=0.0, **kwargs):
        super().__init__(**kwargs)
        self._id = _id
        self.scriptableValues = list()
        self.name = name
        self.airfoilDatabaseFilename = airfoilDatabaseFilename
        self.direction = direction
        self.outerRadius = outerRadius
        self.numberOfBlades = numberOfBlades
        self.turbineDirection = turbineDirection
        self.bladeElements = list()
        self.cutInWindSpeed = cutInWindSpeed
        self.cutOutWindSpeed = cutOutWindSpeed
        self.performanceRelations = list()
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return WindTurbineTypeBlueprint()


    @property
    def _id(self) -> str:
        """"""
        return self.___id

    @_id.setter
    def _id(self, value: str):
        """Set _id"""
        self.___id = str(value)

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = str(value)

    @property
    def airfoilDatabaseFilename(self) -> str:
        """"""
        return self.__airfoilDatabaseFilename

    @airfoilDatabaseFilename.setter
    def airfoilDatabaseFilename(self, value: str):
        """Set airfoilDatabaseFilename"""
        self.__airfoilDatabaseFilename = str(value)

    @property
    def direction(self) -> TurbineDirection:
        """Option for choosing the best approach for handling multiple deficits"""
        return self.__direction

    @direction.setter
    def direction(self, value: TurbineDirection):
        """Set direction"""
        self.__direction = value

    @property
    def outerRadius(self) -> float:
        """Outer airfoil radius"""
        return self.__outerRadius

    @outerRadius.setter
    def outerRadius(self, value: float):
        """Set outerRadius"""
        self.__outerRadius = float(value)

    @property
    def numberOfBlades(self) -> int:
        """"""
        return self.__numberOfBlades

    @numberOfBlades.setter
    def numberOfBlades(self, value: int):
        """Set numberOfBlades"""
        self.__numberOfBlades = int(value)

    @property
    def turbineDirection(self) -> TurbineDirection:
        """"""
        return self.__turbineDirection

    @turbineDirection.setter
    def turbineDirection(self, value: TurbineDirection):
        """Set turbineDirection"""
        self.__turbineDirection = value

    @property
    def bladeElements(self) -> List[BladeElement]:
        """"""
        return self.__bladeElements

    @bladeElements.setter
    def bladeElements(self, value: List[BladeElement]):
        """Set bladeElements"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__bladeElements = value

    @property
    def cutInWindSpeed(self) -> float:
        """"""
        return self.__cutInWindSpeed

    @cutInWindSpeed.setter
    def cutInWindSpeed(self, value: float):
        """Set cutInWindSpeed"""
        self.__cutInWindSpeed = float(value)

    @property
    def cutOutWindSpeed(self) -> float:
        """"""
        return self.__cutOutWindSpeed

    @cutOutWindSpeed.setter
    def cutOutWindSpeed(self, value: float):
        """Set cutOutWindSpeed"""
        self.__cutOutWindSpeed = float(value)

    @property
    def performanceRelations(self) -> List[PerformanceRelation]:
        """"""
        return self.__performanceRelations

    @performanceRelations.setter
    def performanceRelations(self, value: List[PerformanceRelation]):
        """Set performanceRelations"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__performanceRelations = value
