# This an autogenerated file
# 
# Generated with BladeElement
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.bladeelement import BladeElementBlueprint
from typing import Dict
from sima.sima.named import Named
from sima.sima.scriptablevalue import ScriptableValue

class BladeElement(Named):
    """
    Keyword arguments
    -----------------
    description : str
         (default "")
    scriptableValues : List[ScriptableValue]
    name : str
         (default None)
    elementLength : float
         Blade element length(default 0.0)
    chordLength : float
         Chord length of the foil profile(default 0.0)
    twist : float
         Twist angle(default 0.0)
    """

    def __init__(self , description="", elementLength=0.0, chordLength=0.0, twist=0.0, **kwargs):
        super().__init__(**kwargs)
        self.description = description
        self.scriptableValues = list()
        self.name = None
        self.elementLength = elementLength
        self.chordLength = chordLength
        self.twist = twist
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return BladeElementBlueprint()


    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = value

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = value

    @property
    def elementLength(self) -> float:
        """Blade element length"""
        return self.__elementLength

    @elementLength.setter
    def elementLength(self, value: float):
        """Set elementLength"""
        self.__elementLength = float(value)

    @property
    def chordLength(self) -> float:
        """Chord length of the foil profile"""
        return self.__chordLength

    @chordLength.setter
    def chordLength(self, value: float):
        """Set chordLength"""
        self.__chordLength = float(value)

    @property
    def twist(self) -> float:
        """Twist angle"""
        return self.__twist

    @twist.setter
    def twist(self, value: float):
        """Set twist"""
        self.__twist = float(value)
