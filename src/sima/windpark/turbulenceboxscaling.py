# This an autogenerated file
# 
# Generated with TurbulenceBoxScaling
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.turbulenceboxscaling import TurbulenceBoxScalingBlueprint
from typing import Dict
from sima.sima.moao import MOAO
from sima.sima.scriptablevalue import ScriptableValue
from sima.windpark.scalingoption import ScalingOption

class TurbulenceBoxScaling(MOAO):
    """
    Keyword arguments
    -----------------
    _id : str
         (default "")
    scriptableValues : List[ScriptableValue]
    scalingOption : ScalingOption
    windDirectionScalingFactor : float
         (default 1.0)
    transverseDirectionScalingFactor : float
         (default 0.8)
    verticalDirectionScalingFactor : float
         (default 0.5)
    """

    def __init__(self , _id="", scalingOption=ScalingOption.NONE, windDirectionScalingFactor=1.0, transverseDirectionScalingFactor=0.8, verticalDirectionScalingFactor=0.5, **kwargs):
        super().__init__(**kwargs)
        self._id = _id
        self.scriptableValues = list()
        self.scalingOption = scalingOption
        self.windDirectionScalingFactor = windDirectionScalingFactor
        self.transverseDirectionScalingFactor = transverseDirectionScalingFactor
        self.verticalDirectionScalingFactor = verticalDirectionScalingFactor
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return TurbulenceBoxScalingBlueprint()


    @property
    def _id(self) -> str:
        """"""
        return self.___id

    @_id.setter
    def _id(self, value: str):
        """Set _id"""
        self.___id = str(value)

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def scalingOption(self) -> ScalingOption:
        """"""
        return self.__scalingOption

    @scalingOption.setter
    def scalingOption(self, value: ScalingOption):
        """Set scalingOption"""
        self.__scalingOption = value

    @property
    def windDirectionScalingFactor(self) -> float:
        """"""
        return self.__windDirectionScalingFactor

    @windDirectionScalingFactor.setter
    def windDirectionScalingFactor(self, value: float):
        """Set windDirectionScalingFactor"""
        self.__windDirectionScalingFactor = float(value)

    @property
    def transverseDirectionScalingFactor(self) -> float:
        """"""
        return self.__transverseDirectionScalingFactor

    @transverseDirectionScalingFactor.setter
    def transverseDirectionScalingFactor(self, value: float):
        """Set transverseDirectionScalingFactor"""
        self.__transverseDirectionScalingFactor = float(value)

    @property
    def verticalDirectionScalingFactor(self) -> float:
        """"""
        return self.__verticalDirectionScalingFactor

    @verticalDirectionScalingFactor.setter
    def verticalDirectionScalingFactor(self, value: float):
        """Set verticalDirectionScalingFactor"""
        self.__verticalDirectionScalingFactor = float(value)
