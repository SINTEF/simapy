# This an autogenerated file
# 
# Generated with GainItem
from typing import Dict,Sequence,List
from dmt.entity import Entity
from dmt.blueprint import Blueprint
from .blueprints.gainitem import GainItemBlueprint
from typing import Dict
from sima.sima.moao import MOAO
from sima.sima.scriptablevalue import ScriptableValue

class GainItem(MOAO):
    """
    Keyword arguments
    -----------------
    name : str
         (default "")
    description : str
         (default "")
    _id : str
         (default "")
    scriptableValues : List[ScriptableValue]
    pitchAngle : float
         (default 0.0)
    correctionFactor : float
         (default 0.0)
    """

    def __init__(self , name="", description="", _id="", pitchAngle=0.0, correctionFactor=0.0, **kwargs):
        super().__init__(**kwargs)
        self.name = name
        self.description = description
        self._id = _id
        self.scriptableValues = list()
        self.pitchAngle = pitchAngle
        self.correctionFactor = correctionFactor
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return GainItemBlueprint()


    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = str(value)

    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = str(value)

    @property
    def _id(self) -> str:
        """"""
        return self.___id

    @_id.setter
    def _id(self, value: str):
        """Set _id"""
        self.___id = str(value)

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def pitchAngle(self) -> float:
        """"""
        return self.__pitchAngle

    @pitchAngle.setter
    def pitchAngle(self, value: float):
        """Set pitchAngle"""
        self.__pitchAngle = float(value)

    @property
    def correctionFactor(self) -> float:
        """"""
        return self.__correctionFactor

    @correctionFactor.setter
    def correctionFactor(self, value: float):
        """Set correctionFactor"""
        self.__correctionFactor = float(value)
