# This an autogenerated file
# 
# Generated with SignalInputSlot
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.signalinputslot import SignalInputSlotBlueprint
from typing import Dict
from sima.post.generatorsignal import GeneratorSignal
from sima.post.inputslot import InputSlot
from sima.post.signalgeneratorcontainer import SignalGeneratorContainer
from sima.post.signalproperties import SignalProperties
from sima.sima.scriptablevalue import ScriptableValue

class SignalInputSlot(InputSlot,SignalGeneratorContainer):
    """
    Keyword arguments
    -----------------
    _id : str
         (default "")
    scriptableValues : List[ScriptableValue]
    name : str
         (default "")
    properties : List[SignalProperties]
    signals : List[GeneratorSignal]
    children : List[SignalGeneratorContainer]
    includeRootFolder : bool
         Will add a root folder to the output(default False)
    """

    def __init__(self , _id="", name="", includeRootFolder=False, **kwargs):
        super().__init__(**kwargs)
        self._id = _id
        self.scriptableValues = list()
        self.name = name
        self.properties = list()
        self.signals = list()
        self.children = list()
        self.includeRootFolder = includeRootFolder
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return SignalInputSlotBlueprint()


    @property
    def _id(self) -> str:
        """"""
        return self.___id

    @_id.setter
    def _id(self, value: str):
        """Set _id"""
        self.___id = str(value)

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = str(value)

    @property
    def properties(self) -> List[SignalProperties]:
        """"""
        return self.__properties

    @properties.setter
    def properties(self, value: List[SignalProperties]):
        """Set properties"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__properties = value

    @property
    def signals(self) -> List[GeneratorSignal]:
        """"""
        return self.__signals

    @signals.setter
    def signals(self, value: List[GeneratorSignal]):
        """Set signals"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__signals = value

    @property
    def children(self) -> List[SignalGeneratorContainer]:
        """"""
        return self.__children

    @children.setter
    def children(self, value: List[SignalGeneratorContainer]):
        """Set children"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__children = value

    @property
    def includeRootFolder(self) -> bool:
        """Will add a root folder to the output"""
        return self.__includeRootFolder

    @includeRootFolder.setter
    def includeRootFolder(self, value: bool):
        """Set includeRootFolder"""
        self.__includeRootFolder = bool(value)
