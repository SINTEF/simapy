# This an autogenerated file
# 
# Generated with CoordinateSystemTransform
from typing import Dict,Sequence,List
from dmt.entity import Entity
from dmt.blueprint import Blueprint
from .blueprints.coordinatesystemtransform import CoordinateSystemTransformBlueprint
from sima.post.controlsignalinputslot import ControlSignalInputSlot
from sima.post.inputslot import InputSlot
from sima.post.operationnode import OperationNode
from sima.post.outputslot import OutputSlot
from sima.sima.scriptablevalue import ScriptableValue

class CoordinateSystemTransform(OperationNode):
    """
    Keyword arguments
    -----------------
    name : str
         (default "")
    description : str
         (default "")
    _id : str
         (default "")
    scriptableValues : List[ScriptableValue]
    x : int
         (default 0)
    y : int
         (default 0)
    h : int
         (default 0)
    w : int
         (default 0)
    controlSignalInputSlots : List[ControlSignalInputSlot]
    filterInputSlots : List[InputSlot]
    filterOutputSlots : List[OutputSlot]
    inputCoordinateSystem : bool
         Specify the reference coordinate system by passing in a 3 or 6 dof position signal or a 9 dof rotation matrix (row order)(default False)
    offsetX : float
         (default 0.0)
    offsetY : float
         (default 0.0)
    offsetZ : float
         (default 0.0)
    rotationX : float
         (default 0.0)
    rotationY : float
         (default 0.0)
    rotationZ : float
         (default 0.0)
    """

    def __init__(self , name:str="", description:str="", _id:str="", x:int=0, y:int=0, h:int=0, w:int=0, inputCoordinateSystem:bool=False, offsetX:float=0.0, offsetY:float=0.0, offsetZ:float=0.0, rotationX:float=0.0, rotationY:float=0.0, rotationZ:float=0.0, **kwargs):
        super().__init__(**kwargs)
        self.__name = name
        self.__description = description
        self.___id = _id
        self.__scriptableValues = list()
        self.__x = x
        self.__y = y
        self.__h = h
        self.__w = w
        self.__controlSignalInputSlots = list()
        self.__filterInputSlots = list()
        self.__filterOutputSlots = list()
        self.__inputCoordinateSystem = inputCoordinateSystem
        self.__offsetX = offsetX
        self.__offsetY = offsetY
        self.__offsetZ = offsetZ
        self.__rotationX = rotationX
        self.__rotationY = rotationY
        self.__rotationZ = rotationZ
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return CoordinateSystemTransformBlueprint()


    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = str(value)

    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = str(value)

    @property
    def _id(self) -> str:
        """"""
        return self.___id

    @_id.setter
    def _id(self, value: str):
        """Set _id"""
        self.___id = str(value)

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def x(self) -> int:
        """"""
        return self.__x

    @x.setter
    def x(self, value: int):
        """Set x"""
        self.__x = int(value)

    @property
    def y(self) -> int:
        """"""
        return self.__y

    @y.setter
    def y(self, value: int):
        """Set y"""
        self.__y = int(value)

    @property
    def h(self) -> int:
        """"""
        return self.__h

    @h.setter
    def h(self, value: int):
        """Set h"""
        self.__h = int(value)

    @property
    def w(self) -> int:
        """"""
        return self.__w

    @w.setter
    def w(self, value: int):
        """Set w"""
        self.__w = int(value)

    @property
    def controlSignalInputSlots(self) -> List[ControlSignalInputSlot]:
        """"""
        return self.__controlSignalInputSlots

    @controlSignalInputSlots.setter
    def controlSignalInputSlots(self, value: List[ControlSignalInputSlot]):
        """Set controlSignalInputSlots"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__controlSignalInputSlots = value

    @property
    def filterInputSlots(self) -> List[InputSlot]:
        """"""
        return self.__filterInputSlots

    @filterInputSlots.setter
    def filterInputSlots(self, value: List[InputSlot]):
        """Set filterInputSlots"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__filterInputSlots = value

    @property
    def filterOutputSlots(self) -> List[OutputSlot]:
        """"""
        return self.__filterOutputSlots

    @filterOutputSlots.setter
    def filterOutputSlots(self, value: List[OutputSlot]):
        """Set filterOutputSlots"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__filterOutputSlots = value

    @property
    def inputCoordinateSystem(self) -> bool:
        """Specify the reference coordinate system by passing in a 3 or 6 dof position signal or a 9 dof rotation matrix (row order)"""
        return self.__inputCoordinateSystem

    @inputCoordinateSystem.setter
    def inputCoordinateSystem(self, value: bool):
        """Set inputCoordinateSystem"""
        self.__inputCoordinateSystem = bool(value)

    @property
    def offsetX(self) -> float:
        """"""
        return self.__offsetX

    @offsetX.setter
    def offsetX(self, value: float):
        """Set offsetX"""
        self.__offsetX = float(value)

    @property
    def offsetY(self) -> float:
        """"""
        return self.__offsetY

    @offsetY.setter
    def offsetY(self, value: float):
        """Set offsetY"""
        self.__offsetY = float(value)

    @property
    def offsetZ(self) -> float:
        """"""
        return self.__offsetZ

    @offsetZ.setter
    def offsetZ(self, value: float):
        """Set offsetZ"""
        self.__offsetZ = float(value)

    @property
    def rotationX(self) -> float:
        """"""
        return self.__rotationX

    @rotationX.setter
    def rotationX(self, value: float):
        """Set rotationX"""
        self.__rotationX = float(value)

    @property
    def rotationY(self) -> float:
        """"""
        return self.__rotationY

    @rotationY.setter
    def rotationY(self, value: float):
        """Set rotationY"""
        self.__rotationY = float(value)

    @property
    def rotationZ(self) -> float:
        """"""
        return self.__rotationZ

    @rotationZ.setter
    def rotationZ(self, value: float):
        """Set rotationZ"""
        self.__rotationZ = float(value)
