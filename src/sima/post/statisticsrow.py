# This an autogenerated file
# 
# Generated with StatisticsRow
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.statisticsrow import StatisticsRowBlueprint
from typing import Dict
from sima.sima.moao import MOAO
from sima.sima.scriptablevalue import ScriptableValue

class StatisticsRow(MOAO):
    """
    Keyword arguments
    -----------------
    _id : str
         (default "")
    scriptableValues : List[ScriptableValue]
    unit : str
         (default "")
    name : str
         (default "")
    min : float
         (default 0.0)
    max : float
         (default 0.0)
    mean : float
         (default 0.0)
    standardDeviation : float
         (default 0.0)
    skewness : float
         (default 0.0)
    kurtosis : float
         (default 0.0)
    """

    def __init__(self , _id="", unit="", name="", min=0.0, max=0.0, mean=0.0, standardDeviation=0.0, skewness=0.0, kurtosis=0.0, **kwargs):
        super().__init__(**kwargs)
        self._id = _id
        self.scriptableValues = list()
        self.unit = unit
        self.name = name
        self.min = min
        self.max = max
        self.mean = mean
        self.standardDeviation = standardDeviation
        self.skewness = skewness
        self.kurtosis = kurtosis
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return StatisticsRowBlueprint()


    @property
    def _id(self) -> str:
        """"""
        return self.___id

    @_id.setter
    def _id(self, value: str):
        """Set _id"""
        self.___id = str(value)

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def unit(self) -> str:
        """"""
        return self.__unit

    @unit.setter
    def unit(self, value: str):
        """Set unit"""
        self.__unit = str(value)

    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = str(value)

    @property
    def min(self) -> float:
        """"""
        return self.__min

    @min.setter
    def min(self, value: float):
        """Set min"""
        self.__min = float(value)

    @property
    def max(self) -> float:
        """"""
        return self.__max

    @max.setter
    def max(self, value: float):
        """Set max"""
        self.__max = float(value)

    @property
    def mean(self) -> float:
        """"""
        return self.__mean

    @mean.setter
    def mean(self, value: float):
        """Set mean"""
        self.__mean = float(value)

    @property
    def standardDeviation(self) -> float:
        """"""
        return self.__standardDeviation

    @standardDeviation.setter
    def standardDeviation(self, value: float):
        """Set standardDeviation"""
        self.__standardDeviation = float(value)

    @property
    def skewness(self) -> float:
        """"""
        return self.__skewness

    @skewness.setter
    def skewness(self, value: float):
        """Set skewness"""
        self.__skewness = float(value)

    @property
    def kurtosis(self) -> float:
        """"""
        return self.__kurtosis

    @kurtosis.setter
    def kurtosis(self, value: float):
        """Set kurtosis"""
        self.__kurtosis = float(value)
