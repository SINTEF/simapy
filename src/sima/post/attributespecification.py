# This an autogenerated file
# 
# Generated with AttributeSpecification
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.attributespecification import AttributeSpecificationBlueprint
from typing import Dict
from sima.post.pathspecification import PathSpecification
from sima.post.signalproperties import SignalProperties
from sima.sima.scriptablevalue import ScriptableValue

class AttributeSpecification(PathSpecification,SignalProperties):
    """
    Keyword arguments
    -----------------
    _id : str
         (default "")
    scriptableValues : List[ScriptableValue]
    path : str
         (default "")
    attribute : str
         (default "")
    value : str
         (default "")
    """

    def __init__(self , _id="", path="", attribute="", value="", **kwargs):
        super().__init__(**kwargs)
        self._id = _id
        self.scriptableValues = list()
        self.path = path
        self.attribute = attribute
        self.value = value
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return AttributeSpecificationBlueprint()


    @property
    def _id(self) -> str:
        """"""
        return self.___id

    @_id.setter
    def _id(self, value: str):
        """Set _id"""
        self.___id = str(value)

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def path(self) -> str:
        """"""
        return self.__path

    @path.setter
    def path(self, value: str):
        """Set path"""
        self.__path = str(value)

    @property
    def attribute(self) -> str:
        """"""
        return self.__attribute

    @attribute.setter
    def attribute(self, value: str):
        """Set attribute"""
        self.__attribute = str(value)

    @property
    def value(self) -> str:
        """"""
        return self.__value

    @value.setter
    def value(self, value: str):
        """Set value"""
        self.__value = str(value)
