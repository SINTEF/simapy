# This an autogenerated file
# 
# Generated with NonEquidistantSignal
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.nonequidistantsignal import NonEquidistantSignalBlueprint
from typing import Dict
from sima.post.generatorsignal import GeneratorSignal
from sima.post.signalproperties import SignalProperties
from sima.post.xyitem import XYItem
from sima.sima.scriptablevalue import ScriptableValue

class NonEquidistantSignal(GeneratorSignal):
    """
    Keyword arguments
    -----------------
    description : str
         (default "")
    scriptableValues : List[ScriptableValue]
    properties : List[SignalProperties]
    name : str
         (default None)
    xunit : str
         Defines the unit of the x axis(default 's')
    yunit : str
         Defines the unit of the y axis(default '-')
    values : List[XYItem]
    ylabel : str
         (default None)
    xlabel : str
         (default None)
    """

    def __init__(self , description="", xunit='s', yunit='-', **kwargs):
        super().__init__(**kwargs)
        self.description = description
        self.scriptableValues = list()
        self.properties = list()
        self.name = None
        self.xunit = xunit
        self.yunit = yunit
        self.values = list()
        self.ylabel = None
        self.xlabel = None
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return NonEquidistantSignalBlueprint()


    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = value

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def properties(self) -> List[SignalProperties]:
        """"""
        return self.__properties

    @properties.setter
    def properties(self, value: List[SignalProperties]):
        """Set properties"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__properties = value

    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = value

    @property
    def xunit(self) -> str:
        """Defines the unit of the x axis"""
        return self.__xunit

    @xunit.setter
    def xunit(self, value: str):
        """Set xunit"""
        self.__xunit = value

    @property
    def yunit(self) -> str:
        """Defines the unit of the y axis"""
        return self.__yunit

    @yunit.setter
    def yunit(self, value: str):
        """Set yunit"""
        self.__yunit = value

    @property
    def values(self) -> List[XYItem]:
        """"""
        return self.__values

    @values.setter
    def values(self, value: List[XYItem]):
        """Set values"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__values = value

    @property
    def ylabel(self) -> str:
        """"""
        return self.__ylabel

    @ylabel.setter
    def ylabel(self, value: str):
        """Set ylabel"""
        self.__ylabel = value

    @property
    def xlabel(self) -> str:
        """"""
        return self.__xlabel

    @xlabel.setter
    def xlabel(self, value: str):
        """Set xlabel"""
        self.__xlabel = value
