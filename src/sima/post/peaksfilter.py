# This an autogenerated file
# 
# Generated with PeaksFilter
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.peaksfilter import PeaksFilterBlueprint
from typing import Dict
from sima.post.controlsignalinputslot import ControlSignalInputSlot
from sima.post.inputslot import InputSlot
from sima.post.operationnode import OperationNode
from sima.post.outputslot import OutputSlot
from sima.post.peakextreme import PeakExtreme
from sima.post.peaktype import PeakType
from sima.sima.scriptablevalue import ScriptableValue

class PeaksFilter(OperationNode):
    """
    Keyword arguments
    -----------------
    _id : str
         (default "")
    scriptableValues : List[ScriptableValue]
    name : str
         (default "")
    x : int
         (default 0)
    y : int
         (default 0)
    h : int
         (default 0)
    w : int
         (default 0)
    controlSignalInputSlots : List[ControlSignalInputSlot]
    filterInputSlots : List[InputSlot]
    filterOutputSlots : List[OutputSlot]
    renameOutput : bool
         (default True)
    extreme : PeakExtreme
         Get maxima or minima
    _type : PeakType
         Get local or global peaks
    crossingLevel : float
         Choose a crossing level(default 0.0)
    useMean : bool
         Use mean value as crossing level(default False)
    partitions : int
         Number of partitions when finding block maxima/minima(default 10)
    """

    def __init__(self , _id="", name="", x=0, y=0, h=0, w=0, renameOutput=True, extreme=PeakExtreme.MAX, _type=PeakType.LOCAL, crossingLevel=0.0, useMean=False, partitions=10, **kwargs):
        super().__init__(**kwargs)
        self._id = _id
        self.scriptableValues = list()
        self.name = name
        self.x = x
        self.y = y
        self.h = h
        self.w = w
        self.controlSignalInputSlots = list()
        self.filterInputSlots = list()
        self.filterOutputSlots = list()
        self.renameOutput = renameOutput
        self.extreme = extreme
        self._type = _type
        self.crossingLevel = crossingLevel
        self.useMean = useMean
        self.partitions = partitions
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return PeaksFilterBlueprint()


    @property
    def _id(self) -> str:
        """"""
        return self.___id

    @_id.setter
    def _id(self, value: str):
        """Set _id"""
        self.___id = str(value)

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = str(value)

    @property
    def x(self) -> int:
        """"""
        return self.__x

    @x.setter
    def x(self, value: int):
        """Set x"""
        self.__x = int(value)

    @property
    def y(self) -> int:
        """"""
        return self.__y

    @y.setter
    def y(self, value: int):
        """Set y"""
        self.__y = int(value)

    @property
    def h(self) -> int:
        """"""
        return self.__h

    @h.setter
    def h(self, value: int):
        """Set h"""
        self.__h = int(value)

    @property
    def w(self) -> int:
        """"""
        return self.__w

    @w.setter
    def w(self, value: int):
        """Set w"""
        self.__w = int(value)

    @property
    def controlSignalInputSlots(self) -> List[ControlSignalInputSlot]:
        """"""
        return self.__controlSignalInputSlots

    @controlSignalInputSlots.setter
    def controlSignalInputSlots(self, value: List[ControlSignalInputSlot]):
        """Set controlSignalInputSlots"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__controlSignalInputSlots = value

    @property
    def filterInputSlots(self) -> List[InputSlot]:
        """"""
        return self.__filterInputSlots

    @filterInputSlots.setter
    def filterInputSlots(self, value: List[InputSlot]):
        """Set filterInputSlots"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__filterInputSlots = value

    @property
    def filterOutputSlots(self) -> List[OutputSlot]:
        """"""
        return self.__filterOutputSlots

    @filterOutputSlots.setter
    def filterOutputSlots(self, value: List[OutputSlot]):
        """Set filterOutputSlots"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__filterOutputSlots = value

    @property
    def renameOutput(self) -> bool:
        """"""
        return self.__renameOutput

    @renameOutput.setter
    def renameOutput(self, value: bool):
        """Set renameOutput"""
        self.__renameOutput = bool(value)

    @property
    def extreme(self) -> PeakExtreme:
        """Get maxima or minima"""
        return self.__extreme

    @extreme.setter
    def extreme(self, value: PeakExtreme):
        """Set extreme"""
        self.__extreme = value

    @property
    def _type(self) -> PeakType:
        """Get local or global peaks"""
        return self.___type

    @_type.setter
    def _type(self, value: PeakType):
        """Set _type"""
        self.___type = value

    @property
    def crossingLevel(self) -> float:
        """Choose a crossing level"""
        return self.__crossingLevel

    @crossingLevel.setter
    def crossingLevel(self, value: float):
        """Set crossingLevel"""
        self.__crossingLevel = float(value)

    @property
    def useMean(self) -> bool:
        """Use mean value as crossing level"""
        return self.__useMean

    @useMean.setter
    def useMean(self, value: bool):
        """Set useMean"""
        self.__useMean = bool(value)

    @property
    def partitions(self) -> int:
        """Number of partitions when finding block maxima/minima"""
        return self.__partitions

    @partitions.setter
    def partitions(self, value: int):
        """Set partitions"""
        self.__partitions = int(value)
