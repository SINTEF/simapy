# This an autogenerated file
# 
# Generated with ConstraintItem
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.constraintitem import ConstraintItemBlueprint
from typing import Dict
from sima.post.constrainttype import ConstraintType
from sima.sima.moao import MOAO
from sima.sima.scriptablevalue import ScriptableValue

class ConstraintItem(MOAO):
    """
    Keyword arguments
    -----------------
    description : str
         (default "")
    scriptableValues : List[ScriptableValue]
    path : str
         (default None)
    _type : ConstraintType
    value : float
         (default 0.0)
    """

    def __init__(self , description="", _type=ConstraintType.LE, value=0.0, **kwargs):
        super().__init__(**kwargs)
        self.description = description
        self.scriptableValues = list()
        self.path = None
        self._type = _type
        self.value = value
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return ConstraintItemBlueprint()


    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = value

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def path(self) -> str:
        """"""
        return self.__path

    @path.setter
    def path(self, value: str):
        """Set path"""
        self.__path = value

    @property
    def _type(self) -> ConstraintType:
        """"""
        return self.___type

    @_type.setter
    def _type(self, value: ConstraintType):
        """Set _type"""
        self.___type = value

    @property
    def value(self) -> float:
        """"""
        return self.__value

    @value.setter
    def value(self, value: float):
        """Set value"""
        self.__value = float(value)
