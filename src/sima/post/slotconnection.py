# This an autogenerated file
# 
# Generated with SlotConnection
from __future__ import annotations
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.slotconnection import SlotConnectionBlueprint
from typing import Dict
from sima.graph.point import Point
from sima.post.requirement import Requirement
from sima.sima.moao import MOAO
from sima.sima.scriptablevalue import ScriptableValue
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from sima.post.inputslot import InputSlot
    from sima.post.outputslot import OutputSlot

class SlotConnection(MOAO):
    """
    Keyword arguments
    -----------------
    _id : str
         (default "")
    scriptableValues : List[ScriptableValue]
    useQuery : bool
         Use boolean expressions using operators =, !=,&&,|| to create more advanced queries(default False)
    query : str
         (default "")
    userRequirements : List[Requirement]
    points : List[Point]
    toSlot : InputSlot
    fromSlot : OutputSlot
    """

    def __init__(self , _id="", useQuery=False, query="", **kwargs):
        super().__init__(**kwargs)
        self._id = _id
        self.scriptableValues = list()
        self.useQuery = useQuery
        self.query = query
        self.userRequirements = list()
        self.points = list()
        self.toSlot = None
        self.fromSlot = None
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return SlotConnectionBlueprint()


    @property
    def _id(self) -> str:
        """"""
        return self.___id

    @_id.setter
    def _id(self, value: str):
        """Set _id"""
        self.___id = str(value)

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def useQuery(self) -> bool:
        """Use boolean expressions using operators =, !=,&&,|| to create more advanced queries"""
        return self.__useQuery

    @useQuery.setter
    def useQuery(self, value: bool):
        """Set useQuery"""
        self.__useQuery = bool(value)

    @property
    def query(self) -> str:
        """"""
        return self.__query

    @query.setter
    def query(self, value: str):
        """Set query"""
        self.__query = str(value)

    @property
    def userRequirements(self) -> List[Requirement]:
        """"""
        return self.__userRequirements

    @userRequirements.setter
    def userRequirements(self, value: List[Requirement]):
        """Set userRequirements"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__userRequirements = value

    @property
    def points(self) -> List[Point]:
        """"""
        return self.__points

    @points.setter
    def points(self, value: List[Point]):
        """Set points"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__points = value

    @property
    def toSlot(self) -> InputSlot:
        """"""
        return self.__toSlot

    @toSlot.setter
    def toSlot(self, value: InputSlot):
        """Set toSlot"""
        self.__toSlot = value

    @property
    def fromSlot(self) -> OutputSlot:
        """"""
        return self.__fromSlot

    @fromSlot.setter
    def fromSlot(self, value: OutputSlot):
        """Set fromSlot"""
        self.__fromSlot = value
