# This an autogenerated file
# 
# Generated with StatisticsMatrix
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.statisticsmatrix import StatisticsMatrixBlueprint
from typing import Dict
from sima.post.statisticsrow import StatisticsRow
from sima.sima.moao import MOAO
from sima.sima.scriptablevalue import ScriptableValue

class StatisticsMatrix(MOAO):
    """
    Keyword arguments
    -----------------
    _id : str
         (default "")
    scriptableValues : List[ScriptableValue]
    rows : List[StatisticsRow]
    """

    def __init__(self , _id="", **kwargs):
        super().__init__(**kwargs)
        self._id = _id
        self.scriptableValues = list()
        self.rows = list()
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return StatisticsMatrixBlueprint()


    @property
    def _id(self) -> str:
        """"""
        return self.___id

    @_id.setter
    def _id(self, value: str):
        """Set _id"""
        self.___id = str(value)

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def rows(self) -> List[StatisticsRow]:
        """"""
        return self.__rows

    @rows.setter
    def rows(self, value: List[StatisticsRow]):
        """Set rows"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__rows = value
