# This an autogenerated file
# 
# Generated with FigureTemplate
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.figuretemplate import FigureTemplateBlueprint
from typing import Dict
from sima.post.axisconfiguration import AxisConfiguration
from sima.post.plotsize import PlotSize
from sima.sima.fontdescription import FontDescription
from sima.sima.moao import MOAO
from sima.sima.scriptablevalue import ScriptableValue

class FigureTemplate(MOAO):
    """
    Keyword arguments
    -----------------
    _id : str
         (default "")
    scriptableValues : List[ScriptableValue]
    titleFont : FontDescription
    legendFont : FontDescription
    xAxis : AxisConfiguration
    yAxis : AxisConfiguration
    showTitle : bool
         (default True)
    showLegend : bool
         (default True)
    size : PlotSize
    width : int
         (default 0)
    height : int
         (default 0)
    """

    def __init__(self , _id="", showTitle=True, showLegend=True, size=PlotSize.DYNAMIC, width=0, height=0, **kwargs):
        super().__init__(**kwargs)
        self._id = _id
        self.scriptableValues = list()
        self.titleFont = None
        self.legendFont = None
        self.xAxis = None
        self.yAxis = None
        self.showTitle = showTitle
        self.showLegend = showLegend
        self.size = size
        self.width = width
        self.height = height
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return FigureTemplateBlueprint()


    @property
    def _id(self) -> str:
        """"""
        return self.___id

    @_id.setter
    def _id(self, value: str):
        """Set _id"""
        self.___id = str(value)

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def titleFont(self) -> FontDescription:
        """"""
        return self.__titleFont

    @titleFont.setter
    def titleFont(self, value: FontDescription):
        """Set titleFont"""
        self.__titleFont = value

    @property
    def legendFont(self) -> FontDescription:
        """"""
        return self.__legendFont

    @legendFont.setter
    def legendFont(self, value: FontDescription):
        """Set legendFont"""
        self.__legendFont = value

    @property
    def xAxis(self) -> AxisConfiguration:
        """"""
        return self.__xAxis

    @xAxis.setter
    def xAxis(self, value: AxisConfiguration):
        """Set xAxis"""
        self.__xAxis = value

    @property
    def yAxis(self) -> AxisConfiguration:
        """"""
        return self.__yAxis

    @yAxis.setter
    def yAxis(self, value: AxisConfiguration):
        """Set yAxis"""
        self.__yAxis = value

    @property
    def showTitle(self) -> bool:
        """"""
        return self.__showTitle

    @showTitle.setter
    def showTitle(self, value: bool):
        """Set showTitle"""
        self.__showTitle = bool(value)

    @property
    def showLegend(self) -> bool:
        """"""
        return self.__showLegend

    @showLegend.setter
    def showLegend(self, value: bool):
        """Set showLegend"""
        self.__showLegend = bool(value)

    @property
    def size(self) -> PlotSize:
        """"""
        return self.__size

    @size.setter
    def size(self, value: PlotSize):
        """Set size"""
        self.__size = value

    @property
    def width(self) -> int:
        """"""
        return self.__width

    @width.setter
    def width(self, value: int):
        """Set width"""
        self.__width = int(value)

    @property
    def height(self) -> int:
        """"""
        return self.__height

    @height.setter
    def height(self, value: int):
        """Set height"""
        self.__height = int(value)
