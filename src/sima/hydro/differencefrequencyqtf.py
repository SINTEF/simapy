# This an autogenerated file
# 
# Generated with DifferenceFrequencyQTF
from typing import Dict,Sequence,List
from dmt.entity import Entity
from dmt.blueprint import Blueprint
from .blueprints.differencefrequencyqtf import DifferenceFrequencyQTFBlueprint
from sima.hydro.qtfdof import QTFDof
from sima.hydro.sparseqtf import SparseQTF
from sima.sima.scriptablevalue import ScriptableValue

class DifferenceFrequencyQTF(SparseQTF):
    """
    Keyword arguments
    -----------------
    name : str
         (default "")
    description : str
         (default "")
    _id : str
         (default "")
    scriptableValues : List[ScriptableValue]
    nFreq : int
         (default 0)
    nDir : int
         (default 0)
    nValues : int
         (default 0)
    bidirectional : bool
         (default False)
    bichromatic : bool
         (default False)
    directions : Sequence[float]
    frequencies : Sequence[float]
    di : Sequence[int]
    dj : Sequence[int]
    wi : Sequence[int]
    wj : Sequence[int]
    surge : QTFDof
    sway : QTFDof
    heave : QTFDof
    roll : QTFDof
    pitch : QTFDof
    yaw : QTFDof
    """

    def __init__(self , name:str="", description:str="", _id:str="", nFreq:int=0, nDir:int=0, nValues:int=0, bidirectional:bool=False, bichromatic:bool=False, **kwargs):
        super().__init__(**kwargs)
        self.__name = name
        self.__description = description
        self.___id = _id
        self.__scriptableValues = list()
        self.__nFreq = nFreq
        self.__nDir = nDir
        self.__nValues = nValues
        self.__bidirectional = bidirectional
        self.__bichromatic = bichromatic
        self.__directions = list()
        self.__frequencies = list()
        self.__di = list()
        self.__dj = list()
        self.__wi = list()
        self.__wj = list()
        self.__surge = QTFDof()
        self.__sway = QTFDof()
        self.__heave = QTFDof()
        self.__roll = QTFDof()
        self.__pitch = QTFDof()
        self.__yaw = QTFDof()
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return DifferenceFrequencyQTFBlueprint()


    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = str(value)

    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = str(value)

    @property
    def _id(self) -> str:
        """"""
        return self.___id

    @_id.setter
    def _id(self, value: str):
        """Set _id"""
        self.___id = str(value)

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def nFreq(self) -> int:
        """"""
        return self.__nFreq

    @nFreq.setter
    def nFreq(self, value: int):
        """Set nFreq"""
        self.__nFreq = int(value)

    @property
    def nDir(self) -> int:
        """"""
        return self.__nDir

    @nDir.setter
    def nDir(self, value: int):
        """Set nDir"""
        self.__nDir = int(value)

    @property
    def nValues(self) -> int:
        """"""
        return self.__nValues

    @nValues.setter
    def nValues(self, value: int):
        """Set nValues"""
        self.__nValues = int(value)

    @property
    def bidirectional(self) -> bool:
        """"""
        return self.__bidirectional

    @bidirectional.setter
    def bidirectional(self, value: bool):
        """Set bidirectional"""
        self.__bidirectional = bool(value)

    @property
    def bichromatic(self) -> bool:
        """"""
        return self.__bichromatic

    @bichromatic.setter
    def bichromatic(self, value: bool):
        """Set bichromatic"""
        self.__bichromatic = bool(value)

    @property
    def directions(self) -> Sequence[float]:
        """"""
        return self.__directions

    @directions.setter
    def directions(self, value: Sequence[float]):
        """Set directions"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__directions = value

    @property
    def frequencies(self) -> Sequence[float]:
        """"""
        return self.__frequencies

    @frequencies.setter
    def frequencies(self, value: Sequence[float]):
        """Set frequencies"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__frequencies = value

    @property
    def di(self) -> Sequence[int]:
        """"""
        return self.__di

    @di.setter
    def di(self, value: Sequence[int]):
        """Set di"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__di = value

    @property
    def dj(self) -> Sequence[int]:
        """"""
        return self.__dj

    @dj.setter
    def dj(self, value: Sequence[int]):
        """Set dj"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__dj = value

    @property
    def wi(self) -> Sequence[int]:
        """"""
        return self.__wi

    @wi.setter
    def wi(self, value: Sequence[int]):
        """Set wi"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__wi = value

    @property
    def wj(self) -> Sequence[int]:
        """"""
        return self.__wj

    @wj.setter
    def wj(self, value: Sequence[int]):
        """Set wj"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__wj = value

    @property
    def surge(self) -> QTFDof:
        """"""
        return self.__surge

    @surge.setter
    def surge(self, value: QTFDof):
        """Set surge"""
        self.__surge = value

    @property
    def sway(self) -> QTFDof:
        """"""
        return self.__sway

    @sway.setter
    def sway(self, value: QTFDof):
        """Set sway"""
        self.__sway = value

    @property
    def heave(self) -> QTFDof:
        """"""
        return self.__heave

    @heave.setter
    def heave(self, value: QTFDof):
        """Set heave"""
        self.__heave = value

    @property
    def roll(self) -> QTFDof:
        """"""
        return self.__roll

    @roll.setter
    def roll(self, value: QTFDof):
        """Set roll"""
        self.__roll = value

    @property
    def pitch(self) -> QTFDof:
        """"""
        return self.__pitch

    @pitch.setter
    def pitch(self, value: QTFDof):
        """Set pitch"""
        self.__pitch = value

    @property
    def yaw(self) -> QTFDof:
        """"""
        return self.__yaw

    @yaw.setter
    def yaw(self, value: QTFDof):
        """Set yaw"""
        self.__yaw = value
