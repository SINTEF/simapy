# This an autogenerated file
# 
# Generated with StructuralMass
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.structuralmass import StructuralMassBlueprint
from typing import Dict
from sima.sima.moao import MOAO
from sima.sima.point3 import Point3
from sima.sima.scriptablevalue import ScriptableValue

class StructuralMass(MOAO):
    """
    Keyword arguments
    -----------------
    _id : str
         (default "")
    scriptableValues : List[ScriptableValue]
    mass : float
         Mass(default 0.0)
    ixx : float
         Mass moment of inertia about origin(default 0.0)
    iyx : float
         Mass moment of inertia about origin(default 0.0)
    iyy : float
         Mass moment of inertia about origin(default 0.0)
    izx : float
         Mass moment of inertia about origin(default 0.0)
    izy : float
         Mass moment of inertia about origin(default 0.0)
    izz : float
         Mass moment of inertia about origin(default 0.0)
    cog : Point3
         Coordinates of centre of gravity, (L)
    """

    def __init__(self , _id="", mass=0.0, ixx=0.0, iyx=0.0, iyy=0.0, izx=0.0, izy=0.0, izz=0.0, **kwargs):
        super().__init__(**kwargs)
        self._id = _id
        self.scriptableValues = list()
        self.mass = mass
        self.ixx = ixx
        self.iyx = iyx
        self.iyy = iyy
        self.izx = izx
        self.izy = izy
        self.izz = izz
        self.cog = None
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return StructuralMassBlueprint()


    @property
    def _id(self) -> str:
        """"""
        return self.___id

    @_id.setter
    def _id(self, value: str):
        """Set _id"""
        self.___id = str(value)

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def mass(self) -> float:
        """Mass"""
        return self.__mass

    @mass.setter
    def mass(self, value: float):
        """Set mass"""
        self.__mass = float(value)

    @property
    def ixx(self) -> float:
        """Mass moment of inertia about origin"""
        return self.__ixx

    @ixx.setter
    def ixx(self, value: float):
        """Set ixx"""
        self.__ixx = float(value)

    @property
    def iyx(self) -> float:
        """Mass moment of inertia about origin"""
        return self.__iyx

    @iyx.setter
    def iyx(self, value: float):
        """Set iyx"""
        self.__iyx = float(value)

    @property
    def iyy(self) -> float:
        """Mass moment of inertia about origin"""
        return self.__iyy

    @iyy.setter
    def iyy(self, value: float):
        """Set iyy"""
        self.__iyy = float(value)

    @property
    def izx(self) -> float:
        """Mass moment of inertia about origin"""
        return self.__izx

    @izx.setter
    def izx(self, value: float):
        """Set izx"""
        self.__izx = float(value)

    @property
    def izy(self) -> float:
        """Mass moment of inertia about origin"""
        return self.__izy

    @izy.setter
    def izy(self, value: float):
        """Set izy"""
        self.__izy = float(value)

    @property
    def izz(self) -> float:
        """Mass moment of inertia about origin"""
        return self.__izz

    @izz.setter
    def izz(self, value: float):
        """Set izz"""
        self.__izz = float(value)

    @property
    def cog(self) -> Point3:
        """Coordinates of centre of gravity, (L)"""
        return self.__cog

    @cog.setter
    def cog(self, value: Point3):
        """Set cog"""
        self.__cog = value
