# This an autogenerated file
# 
# Generated with QTFDofItem
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.qtfdofitem import QTFDofItemBlueprint
from typing import Dict
from sima.hydro.qtfvalue import QTFValue
from sima.sima.moao import MOAO
from sima.sima.scriptablevalue import ScriptableValue

class QTFDofItem(MOAO):
    """
    Keyword arguments
    -----------------
    _id : str
         (default "")
    scriptableValues : List[ScriptableValue]
    values : List[QTFValue]
    """

    def __init__(self , _id="", **kwargs):
        super().__init__(**kwargs)
        self._id = _id
        self.scriptableValues = list()
        self.values = list()
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return QTFDofItemBlueprint()


    @property
    def _id(self) -> str:
        """"""
        return self.___id

    @_id.setter
    def _id(self, value: str):
        """Set _id"""
        self.___id = str(value)

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def values(self) -> List[QTFValue]:
        """"""
        return self.__values

    @values.setter
    def values(self, value: List[QTFValue]):
        """Set values"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__values = value
