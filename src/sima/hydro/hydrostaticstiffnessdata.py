# This an autogenerated file
# 
# Generated with HydrostaticStiffnessData
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.hydrostaticstiffnessdata import HydrostaticStiffnessDataBlueprint
from typing import Dict
from sima.hydro.hydrostaticstiffnessmatrix import HydrostaticStiffnessMatrix
from sima.sima.moao import MOAO
from sima.sima.position import Position
from sima.sima.scriptablevalue import ScriptableValue

class HydrostaticStiffnessData(MOAO):
    """
    Keyword arguments
    -----------------
    _id : str
         (default "")
    scriptableValues : List[ScriptableValue]
    matrix : HydrostaticStiffnessMatrix
    reference : Position
    """

    def __init__(self , _id="", **kwargs):
        super().__init__(**kwargs)
        self._id = _id
        self.scriptableValues = list()
        self.matrix = None
        self.reference = None
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return HydrostaticStiffnessDataBlueprint()


    @property
    def _id(self) -> str:
        """"""
        return self.___id

    @_id.setter
    def _id(self, value: str):
        """Set _id"""
        self.___id = str(value)

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def matrix(self) -> HydrostaticStiffnessMatrix:
        """"""
        return self.__matrix

    @matrix.setter
    def matrix(self, value: HydrostaticStiffnessMatrix):
        """Set matrix"""
        self.__matrix = value

    @property
    def reference(self) -> Position:
        """"""
        return self.__reference

    @reference.setter
    def reference(self, value: Position):
        """Set reference"""
        self.__reference = value
