# This an autogenerated file
# 
# Generated with QuadraticCurrentCoefficientItem
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.quadraticcurrentcoefficientitem import QuadraticCurrentCoefficientItemBlueprint
from typing import Dict
from sima.sima.moao import MOAO
from sima.sima.scriptablevalue import ScriptableValue

class QuadraticCurrentCoefficientItem(MOAO):
    """
    Keyword arguments
    -----------------
    _id : str
         (default "")
    scriptableValues : List[ScriptableValue]
    direction : float
         Direction(default 0.0)
    c21 : float
         Quadratic current force coefficient for 1. degree of freedom(default 0.0)
    c22 : float
         Quadratic current force coefficient for 2. degree of freedom(default 0.0)
    c23 : float
         Quadratic current force coefficient for 3. degree of freedom(default 0.0)
    c24 : float
         Quadratic current force coefficient for 4. degree of freedom(default 0.0)
    c25 : float
         Quadratic current force coefficient for 5. degree of freedom(default 0.0)
    c26 : float
         Quadratic current force coefficient for 6. degree of freedom(default 0.0)
    """

    def __init__(self , _id="", direction=0.0, c21=0.0, c22=0.0, c23=0.0, c24=0.0, c25=0.0, c26=0.0, **kwargs):
        super().__init__(**kwargs)
        self._id = _id
        self.scriptableValues = list()
        self.direction = direction
        self.c21 = c21
        self.c22 = c22
        self.c23 = c23
        self.c24 = c24
        self.c25 = c25
        self.c26 = c26
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return QuadraticCurrentCoefficientItemBlueprint()


    @property
    def _id(self) -> str:
        """"""
        return self.___id

    @_id.setter
    def _id(self, value: str):
        """Set _id"""
        self.___id = str(value)

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def direction(self) -> float:
        """Direction"""
        return self.__direction

    @direction.setter
    def direction(self, value: float):
        """Set direction"""
        self.__direction = float(value)

    @property
    def c21(self) -> float:
        """Quadratic current force coefficient for 1. degree of freedom"""
        return self.__c21

    @c21.setter
    def c21(self, value: float):
        """Set c21"""
        self.__c21 = float(value)

    @property
    def c22(self) -> float:
        """Quadratic current force coefficient for 2. degree of freedom"""
        return self.__c22

    @c22.setter
    def c22(self, value: float):
        """Set c22"""
        self.__c22 = float(value)

    @property
    def c23(self) -> float:
        """Quadratic current force coefficient for 3. degree of freedom"""
        return self.__c23

    @c23.setter
    def c23(self, value: float):
        """Set c23"""
        self.__c23 = float(value)

    @property
    def c24(self) -> float:
        """Quadratic current force coefficient for 4. degree of freedom"""
        return self.__c24

    @c24.setter
    def c24(self, value: float):
        """Set c24"""
        self.__c24 = float(value)

    @property
    def c25(self) -> float:
        """Quadratic current force coefficient for 5. degree of freedom"""
        return self.__c25

    @c25.setter
    def c25(self, value: float):
        """Set c25"""
        self.__c25 = float(value)

    @property
    def c26(self) -> float:
        """Quadratic current force coefficient for 6. degree of freedom"""
        return self.__c26

    @c26.setter
    def c26(self, value: float):
        """Set c26"""
        self.__c26 = float(value)
