# This an autogenerated file
# 
# Generated with DiffractedWave
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.diffractedwave import DiffractedWaveBlueprint
from typing import Dict
from sima.hydro.diffractedwaveelevation import DiffractedWaveElevation
from sima.hydro.diffractedwavevelocity import DiffractedWaveVelocity
from sima.sima.moao import MOAO
from sima.sima.point3 import Point3
from sima.sima.scriptablevalue import ScriptableValue

class DiffractedWave(MOAO):
    """
    Keyword arguments
    -----------------
    description : str
         (default "")
    scriptableValues : List[ScriptableValue]
    referencePoint : Point3
    elevation : DiffractedWaveElevation
    velocity : DiffractedWaveVelocity
    """

    def __init__(self , description="", **kwargs):
        super().__init__(**kwargs)
        self.description = description
        self.scriptableValues = list()
        self.referencePoint = None
        self.elevation = None
        self.velocity = None
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return DiffractedWaveBlueprint()


    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = value

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def referencePoint(self) -> Point3:
        """"""
        return self.__referencePoint

    @referencePoint.setter
    def referencePoint(self, value: Point3):
        """Set referencePoint"""
        self.__referencePoint = value

    @property
    def elevation(self) -> DiffractedWaveElevation:
        """"""
        return self.__elevation

    @elevation.setter
    def elevation(self, value: DiffractedWaveElevation):
        """Set elevation"""
        self.__elevation = value

    @property
    def velocity(self) -> DiffractedWaveVelocity:
        """"""
        return self.__velocity

    @velocity.setter
    def velocity(self, value: DiffractedWaveVelocity):
        """Set velocity"""
        self.__velocity = value
