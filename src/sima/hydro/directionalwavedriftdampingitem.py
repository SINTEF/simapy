# This an autogenerated file
# 
# Generated with DirectionalWaveDriftDampingItem
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.directionalwavedriftdampingitem import DirectionalWaveDriftDampingItemBlueprint
from typing import Dict
from sima.hydro.simplifiedwavedriftdamping import SimplifiedWaveDriftDamping
from sima.hydro.wavedriftdampingitem import WaveDriftDampingItem
from sima.sima.scriptablevalue import ScriptableValue

class DirectionalWaveDriftDampingItem(SimplifiedWaveDriftDamping):
    """
    Keyword arguments
    -----------------
    _id : str
         (default "")
    scriptableValues : List[ScriptableValue]
    items : List[WaveDriftDampingItem]
    direction : float
         (default 0.0)
    """

    def __init__(self , _id="", direction=0.0, **kwargs):
        super().__init__(**kwargs)
        self._id = _id
        self.scriptableValues = list()
        self.items = list()
        self.direction = direction
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return DirectionalWaveDriftDampingItemBlueprint()


    @property
    def _id(self) -> str:
        """"""
        return self.___id

    @_id.setter
    def _id(self, value: str):
        """Set _id"""
        self.___id = str(value)

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def items(self) -> List[WaveDriftDampingItem]:
        """"""
        return self.__items

    @items.setter
    def items(self, value: List[WaveDriftDampingItem]):
        """Set items"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__items = value

    @property
    def direction(self) -> float:
        """"""
        return self.__direction

    @direction.setter
    def direction(self, value: float):
        """Set direction"""
        self.__direction = float(value)
