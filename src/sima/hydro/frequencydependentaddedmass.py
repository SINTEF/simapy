# This an autogenerated file
# 
# Generated with FrequencyDependentAddedMass
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.frequencydependentaddedmass import FrequencyDependentAddedMassBlueprint
from numpy import ndarray,asarray
from sima.hydro.twodofdata import TwoDofData
from sima.sima.moao import MOAO
from sima.sima.scriptablevalue import ScriptableValue

class FrequencyDependentAddedMass(MOAO):
    """
    Keyword arguments
    -----------------
    description : str
         (default "")
    scriptableValues : List[ScriptableValue]
    frequencies : ndarray
    items : List[TwoDofData]
    """

    def __init__(self , description="", **kwargs):
        super().__init__(**kwargs)
        self.description = description
        self.scriptableValues = list()
        self.frequencies = ndarray(1)
        self.items = list()
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return FrequencyDependentAddedMassBlueprint()


    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = value

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def frequencies(self) -> ndarray:
        """"""
        return self.__frequencies

    @frequencies.setter
    def frequencies(self, value: ndarray):
        """Set frequencies"""
        self.__frequencies = asarray(value)

    @property
    def items(self) -> List[TwoDofData]:
        """"""
        return self.__items

    @items.setter
    def items(self, value: List[TwoDofData]):
        """Set items"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__items = value
