# This an autogenerated file
# 
# Generated with QTFValue
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.qtfvalue import QTFValueBlueprint
from typing import Dict
from sima.sima.moao import MOAO
from sima.sima.scriptablevalue import ScriptableValue

class QTFValue(MOAO):
    """
    Keyword arguments
    -----------------
    description : str
         (default "")
    scriptableValues : List[ScriptableValue]
    dir1 : int
         (default 0)
    dir2 : int
         (default 0)
    freq1 : int
         (default 0)
    freq2 : int
         (default 0)
    re : float
         (default 0.0)
    im : float
         (default 0.0)
    """

    def __init__(self , description="", dir1=0, dir2=0, freq1=0, freq2=0, re=0.0, im=0.0, **kwargs):
        super().__init__(**kwargs)
        self.description = description
        self.scriptableValues = list()
        self.dir1 = dir1
        self.dir2 = dir2
        self.freq1 = freq1
        self.freq2 = freq2
        self.re = re
        self.im = im
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return QTFValueBlueprint()


    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = value

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def dir1(self) -> int:
        """"""
        return self.__dir1

    @dir1.setter
    def dir1(self, value: int):
        """Set dir1"""
        self.__dir1 = int(value)

    @property
    def dir2(self) -> int:
        """"""
        return self.__dir2

    @dir2.setter
    def dir2(self, value: int):
        """Set dir2"""
        self.__dir2 = int(value)

    @property
    def freq1(self) -> int:
        """"""
        return self.__freq1

    @freq1.setter
    def freq1(self, value: int):
        """Set freq1"""
        self.__freq1 = int(value)

    @property
    def freq2(self) -> int:
        """"""
        return self.__freq2

    @freq2.setter
    def freq2(self, value: int):
        """Set freq2"""
        self.__freq2 = int(value)

    @property
    def re(self) -> float:
        """"""
        return self.__re

    @re.setter
    def re(self, value: float):
        """Set re"""
        self.__re = float(value)

    @property
    def im(self) -> float:
        """"""
        return self.__im

    @im.setter
    def im(self, value: float):
        """Set im"""
        self.__im = float(value)
