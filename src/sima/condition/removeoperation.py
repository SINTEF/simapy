# This an autogenerated file
# 
# Generated with RemoveOperation
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.removeoperation import RemoveOperationBlueprint
from typing import Dict
from sima.condition.modelvariationoperation import ModelVariationOperation
from sima.sima.modelreference import ModelReference
from sima.sima.scriptablevalue import ScriptableValue

class RemoveOperation(ModelVariationOperation):
    """
    Keyword arguments
    -----------------
    description : str
         (default "")
    scriptableValues : List[ScriptableValue]
    name : str
         (default None)
    removals : List[ModelReference]
    """

    def __init__(self , description="", **kwargs):
        super().__init__(**kwargs)
        self.description = description
        self.scriptableValues = list()
        self.name = None
        self.removals = list()
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return RemoveOperationBlueprint()


    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = value

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = value

    @property
    def removals(self) -> List[ModelReference]:
        """"""
        return self.__removals

    @removals.setter
    def removals(self, value: List[ModelReference]):
        """Set removals"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__removals = value
