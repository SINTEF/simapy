# This an autogenerated file
# 
# Generated with ConditionSetResultContainer
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.conditionsetresultcontainer import ConditionSetResultContainerBlueprint
from typing import Dict
from sima.sima.conditionresultcontainer import ConditionResultContainer
from sima.sima.property import Property
from sima.sima.resultcontainer import ResultContainer
from sima.sima.scriptablevalue import ScriptableValue

class ConditionSetResultContainer(ResultContainer):
    """
    Keyword arguments
    -----------------
    _id : str
         (default "")
    scriptableValues : List[ScriptableValue]
    name : str
         (default "")
    properties : List[Property]
    resultContainers : List[ConditionResultContainer]
    """

    def __init__(self , _id="", name="", **kwargs):
        super().__init__(**kwargs)
        self._id = _id
        self.scriptableValues = list()
        self.name = name
        self.properties = list()
        self.resultContainers = list()
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return ConditionSetResultContainerBlueprint()


    @property
    def _id(self) -> str:
        """"""
        return self.___id

    @_id.setter
    def _id(self, value: str):
        """Set _id"""
        self.___id = str(value)

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = str(value)

    @property
    def properties(self) -> List[Property]:
        """"""
        return self.__properties

    @properties.setter
    def properties(self, value: List[Property]):
        """Set properties"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__properties = value

    @property
    def resultContainers(self) -> List[ConditionResultContainer]:
        """"""
        return self.__resultContainers

    @resultContainers.setter
    def resultContainers(self, value: List[ConditionResultContainer]):
        """Set resultContainers"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__resultContainers = value
