# This an autogenerated file
# 
# Generated with EnvironmentsContainer
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.environmentscontainer import EnvironmentsContainerBlueprint
from typing import Dict
from sima.environment.environment import Environment
from sima.sima.moao import MOAO
from sima.sima.scriptablevalue import ScriptableValue

class EnvironmentsContainer(MOAO):
    """
    Keyword arguments
    -----------------
    description : str
         (default "")
    scriptableValues : List[ScriptableValue]
    environments : List[Environment]
    """

    def __init__(self , description="", **kwargs):
        super().__init__(**kwargs)
        self.description = description
        self.scriptableValues = list()
        self.environments = list()
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return EnvironmentsContainerBlueprint()


    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = value

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def environments(self) -> List[Environment]:
        """"""
        return self.__environments

    @environments.setter
    def environments(self, value: List[Environment]):
        """Set environments"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__environments = value
