# This an autogenerated file
# 
# Generated with Section
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.section import SectionBlueprint
from typing import Dict
from marmo.report.reportitem import ReportItem
from marmo.report.reportitemcontainer import ReportItemContainer

class Section(ReportItemContainer,ReportItem):
    """
    Keyword arguments
    -----------------
    items : List[ReportItem]
    title : str
         (default "")
    landscape : bool
         (default False)
    """

    def __init__(self , title="", landscape=False, **kwargs):
        super().__init__(**kwargs)
        self.items = list()
        self.title = title
        self.landscape = landscape
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return SectionBlueprint()


    @property
    def items(self) -> List[ReportItem]:
        """"""
        return self.__items

    @items.setter
    def items(self, value: List[ReportItem]):
        """Set items"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__items = value

    @property
    def title(self) -> str:
        """"""
        return self.__title

    @title.setter
    def title(self, value: str):
        """Set title"""
        self.__title = str(value)

    @property
    def landscape(self) -> bool:
        """"""
        return self.__landscape

    @landscape.setter
    def landscape(self, value: bool):
        """Set landscape"""
        self.__landscape = bool(value)
