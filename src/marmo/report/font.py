# This an autogenerated file
# 
# Generated with Font
from typing import Dict,Sequence,List
from dmt.entity import Entity
from dmt.blueprint import Blueprint
from .blueprints.font import FontBlueprint
from typing import Dict
from marmo.report.fontstyle import FontStyle

class Font(Entity):
    """
    Keyword arguments
    -----------------
    name : str
         (default "")
    description : str
         (default "")
    size : int
         (default 10)
    font : str
         (default "")
    style : FontStyle
    """

    def __init__(self , name:str="", description:str="", size:int=10, font:str="", style:FontStyle=FontStyle.NORMAL, **kwargs):
        super().__init__(**kwargs)
        self.__name = name
        self.__description = description
        self.__size = size
        self.__font = font
        self.__style = style
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return FontBlueprint()


    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = str(value)

    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = str(value)

    @property
    def size(self) -> int:
        """"""
        return self.__size

    @size.setter
    def size(self, value: int):
        """Set size"""
        self.__size = int(value)

    @property
    def font(self) -> str:
        """"""
        return self.__font

    @font.setter
    def font(self, value: str):
        """Set font"""
        self.__font = str(value)

    @property
    def style(self) -> FontStyle:
        """"""
        return self.__style

    @style.setter
    def style(self, value: FontStyle):
        """Set style"""
        self.__style = value
