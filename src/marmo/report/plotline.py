# This an autogenerated file
# 
# Generated with PlotLine
from dmt.entity import Entity
from dmt.blueprint import Blueprint
from .blueprints.plotline import PlotLineBlueprint
from typing import Dict,Sequence,List
from marmo.report.linestyle import LineStyle
from marmo.report.pointstyle import PointStyle

class PlotLine(Entity):
    """
    
    
    Keyword arguments
    -----------------
    name : str 
         (default "")
    description : str 
         (default "")
    xlabel : str 
         (default "")
    ylabel : str 
         (default "")
    showlegend : bool 
         (default False)
    x : Sequence[float] 
         
    y : Sequence[float] 
         
    linewidth : int 
         (default 0)
    pointsize : int 
         (default 0)
    linestyle : LineStyle 
         
    pointstyle : PointStyle 
         
    color : str 
         (default "")
    """

    def __init__(self , name:str="", description:str="", xlabel:str="", ylabel:str="", showlegend:bool=False, linewidth:int=0, pointsize:int=0, linestyle:LineStyle=LineStyle.solid, pointstyle:PointStyle=PointStyle.none, color:str="", **kwargs):
        self.__name = name
        self.__description = description
        self.__xlabel = xlabel
        self.__ylabel = ylabel
        self.__showlegend = showlegend
        self.__x = list()
        self.__y = list()
        self.__linewidth = linewidth
        self.__pointsize = pointsize
        self.__linestyle = linestyle
        self.__pointstyle = pointstyle
        self.__color = color
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return PlotLineBlueprint()


    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = str(value)

    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = str(value)

    @property
    def xlabel(self) -> str:
        """"""
        return self.__xlabel

    @xlabel.setter
    def xlabel(self, value: str):
        """Set xlabel"""
        self.__xlabel = str(value)

    @property
    def ylabel(self) -> str:
        """"""
        return self.__ylabel

    @ylabel.setter
    def ylabel(self, value: str):
        """Set ylabel"""
        self.__ylabel = str(value)

    @property
    def showlegend(self) -> bool:
        """"""
        return self.__showlegend

    @showlegend.setter
    def showlegend(self, value: bool):
        """Set showlegend"""
        self.__showlegend = bool(value)

    @property
    def x(self) -> Sequence[float]:
        """"""
        return self.__x

    @x.setter
    def x(self, value: Sequence[float]):
        """Set x"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__x = value

    @property
    def y(self) -> Sequence[float]:
        """"""
        return self.__y

    @y.setter
    def y(self, value: Sequence[float]):
        """Set y"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__y = value

    @property
    def linewidth(self) -> int:
        """"""
        return self.__linewidth

    @linewidth.setter
    def linewidth(self, value: int):
        """Set linewidth"""
        self.__linewidth = int(value)

    @property
    def pointsize(self) -> int:
        """"""
        return self.__pointsize

    @pointsize.setter
    def pointsize(self, value: int):
        """Set pointsize"""
        self.__pointsize = int(value)

    @property
    def linestyle(self) -> LineStyle:
        """"""
        return self.__linestyle

    @linestyle.setter
    def linestyle(self, value: LineStyle):
        """Set linestyle"""
        self.__linestyle = value

    @property
    def pointstyle(self) -> PointStyle:
        """"""
        return self.__pointstyle

    @pointstyle.setter
    def pointstyle(self, value: PointStyle):
        """Set pointstyle"""
        self.__pointstyle = value

    @property
    def color(self) -> str:
        """"""
        return self.__color

    @color.setter
    def color(self, value: str):
        """Set color"""
        self.__color = str(value)
