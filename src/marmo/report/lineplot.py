# This an autogenerated file
# 
# Generated with LinePlot
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.lineplot import LinePlotBlueprint
from typing import Dict
from dmt.entity import Entity
from marmo.report.axis import Axis
from marmo.report.font import Font
from marmo.report.plotline import PlotLine
from marmo.report.plotsize import PlotSize

class LinePlot(Entity):
    """
    Keyword arguments
    -----------------
    description : str
         (default "")
    title : str
         (default None)
    xlabel : str
         (default None)
    ylabel : str
         (default None)
    showlegend : bool
         (default True)
    showtitle : bool
         (default True)
    caption : str
         (default None)
    width : int
         (default 0)
    height : int
         (default 0)
    size : PlotSize
    titlefont : Font
    legendfont : Font
    xaxis : Axis
    yaxis : Axis
    lines : List[PlotLine]
    """

    def __init__(self , description="", showlegend=True, showtitle=True, width=0, height=0, size=PlotSize.DYNAMIC, **kwargs):
        super().__init__(**kwargs)
        self.description = description
        self.title = None
        self.xlabel = None
        self.ylabel = None
        self.showlegend = showlegend
        self.showtitle = showtitle
        self.caption = None
        self.width = width
        self.height = height
        self.size = size
        self.titlefont = None
        self.legendfont = None
        self.xaxis = None
        self.yaxis = None
        self.lines = list()
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return LinePlotBlueprint()


    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = value

    @property
    def title(self) -> str:
        """"""
        return self.__title

    @title.setter
    def title(self, value: str):
        """Set title"""
        self.__title = value

    @property
    def xlabel(self) -> str:
        """"""
        return self.__xlabel

    @xlabel.setter
    def xlabel(self, value: str):
        """Set xlabel"""
        self.__xlabel = value

    @property
    def ylabel(self) -> str:
        """"""
        return self.__ylabel

    @ylabel.setter
    def ylabel(self, value: str):
        """Set ylabel"""
        self.__ylabel = value

    @property
    def showlegend(self) -> bool:
        """"""
        return self.__showlegend

    @showlegend.setter
    def showlegend(self, value: bool):
        """Set showlegend"""
        self.__showlegend = bool(value)

    @property
    def showtitle(self) -> bool:
        """"""
        return self.__showtitle

    @showtitle.setter
    def showtitle(self, value: bool):
        """Set showtitle"""
        self.__showtitle = bool(value)

    @property
    def caption(self) -> str:
        """"""
        return self.__caption

    @caption.setter
    def caption(self, value: str):
        """Set caption"""
        self.__caption = value

    @property
    def width(self) -> int:
        """"""
        return self.__width

    @width.setter
    def width(self, value: int):
        """Set width"""
        self.__width = int(value)

    @property
    def height(self) -> int:
        """"""
        return self.__height

    @height.setter
    def height(self, value: int):
        """Set height"""
        self.__height = int(value)

    @property
    def size(self) -> PlotSize:
        """"""
        return self.__size

    @size.setter
    def size(self, value: PlotSize):
        """Set size"""
        self.__size = value

    @property
    def titlefont(self) -> Font:
        """"""
        return self.__titlefont

    @titlefont.setter
    def titlefont(self, value: Font):
        """Set titlefont"""
        self.__titlefont = value

    @property
    def legendfont(self) -> Font:
        """"""
        return self.__legendfont

    @legendfont.setter
    def legendfont(self, value: Font):
        """Set legendfont"""
        self.__legendfont = value

    @property
    def xaxis(self) -> Axis:
        """"""
        return self.__xaxis

    @xaxis.setter
    def xaxis(self, value: Axis):
        """Set xaxis"""
        self.__xaxis = value

    @property
    def yaxis(self) -> Axis:
        """"""
        return self.__yaxis

    @yaxis.setter
    def yaxis(self, value: Axis):
        """Set yaxis"""
        self.__yaxis = value

    @property
    def lines(self) -> List[PlotLine]:
        """"""
        return self.__lines

    @lines.setter
    def lines(self, value: List[PlotLine]):
        """Set lines"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__lines = value
