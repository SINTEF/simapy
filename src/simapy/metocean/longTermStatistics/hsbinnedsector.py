# This an autogenerated file
# Statistical representation of a a sector.
# Generated with HsBinnedSector
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.hsbinnedsector import HsBinnedSectorBlueprint
from typing import Dict
from .hsbinned import HsBinned
from dmt.namedentity import NamedEntity

class HsBinnedSector(NamedEntity):
    """
    Statistical representation of a a sector.
    Keyword arguments
    -----------------
    description : str
         (default "")
    name : str
         unique name for the sector, e.g. sec120, or omni.(default None)
    direction : float
         mean sector direction.(default 0.0)
    sectorSize : float
         sector size.(default 0.0)
    probability : float
         probability of this combination(default 0.0)
    bins : List[HsBinned]
         different Hs bins.
    """

    def __init__(self , description="", direction=0.0, sectorSize=0.0, probability=0.0, **kwargs):
        super().__init__(**kwargs)
        self.description = description
        self.name = None
        self.direction = direction
        self.sectorSize = sectorSize
        self.probability = probability
        self.bins = list()
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return HsBinnedSectorBlueprint()


    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = value

    @property
    def name(self) -> str:
        """unique name for the sector, e.g. sec120, or omni."""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = value

    @property
    def direction(self) -> float:
        """mean sector direction."""
        return self.__direction

    @direction.setter
    def direction(self, value: float):
        """Set direction"""
        self.__direction = float(value)

    @property
    def sectorSize(self) -> float:
        """sector size."""
        return self.__sectorSize

    @sectorSize.setter
    def sectorSize(self, value: float):
        """Set sectorSize"""
        self.__sectorSize = float(value)

    @property
    def probability(self) -> float:
        """probability of this combination"""
        return self.__probability

    @probability.setter
    def probability(self, value: float):
        """Set probability"""
        self.__probability = float(value)

    @property
    def bins(self) -> List[HsBinned]:
        """different Hs bins."""
        return self.__bins

    @bins.setter
    def bins(self, value: List[HsBinned]):
        """Set bins"""
        if not isinstance(value, Sequence):
            raise ValueError("Expected sequense, but was " , type(value))
        self.__bins = value
