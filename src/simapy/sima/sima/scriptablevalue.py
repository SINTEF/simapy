# This an autogenerated file
# 
# Generated with ScriptableValue
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.scriptablevalue import ScriptableValueBlueprint
from typing import Dict
from dmt.entity import Entity

class ScriptableValue(Entity):
    """
    Keyword arguments
    -----------------
    description : str
         (default "")
    _id : str
         (default None)
    script : str
         (default None)
    cyclic : bool
         (default False)
    feature : str
         (default None)
    index : int
         (default -1)
    """

    def __init__(self , description="", cyclic=False, index=-1, **kwargs):
        super().__init__(**kwargs)
        self.description = description
        self._id = None
        self.script = None
        self.cyclic = cyclic
        self.feature = None
        self.index = index
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return ScriptableValueBlueprint()


    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = value

    @property
    def _id(self) -> str:
        """"""
        return self.___id

    @_id.setter
    def _id(self, value: str):
        """Set _id"""
        self.___id = value

    @property
    def script(self) -> str:
        """"""
        return self.__script

    @script.setter
    def script(self, value: str):
        """Set script"""
        self.__script = value

    @property
    def cyclic(self) -> bool:
        """"""
        return self.__cyclic

    @cyclic.setter
    def cyclic(self, value: bool):
        """Set cyclic"""
        self.__cyclic = bool(value)

    @property
    def feature(self) -> str:
        """"""
        return self.__feature

    @feature.setter
    def feature(self, value: str):
        """Set feature"""
        self.__feature = value

    @property
    def index(self) -> int:
        """"""
        return self.__index

    @index.setter
    def index(self, value: int):
        """Set index"""
        self.__index = int(value)
