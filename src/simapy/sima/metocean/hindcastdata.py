# This an autogenerated file
# 
# Generated with HindcastData
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.hindcastdata import HindcastDataBlueprint
from typing import Dict
from ..sima import NamedObject
from ..sima import ScriptableValue
from .hindcastlevelcontainer import HindcastLevelContainer
from .hindcastwavecontainer import HindcastWaveContainer

class HindcastData(NamedObject):
    """
    Keyword arguments
    -----------------
    description : str
         (default "")
    scriptableValues : List[ScriptableValue]
    name : str
         (default None)
    dataFile : str
         (default None)
    path : str
         (default None)
    firstDate : str
         (default None)
    lastDate : str
         (default None)
    latitude : float
         (default 0.0)
    longitude : float
         (default 0.0)
    waveData : HindcastWaveContainer
    windData : HindcastLevelContainer
    currentData : HindcastLevelContainer
    """

    def __init__(self , description="", latitude=0.0, longitude=0.0, **kwargs):
        super().__init__(**kwargs)
        self.description = description
        self.scriptableValues = list()
        self.name = None
        self.dataFile = None
        self.path = None
        self.firstDate = None
        self.lastDate = None
        self.latitude = latitude
        self.longitude = longitude
        self.waveData = None
        self.windData = None
        self.currentData = None
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return HindcastDataBlueprint()


    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = value

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise ValueError("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = value

    @property
    def dataFile(self) -> str:
        """"""
        return self.__dataFile

    @dataFile.setter
    def dataFile(self, value: str):
        """Set dataFile"""
        self.__dataFile = value

    @property
    def path(self) -> str:
        """"""
        return self.__path

    @path.setter
    def path(self, value: str):
        """Set path"""
        self.__path = value

    @property
    def firstDate(self) -> str:
        """"""
        return self.__firstDate

    @firstDate.setter
    def firstDate(self, value: str):
        """Set firstDate"""
        self.__firstDate = value

    @property
    def lastDate(self) -> str:
        """"""
        return self.__lastDate

    @lastDate.setter
    def lastDate(self, value: str):
        """Set lastDate"""
        self.__lastDate = value

    @property
    def latitude(self) -> float:
        """"""
        return self.__latitude

    @latitude.setter
    def latitude(self, value: float):
        """Set latitude"""
        self.__latitude = float(value)

    @property
    def longitude(self) -> float:
        """"""
        return self.__longitude

    @longitude.setter
    def longitude(self, value: float):
        """Set longitude"""
        self.__longitude = float(value)

    @property
    def waveData(self) -> HindcastWaveContainer:
        """"""
        return self.__waveData

    @waveData.setter
    def waveData(self, value: HindcastWaveContainer):
        """Set waveData"""
        self.__waveData = value

    @property
    def windData(self) -> HindcastLevelContainer:
        """"""
        return self.__windData

    @windData.setter
    def windData(self, value: HindcastLevelContainer):
        """Set windData"""
        self.__windData = value

    @property
    def currentData(self) -> HindcastLevelContainer:
        """"""
        return self.__currentData

    @currentData.setter
    def currentData(self, value: HindcastLevelContainer):
        """Set currentData"""
        self.__currentData = value
