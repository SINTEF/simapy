# This an autogenerated file
# 
# Generated with WasimResultExport
from __future__ import annotations
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.wasimresultexport import WasimResultExportBlueprint
from typing import Dict
from ..sima import MOAO
from ..sima import ScriptableValue
from .bodyforcecomponentreference import BodyForceComponentReference
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from .simobody import SIMOBody

class WasimResultExport(MOAO):
    """
    Keyword arguments
    -----------------
    description : str
         (default "")
    scriptableValues : List[ScriptableValue]
    floaterBody : SIMOBody
    pointForces : List[BodyForceComponentReference]
    """

    def __init__(self , description="", **kwargs):
        super().__init__(**kwargs)
        self.description = description
        self.scriptableValues = list()
        self.floaterBody = None
        self.pointForces = list()
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return WasimResultExportBlueprint()


    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = value

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise ValueError("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def floaterBody(self) -> SIMOBody:
        """"""
        return self.__floaterBody

    @floaterBody.setter
    def floaterBody(self, value: SIMOBody):
        """Set floaterBody"""
        self.__floaterBody = value

    @property
    def pointForces(self) -> List[BodyForceComponentReference]:
        """"""
        return self.__pointForces

    @pointForces.setter
    def pointForces(self, value: List[BodyForceComponentReference]):
        """Set pointForces"""
        if not isinstance(value, Sequence):
            raise ValueError("Expected sequense, but was " , type(value))
        self.__pointForces = value
