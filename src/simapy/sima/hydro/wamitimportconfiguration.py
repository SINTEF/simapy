# This an autogenerated file
# 
# Generated with WamitImportConfiguration
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.wamitimportconfiguration import WamitImportConfigurationBlueprint
from typing import Dict
from ..sima import MOAO
from ..sima import ScriptableValue
from .retardationfunctioncalculationparameters import RetardationFunctionCalculationParameters
from .wamitqtfimportoption import WamitQtfImportOption
from .wamitwavedriftforceoption import WamitWaveDriftForceOption
from .wamitwaveforceoption import WamitWaveForceOption

class WamitImportConfiguration(MOAO):
    """
    Keyword arguments
    -----------------
    description : str
         (default "")
    scriptableValues : List[ScriptableValue]
    retardationFunctionParameters : RetardationFunctionCalculationParameters
    waveDriftForce : WamitWaveDriftForceOption
    waveForce : WamitWaveForceOption
    sumQTF : WamitQtfImportOption
    diffQTF : WamitQtfImportOption
    diffractedWaveElevation : bool
         (default True)
    diffractedWaveVelocity : bool
         (default True)
    """

    def __init__(self , description="", waveDriftForce=WamitWaveDriftForceOption.MOMENTUM, waveForce=WamitWaveForceOption.DIFFRACTION, sumQTF=WamitQtfImportOption.NONE, diffQTF=WamitQtfImportOption.NONE, diffractedWaveElevation=True, diffractedWaveVelocity=True, **kwargs):
        super().__init__(**kwargs)
        self.description = description
        self.scriptableValues = list()
        self.retardationFunctionParameters = None
        self.waveDriftForce = waveDriftForce
        self.waveForce = waveForce
        self.sumQTF = sumQTF
        self.diffQTF = diffQTF
        self.diffractedWaveElevation = diffractedWaveElevation
        self.diffractedWaveVelocity = diffractedWaveVelocity
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return WamitImportConfigurationBlueprint()


    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = value

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise ValueError("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def retardationFunctionParameters(self) -> RetardationFunctionCalculationParameters:
        """"""
        return self.__retardationFunctionParameters

    @retardationFunctionParameters.setter
    def retardationFunctionParameters(self, value: RetardationFunctionCalculationParameters):
        """Set retardationFunctionParameters"""
        self.__retardationFunctionParameters = value

    @property
    def waveDriftForce(self) -> WamitWaveDriftForceOption:
        """"""
        return self.__waveDriftForce

    @waveDriftForce.setter
    def waveDriftForce(self, value: WamitWaveDriftForceOption):
        """Set waveDriftForce"""
        self.__waveDriftForce = value

    @property
    def waveForce(self) -> WamitWaveForceOption:
        """"""
        return self.__waveForce

    @waveForce.setter
    def waveForce(self, value: WamitWaveForceOption):
        """Set waveForce"""
        self.__waveForce = value

    @property
    def sumQTF(self) -> WamitQtfImportOption:
        """"""
        return self.__sumQTF

    @sumQTF.setter
    def sumQTF(self, value: WamitQtfImportOption):
        """Set sumQTF"""
        self.__sumQTF = value

    @property
    def diffQTF(self) -> WamitQtfImportOption:
        """"""
        return self.__diffQTF

    @diffQTF.setter
    def diffQTF(self, value: WamitQtfImportOption):
        """Set diffQTF"""
        self.__diffQTF = value

    @property
    def diffractedWaveElevation(self) -> bool:
        """"""
        return self.__diffractedWaveElevation

    @diffractedWaveElevation.setter
    def diffractedWaveElevation(self, value: bool):
        """Set diffractedWaveElevation"""
        self.__diffractedWaveElevation = bool(value)

    @property
    def diffractedWaveVelocity(self) -> bool:
        """"""
        return self.__diffractedWaveVelocity

    @diffractedWaveVelocity.setter
    def diffractedWaveVelocity(self, value: bool):
        """Set diffractedWaveVelocity"""
        self.__diffractedWaveVelocity = bool(value)
