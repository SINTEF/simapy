# This an autogenerated file
# 
# Generated with LinearHydrostatics
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.linearhydrostatics import LinearHydrostaticsBlueprint
from typing import Dict
from ..sima import ScriptableValue
from .hydrostaticstiffnessdata import HydrostaticStiffnessData

class LinearHydrostatics(HydrostaticStiffnessData):
    """
    Keyword arguments
    -----------------
    description : str
         (default "")
    scriptableValues : List[ScriptableValue]
    xcob : float
         Center of buoyancy - x(default 0.0)
    ycob : float
         Center of buoyancy - y(default 0.0)
    zcob : float
         Center of buoyancy - z(default 0.0)
    displacedVolume : float
         (default 0.0)
    k33norm : float
         (default 0.0)
    k34norm : float
         (default 0.0)
    k35norm : float
         (default 0.0)
    k44norm : float
         (default 0.0)
    k45norm : float
         (default 0.0)
    k55norm : float
         (default 0.0)
    """

    def __init__(self , description="", xcob=0.0, ycob=0.0, zcob=0.0, displacedVolume=0.0, k33norm=0.0, k34norm=0.0, k35norm=0.0, k44norm=0.0, k45norm=0.0, k55norm=0.0, **kwargs):
        super().__init__(**kwargs)
        self.description = description
        self.scriptableValues = list()
        self.xcob = xcob
        self.ycob = ycob
        self.zcob = zcob
        self.displacedVolume = displacedVolume
        self.k33norm = k33norm
        self.k34norm = k34norm
        self.k35norm = k35norm
        self.k44norm = k44norm
        self.k45norm = k45norm
        self.k55norm = k55norm
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return LinearHydrostaticsBlueprint()


    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = value

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise ValueError("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def xcob(self) -> float:
        """Center of buoyancy - x"""
        return self.__xcob

    @xcob.setter
    def xcob(self, value: float):
        """Set xcob"""
        self.__xcob = float(value)

    @property
    def ycob(self) -> float:
        """Center of buoyancy - y"""
        return self.__ycob

    @ycob.setter
    def ycob(self, value: float):
        """Set ycob"""
        self.__ycob = float(value)

    @property
    def zcob(self) -> float:
        """Center of buoyancy - z"""
        return self.__zcob

    @zcob.setter
    def zcob(self, value: float):
        """Set zcob"""
        self.__zcob = float(value)

    @property
    def displacedVolume(self) -> float:
        """"""
        return self.__displacedVolume

    @displacedVolume.setter
    def displacedVolume(self, value: float):
        """Set displacedVolume"""
        self.__displacedVolume = float(value)

    @property
    def k33norm(self) -> float:
        """"""
        return self.__k33norm

    @k33norm.setter
    def k33norm(self, value: float):
        """Set k33norm"""
        self.__k33norm = float(value)

    @property
    def k34norm(self) -> float:
        """"""
        return self.__k34norm

    @k34norm.setter
    def k34norm(self, value: float):
        """Set k34norm"""
        self.__k34norm = float(value)

    @property
    def k35norm(self) -> float:
        """"""
        return self.__k35norm

    @k35norm.setter
    def k35norm(self, value: float):
        """Set k35norm"""
        self.__k35norm = float(value)

    @property
    def k44norm(self) -> float:
        """"""
        return self.__k44norm

    @k44norm.setter
    def k44norm(self, value: float):
        """Set k44norm"""
        self.__k44norm = float(value)

    @property
    def k45norm(self) -> float:
        """"""
        return self.__k45norm

    @k45norm.setter
    def k45norm(self, value: float):
        """Set k45norm"""
        self.__k45norm = float(value)

    @property
    def k55norm(self) -> float:
        """"""
        return self.__k55norm

    @k55norm.setter
    def k55norm(self, value: float):
        """Set k55norm"""
        self.__k55norm = float(value)
