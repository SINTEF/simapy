# This an autogenerated file
# 
# Generated with RetardationFunctionCalculationParameters
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.retardationfunctioncalculationparameters import RetardationFunctionCalculationParametersBlueprint
from typing import Dict
from ..sima import MOAO
from ..sima import ScriptableValue

class RetardationFunctionCalculationParameters(MOAO):
    """
    Keyword arguments
    -----------------
    description : str
         (default "")
    scriptableValues : List[ScriptableValue]
    timeStep : float
         Retardation function timeStep(default 0.5)
    useLimitingFrequencies : bool
         Use added mass zero and/or added mass infinite if these exist(default True)
    cutFactor : float
         factor for cut of fft. Default 200(default 200.0)
    powerOfTwo : int
         Length of array used for fft/ifft. Default 2**13.(default 13)
    massCutFactor : float
         Factor used together with structural mass to cut a degree of freedom.  Small factor means larger chance of cutting(default 100000.0)
    """

    def __init__(self , description="", timeStep=0.5, useLimitingFrequencies=True, cutFactor=200.0, powerOfTwo=13, massCutFactor=100000.0, **kwargs):
        super().__init__(**kwargs)
        self.description = description
        self.scriptableValues = list()
        self.timeStep = timeStep
        self.useLimitingFrequencies = useLimitingFrequencies
        self.cutFactor = cutFactor
        self.powerOfTwo = powerOfTwo
        self.massCutFactor = massCutFactor
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return RetardationFunctionCalculationParametersBlueprint()


    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = value

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise ValueError("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def timeStep(self) -> float:
        """Retardation function timeStep"""
        return self.__timeStep

    @timeStep.setter
    def timeStep(self, value: float):
        """Set timeStep"""
        self.__timeStep = float(value)

    @property
    def useLimitingFrequencies(self) -> bool:
        """Use added mass zero and/or added mass infinite if these exist"""
        return self.__useLimitingFrequencies

    @useLimitingFrequencies.setter
    def useLimitingFrequencies(self, value: bool):
        """Set useLimitingFrequencies"""
        self.__useLimitingFrequencies = bool(value)

    @property
    def cutFactor(self) -> float:
        """factor for cut of fft. Default 200"""
        return self.__cutFactor

    @cutFactor.setter
    def cutFactor(self, value: float):
        """Set cutFactor"""
        self.__cutFactor = float(value)

    @property
    def powerOfTwo(self) -> int:
        """Length of array used for fft/ifft. Default 2**13."""
        return self.__powerOfTwo

    @powerOfTwo.setter
    def powerOfTwo(self, value: int):
        """Set powerOfTwo"""
        self.__powerOfTwo = int(value)

    @property
    def massCutFactor(self) -> float:
        """Factor used together with structural mass to cut a degree of freedom.  Small factor means larger chance of cutting"""
        return self.__massCutFactor

    @massCutFactor.setter
    def massCutFactor(self, value: float):
        """Set massCutFactor"""
        self.__massCutFactor = float(value)
