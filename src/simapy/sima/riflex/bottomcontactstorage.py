# This an autogenerated file
# 
# Generated with BottomContactStorage
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.bottomcontactstorage import BottomContactStorageBlueprint
from typing import Dict
from ..sima import MOAO
from ..sima import ScriptableValue
from .bottomcontactforcestorage import BottomContactForceStorage
from .fileformatcode import FileFormatCode
from .touchdownpointstorage import TouchDownPointStorage

class BottomContactStorage(MOAO):
    """
    Keyword arguments
    -----------------
    description : str
         (default "")
    scriptableValues : List[ScriptableValue]
    store : bool
         Store results for seafloor contact elements and / or soil layer profile (SLP) contact elements(default False)
    storageStep : int
         Code for storage of internal forces. Storage for every <storage step> given.(default 1)
    format : FileFormatCode
         Format code for additional output of time series
    forces : List[BottomContactForceStorage]
         Specification of nodes for displacement storage
    touchDownPoints : List[TouchDownPointStorage]
         Specification of nodes for displacement storage
    """

    def __init__(self , description="", store=False, storageStep=1, format=FileFormatCode.BINARY_OUTPUT_ONLY, **kwargs):
        super().__init__(**kwargs)
        self.description = description
        self.scriptableValues = list()
        self.store = store
        self.storageStep = storageStep
        self.format = format
        self.forces = list()
        self.touchDownPoints = list()
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return BottomContactStorageBlueprint()


    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = value

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise ValueError("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def store(self) -> bool:
        """Store results for seafloor contact elements and / or soil layer profile (SLP) contact elements"""
        return self.__store

    @store.setter
    def store(self, value: bool):
        """Set store"""
        self.__store = bool(value)

    @property
    def storageStep(self) -> int:
        """Code for storage of internal forces. Storage for every <storage step> given."""
        return self.__storageStep

    @storageStep.setter
    def storageStep(self, value: int):
        """Set storageStep"""
        self.__storageStep = int(value)

    @property
    def format(self) -> FileFormatCode:
        """Format code for additional output of time series"""
        return self.__format

    @format.setter
    def format(self, value: FileFormatCode):
        """Set format"""
        self.__format = value

    @property
    def forces(self) -> List[BottomContactForceStorage]:
        """Specification of nodes for displacement storage"""
        return self.__forces

    @forces.setter
    def forces(self, value: List[BottomContactForceStorage]):
        """Set forces"""
        if not isinstance(value, Sequence):
            raise ValueError("Expected sequense, but was " , type(value))
        self.__forces = value

    @property
    def touchDownPoints(self) -> List[TouchDownPointStorage]:
        """Specification of nodes for displacement storage"""
        return self.__touchDownPoints

    @touchDownPoints.setter
    def touchDownPoints(self, value: List[TouchDownPointStorage]):
        """Set touchDownPoints"""
        if not isinstance(value, Sequence):
            raise ValueError("Expected sequense, but was " , type(value))
        self.__touchDownPoints = value
