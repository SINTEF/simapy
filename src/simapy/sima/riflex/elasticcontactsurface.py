# This an autogenerated file
# 
# Generated with ElasticContactSurface
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.elasticcontactsurface import ElasticContactSurfaceBlueprint
from typing import Dict
from ..sima import NamedObject
from ..sima import ScriptableValue
from .contactsurfaceline import ContactSurfaceLine
from .contactsurfacepoint import ContactSurfacePoint

class ElasticContactSurface(NamedObject):
    """
    Keyword arguments
    -----------------
    description : str
         (default "")
    scriptableValues : List[ScriptableValue]
    name : str
         (default None)
    points : List[ContactSurfacePoint]
    lines : List[ContactSurfaceLine]
    """

    def __init__(self , description="", **kwargs):
        super().__init__(**kwargs)
        self.description = description
        self.scriptableValues = list()
        self.name = None
        self.points = list()
        self.lines = list()
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return ElasticContactSurfaceBlueprint()


    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = value

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise ValueError("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = value

    @property
    def points(self) -> List[ContactSurfacePoint]:
        """"""
        return self.__points

    @points.setter
    def points(self, value: List[ContactSurfacePoint]):
        """Set points"""
        if not isinstance(value, Sequence):
            raise ValueError("Expected sequense, but was " , type(value))
        self.__points = value

    @property
    def lines(self) -> List[ContactSurfaceLine]:
        """"""
        return self.__lines

    @lines.setter
    def lines(self, value: List[ContactSurfaceLine]):
        """Set lines"""
        if not isinstance(value, Sequence):
            raise ValueError("Expected sequense, but was " , type(value))
        self.__lines = value
