# This an autogenerated file
# 
# Generated with CoupledAxialTorsionStrainItem
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.coupledaxialtorsionstrainitem import CoupledAxialTorsionStrainItemBlueprint
from typing import Dict
from ..sima import ScriptableValue
from .axialstiffnessitem import AxialStiffnessItem
from .torsionstiffnessitem import TorsionStiffnessItem

class CoupledAxialTorsionStrainItem(AxialStiffnessItem,TorsionStiffnessItem):
    """
    Keyword arguments
    -----------------
    description : str
         (default "")
    scriptableValues : List[ScriptableValue]
    axialForce : float
         Axial force corresponding to relative elongation.(default 0.0)
    relativeElongation : float
         Relative elongation(default 0.0)
    torsionMoment : float
         Torsion moment(default 0.0)
    torsionAngle : float
         Torsion angle/length(default 0.0)
    tensionTorsionCoupling : float
          Tension/torsion coupling parameter(default 0.0)
    """

    def __init__(self , description="", axialForce=0.0, relativeElongation=0.0, torsionMoment=0.0, torsionAngle=0.0, tensionTorsionCoupling=0.0, **kwargs):
        super().__init__(**kwargs)
        self.description = description
        self.scriptableValues = list()
        self.axialForce = axialForce
        self.relativeElongation = relativeElongation
        self.torsionMoment = torsionMoment
        self.torsionAngle = torsionAngle
        self.tensionTorsionCoupling = tensionTorsionCoupling
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return CoupledAxialTorsionStrainItemBlueprint()


    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = value

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise ValueError("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def axialForce(self) -> float:
        """Axial force corresponding to relative elongation."""
        return self.__axialForce

    @axialForce.setter
    def axialForce(self, value: float):
        """Set axialForce"""
        self.__axialForce = float(value)

    @property
    def relativeElongation(self) -> float:
        """Relative elongation"""
        return self.__relativeElongation

    @relativeElongation.setter
    def relativeElongation(self, value: float):
        """Set relativeElongation"""
        self.__relativeElongation = float(value)

    @property
    def torsionMoment(self) -> float:
        """Torsion moment"""
        return self.__torsionMoment

    @torsionMoment.setter
    def torsionMoment(self, value: float):
        """Set torsionMoment"""
        self.__torsionMoment = float(value)

    @property
    def torsionAngle(self) -> float:
        """Torsion angle/length"""
        return self.__torsionAngle

    @torsionAngle.setter
    def torsionAngle(self, value: float):
        """Set torsionAngle"""
        self.__torsionAngle = float(value)

    @property
    def tensionTorsionCoupling(self) -> float:
        """ Tension/torsion coupling parameter"""
        return self.__tensionTorsionCoupling

    @tensionTorsionCoupling.setter
    def tensionTorsionCoupling(self, value: float):
        """Set tensionTorsionCoupling"""
        self.__tensionTorsionCoupling = float(value)
