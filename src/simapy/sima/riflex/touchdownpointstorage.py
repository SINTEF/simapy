# This an autogenerated file
# 
# Generated with TouchDownPointStorage
from __future__ import annotations
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.touchdownpointstorage import TouchDownPointStorageBlueprint
from typing import Dict
from ..sima import ScriptableValue
from .linereference import LineReference
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from .arline import ARLine

class TouchDownPointStorage(LineReference):
    """
    Keyword arguments
    -----------------
    description : str
         (default "")
    scriptableValues : List[ScriptableValue]
    line : ARLine
         Line
    numberOfElements : int
         Additional bottom contact forces for a selected number of elements next to the TDP element(default 0)
    """

    def __init__(self , description="", numberOfElements=0, **kwargs):
        super().__init__(**kwargs)
        self.description = description
        self.scriptableValues = list()
        self.line = None
        self.numberOfElements = numberOfElements
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return TouchDownPointStorageBlueprint()


    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = value

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise ValueError("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def line(self) -> ARLine:
        """Line"""
        return self.__line

    @line.setter
    def line(self, value: ARLine):
        """Set line"""
        self.__line = value

    @property
    def numberOfElements(self) -> int:
        """Additional bottom contact forces for a selected number of elements next to the TDP element"""
        return self.__numberOfElements

    @numberOfElements.setter
    def numberOfElements(self, value: int):
        """Set numberOfElements"""
        self.__numberOfElements = int(value)
