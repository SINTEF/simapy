# This an autogenerated file
# 
# Generated with EnvelopeCurveSpecification
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.envelopecurvespecification import EnvelopeCurveSpecificationBlueprint
from typing import Dict
from ..sima import MOAO
from ..sima import ScriptableValue
from .matrixplotfileoption import MatrixPlotFileOption

class EnvelopeCurveSpecification(MOAO):
    """
    Keyword arguments
    -----------------
    description : str
         (default "")
    scriptableValues : List[ScriptableValue]
    storeDisplacement : bool
         Store displacement envelopes(default False)
    storeForce : bool
         Store force envelopes(default False)
    storeCurvature : bool
         Store curvature envelopes(default False)
    startTime : float
         Simulation start time for computing envelopes(default 0.0)
    endTime : float
         Simulation end time for computing envelopes(default 10000000.0)
    plotOption : MatrixPlotFileOption
    """

    def __init__(self , description="", storeDisplacement=False, storeForce=False, storeCurvature=False, startTime=0.0, endTime=10000000.0, plotOption=MatrixPlotFileOption.MAX_AND_STANDARD_DEV, **kwargs):
        super().__init__(**kwargs)
        self.description = description
        self.scriptableValues = list()
        self.storeDisplacement = storeDisplacement
        self.storeForce = storeForce
        self.storeCurvature = storeCurvature
        self.startTime = startTime
        self.endTime = endTime
        self.plotOption = plotOption
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return EnvelopeCurveSpecificationBlueprint()


    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = value

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise ValueError("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def storeDisplacement(self) -> bool:
        """Store displacement envelopes"""
        return self.__storeDisplacement

    @storeDisplacement.setter
    def storeDisplacement(self, value: bool):
        """Set storeDisplacement"""
        self.__storeDisplacement = bool(value)

    @property
    def storeForce(self) -> bool:
        """Store force envelopes"""
        return self.__storeForce

    @storeForce.setter
    def storeForce(self, value: bool):
        """Set storeForce"""
        self.__storeForce = bool(value)

    @property
    def storeCurvature(self) -> bool:
        """Store curvature envelopes"""
        return self.__storeCurvature

    @storeCurvature.setter
    def storeCurvature(self, value: bool):
        """Set storeCurvature"""
        self.__storeCurvature = bool(value)

    @property
    def startTime(self) -> float:
        """Simulation start time for computing envelopes"""
        return self.__startTime

    @startTime.setter
    def startTime(self, value: float):
        """Set startTime"""
        self.__startTime = float(value)

    @property
    def endTime(self) -> float:
        """Simulation end time for computing envelopes"""
        return self.__endTime

    @endTime.setter
    def endTime(self, value: float):
        """Set endTime"""
        self.__endTime = float(value)

    @property
    def plotOption(self) -> MatrixPlotFileOption:
        """"""
        return self.__plotOption

    @plotOption.setter
    def plotOption(self, value: MatrixPlotFileOption):
        """Set plotOption"""
        self.__plotOption = value
