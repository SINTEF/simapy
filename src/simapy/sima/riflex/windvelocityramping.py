# This an autogenerated file
# 
# Generated with WindVelocityRamping
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.windvelocityramping import WindVelocityRampingBlueprint
from typing import Dict
from ..sima import MOAO
from ..sima import ScriptableValue

class WindVelocityRamping(MOAO):
    """
    Keyword arguments
    -----------------
    description : str
         (default "")
    scriptableValues : List[ScriptableValue]
    include : bool
         (default False)
    rampStartValue : float
         (default 0.0)
    rampDuration : float
         (default 0.0)
    delayed : bool
         Delay the ramp start to half the ramp duration(default False)
    """

    def __init__(self , description="", include=False, rampStartValue=0.0, rampDuration=0.0, delayed=False, **kwargs):
        super().__init__(**kwargs)
        self.description = description
        self.scriptableValues = list()
        self.include = include
        self.rampStartValue = rampStartValue
        self.rampDuration = rampDuration
        self.delayed = delayed
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return WindVelocityRampingBlueprint()


    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = value

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise ValueError("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def include(self) -> bool:
        """"""
        return self.__include

    @include.setter
    def include(self, value: bool):
        """Set include"""
        self.__include = bool(value)

    @property
    def rampStartValue(self) -> float:
        """"""
        return self.__rampStartValue

    @rampStartValue.setter
    def rampStartValue(self, value: float):
        """Set rampStartValue"""
        self.__rampStartValue = float(value)

    @property
    def rampDuration(self) -> float:
        """"""
        return self.__rampDuration

    @rampDuration.setter
    def rampDuration(self, value: float):
        """Set rampDuration"""
        self.__rampDuration = float(value)

    @property
    def delayed(self) -> bool:
        """Delay the ramp start to half the ramp duration"""
        return self.__delayed

    @delayed.setter
    def delayed(self, value: bool):
        """Set delayed"""
        self.__delayed = bool(value)
