# This an autogenerated file
# 
# Generated with ChainCrossSection
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.chaincrosssection import ChainCrossSectionBlueprint
from typing import Dict
from ..sima import ScriptableValue
from .constructiontype import ConstructionType
from .crosssection import CrossSection
from .steelgrade import SteelGrade

class ChainCrossSection(CrossSection):
    """
    Keyword arguments
    -----------------
    description : str
         (default "")
    scriptableValues : List[ScriptableValue]
    name : str
         (default None)
    diameter : float
         Nominal chain diameter(default 0.0)
    steelGrade : SteelGrade
    constructionType : ConstructionType
    """

    def __init__(self , description="", diameter=0.0, steelGrade=SteelGrade.R3, constructionType=ConstructionType.STUDLESS, **kwargs):
        super().__init__(**kwargs)
        self.description = description
        self.scriptableValues = list()
        self.name = None
        self.diameter = diameter
        self.steelGrade = steelGrade
        self.constructionType = constructionType
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return ChainCrossSectionBlueprint()


    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = value

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise ValueError("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = value

    @property
    def diameter(self) -> float:
        """Nominal chain diameter"""
        return self.__diameter

    @diameter.setter
    def diameter(self, value: float):
        """Set diameter"""
        self.__diameter = float(value)

    @property
    def steelGrade(self) -> SteelGrade:
        """"""
        return self.__steelGrade

    @steelGrade.setter
    def steelGrade(self, value: SteelGrade):
        """Set steelGrade"""
        self.__steelGrade = value

    @property
    def constructionType(self) -> ConstructionType:
        """"""
        return self.__constructionType

    @constructionType.setter
    def constructionType(self, value: ConstructionType):
        """Set constructionType"""
        self.__constructionType = value
