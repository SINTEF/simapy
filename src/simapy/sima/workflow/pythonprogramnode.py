# This an autogenerated file
# 
# Generated with PythonProgramNode
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.pythonprogramnode import PythonProgramNodeBlueprint
from typing import Dict
from ..post import ControlSignalInputSlot
from ..post import RunNode
from ..sima import ScriptableValue
from ..sima import SingleValue
from .fileinputslot import FileInputSlot
from .fileoutputslot import FileOutputSlot

class PythonProgramNode(RunNode):
    """
    Keyword arguments
    -----------------
    description : str
         (default "")
    scriptableValues : List[ScriptableValue]
    name : str
         (default None)
    x : int
         (default 0)
    y : int
         (default 0)
    h : int
         (default 0)
    w : int
         (default 0)
    controlSignalInputSlots : List[ControlSignalInputSlot]
    file : str
         Python program to run(default None)
    fileInputSlots : List[FileInputSlot]
    fileOutputSlots : List[FileOutputSlot]
    parameters : List[SingleValue]
    """

    def __init__(self , description="", x=0, y=0, h=0, w=0, **kwargs):
        super().__init__(**kwargs)
        self.description = description
        self.scriptableValues = list()
        self.name = None
        self.x = x
        self.y = y
        self.h = h
        self.w = w
        self.controlSignalInputSlots = list()
        self.file = None
        self.fileInputSlots = list()
        self.fileOutputSlots = list()
        self.parameters = list()
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return PythonProgramNodeBlueprint()


    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = value

    @property
    def scriptableValues(self) -> List[ScriptableValue]:
        """"""
        return self.__scriptableValues

    @scriptableValues.setter
    def scriptableValues(self, value: List[ScriptableValue]):
        """Set scriptableValues"""
        if not isinstance(value, Sequence):
            raise ValueError("Expected sequense, but was " , type(value))
        self.__scriptableValues = value

    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = value

    @property
    def x(self) -> int:
        """"""
        return self.__x

    @x.setter
    def x(self, value: int):
        """Set x"""
        self.__x = int(value)

    @property
    def y(self) -> int:
        """"""
        return self.__y

    @y.setter
    def y(self, value: int):
        """Set y"""
        self.__y = int(value)

    @property
    def h(self) -> int:
        """"""
        return self.__h

    @h.setter
    def h(self, value: int):
        """Set h"""
        self.__h = int(value)

    @property
    def w(self) -> int:
        """"""
        return self.__w

    @w.setter
    def w(self, value: int):
        """Set w"""
        self.__w = int(value)

    @property
    def controlSignalInputSlots(self) -> List[ControlSignalInputSlot]:
        """"""
        return self.__controlSignalInputSlots

    @controlSignalInputSlots.setter
    def controlSignalInputSlots(self, value: List[ControlSignalInputSlot]):
        """Set controlSignalInputSlots"""
        if not isinstance(value, Sequence):
            raise ValueError("Expected sequense, but was " , type(value))
        self.__controlSignalInputSlots = value

    @property
    def file(self) -> str:
        """Python program to run"""
        return self.__file

    @file.setter
    def file(self, value: str):
        """Set file"""
        self.__file = value

    @property
    def fileInputSlots(self) -> List[FileInputSlot]:
        """"""
        return self.__fileInputSlots

    @fileInputSlots.setter
    def fileInputSlots(self, value: List[FileInputSlot]):
        """Set fileInputSlots"""
        if not isinstance(value, Sequence):
            raise ValueError("Expected sequense, but was " , type(value))
        self.__fileInputSlots = value

    @property
    def fileOutputSlots(self) -> List[FileOutputSlot]:
        """"""
        return self.__fileOutputSlots

    @fileOutputSlots.setter
    def fileOutputSlots(self, value: List[FileOutputSlot]):
        """Set fileOutputSlots"""
        if not isinstance(value, Sequence):
            raise ValueError("Expected sequense, but was " , type(value))
        self.__fileOutputSlots = value

    @property
    def parameters(self) -> List[SingleValue]:
        """"""
        return self.__parameters

    @parameters.setter
    def parameters(self, value: List[SingleValue]):
        """Set parameters"""
        if not isinstance(value, Sequence):
            raise ValueError("Expected sequense, but was " , type(value))
        self.__parameters = value
